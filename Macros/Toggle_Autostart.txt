// Defines Global Variables
var PluginName="Spinalcord Mapper";
var MacroName="Toggle Autostart";
var FileExt="";
var MinNbFile=2;
var FolderSuffix="";
var SubDirArray=newArray("");

/////////////// Header and Housekeeping
run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack display invert redirect=None decimal=9");
run("Input/Output...", "jpeg=100 gif=-1 file=.csv use skip copy_column copy_row save_column");
run("Misc...", "divide=Infinity hide");
CellSeparator= ",";
LineSeparator="\n";
call("ij.Prefs.set", "tw.font.size",2);
// Set IJ Size and position
IJPosX=screenWidth*0.1; // The position of ImageJ in X
IJPosY=screenHeight*0;
IJSizeX=575; // The width of ImageJ in pixel
IJSizeY=100;
Spacer=20; // A spacer
DummyVariable=eval("script","IJ.getInstance().setLocation("+IJPosX+","+IJPosY+");"); // Adjust the position of the ImageJ bar

// Set Toolbar Size and position
ToolbarSizeX=150; // Size of the toolbar
ToolbarSizeY=150;
ToolbarPosX=IJPosX+IJSizeX+Spacer;
ToolbarPosY=IJPosY;
// Check if the toolbar is present
ListWindows=getList("window.titles");
for(n=0; n<ListWindows.length; n++){
  WindowN=ListWindows[n];
  if(WindowN==PluginName+" Toolbar"){
    // If tool bar is present place it next to the IJ bar
    selectWindow(PluginName+" Toolbar");
    setLocation(ToolbarPosX,ToolbarPosY);
  }
}



//Set Threshold Window Size and Position
ThresholdSizeX=290;
ThresholdSizeY=260;
ThresholdPosX=ToolbarPosX; // The Position in X of the threshold window
ThresholdPosY=ToolbarPosY+ToolbarSizeY+Spacer;
call("ij.Prefs.set", "threshold.loc", ThresholdPosX+" , "+ThresholdPosY);

// Set ROI Manager Size and Position
ROIManagerSizeX=290;
ROIManagerSizeY=260;
ROIManagerPosX=ToolbarPosX+ToolbarSizeX+Spacer; // The Position in X of the ROI manager window
ROIManagerPosY=ThresholdPosY;
call("ij.Prefs.set", "manager.loc", ROIManagerPosX+" , "+ROIManagerPosY);

// Set Results Size and Position
ResultsSizeX=(screenWidth-(ToolbarPosX+ToolbarSizeX+Spacer));
ResultsSizeY=ToolbarSizeY;
ResultsPosX=ToolbarPosX+ToolbarSizeX+Spacer; // The Position in X of the ROI manager window
ResultsPosY=ToolbarPosY;
call("ij.Prefs.set", "results.loc", ResultsPosX+" , "+ResultsPosY);
call("ij.Prefs.set", "results.width", ResultsSizeX);
call("ij.Prefs.set", "results.height", ResultsSizeY);
//////////////// Header and Housekeeping

MacroFolder=eval("script", "IJ.getDirectory(\"macros\");");
StartUpMarcro="RunAtStartup.ijm";
// If the RunAtStartup do not exists create an empty new one
if (File.exists(MacroFolder+StartUpMarcro)==0){
  NewStartUpMacro=File.open(MacroFolder+StartUpMarcro);
  File.close(NewStartUpMacro);
} // end of create an empty RunAtStartUp if it does not yet exist
StartUpMacroContent=File.openAsString(MacroFolder+StartUpMarcro);
StartUpMacroContentArray=split(StartUpMacroContent, "\n");

// Set the Status as inactive
AutostartStatus="inactive";

// Screen the Content of Startup and if matches change the status to active
for (n=0; n<StartUpMacroContentArray.length; n++){
  if(matches(StartUpMacroContentArray[n], "run\\(\""+PluginName+" Toolbar\"\\)\\;")==1){
    AutostartStatus="active";
    RowAutostartStatus=n;
  }// end of if
} // end of for


// Prompt user dialog
Dialog.create(PluginName);
Dialog.setInsets(0,0,0);
Dialog.addMessage(PluginName+" Autostart is currently " +AutostartStatus+".");
Dialog.setInsets(5,60,0);
Dialog.addMessage("What would you like to do?");
Dialog.setInsets(0,0,0);
// If the status is active propose 2 choices
if(AutostartStatus=="active"){
  AutostartOptionArray=newArray("Keep "+PluginName+" Autostart Active", "Remove "+PluginName+" Autostart");
  Dialog.setInsets(0,0,0);
  Dialog.addRadioButtonGroup("", AutostartOptionArray,2,1,"Keep "+PluginName+" Autostart Active");
  // if status is inactive propose two other choices
} else if (AutostartStatus=="inactive"){
  AutostartOptionArray=newArray("Activate "+PluginName+" Autostart", "Keep "+PluginName+" Autostart OFF for now");
  Dialog.setInsets(0,0,0);
  Dialog.addRadioButtonGroup("", AutostartOptionArray,2,1,"Activate "+PluginName+" Autostart");
}
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
Dialog.show();
AutostartChoice = Dialog.getRadioButton();


if (matches(AutostartChoice,".*(Keep).*")==1){
  // do nothing
  if (isOpen(PluginName+" Toolbar")!=1){
    run(PluginName+" Toolbar");
  }
  selectWindow(PluginName+" Toolbar");
  setLocation(IJPosX+IJSizeX+Spacer, IJPosY);

} else {
  if (matches(AutostartChoice,".*(Remove).*")==1){

    //Create an empty string
    NewStartUpMacroContent="";
    // Reconstruct the StartUpMacro omitting the Rowwith from the array
    for (n=0; n<StartUpMacroContentArray.length; n++){
      if(n==RowAutostartStatus){
        //do nothing
      } else {
        // reconstruct the autostart from the array
        NewStartUpMacroContent=NewStartUpMacroContent+StartUpMacroContentArray[n]+"\n";
      } // end of if
    } // end of for
    // Save the File startup with the new content
    File.saveString(NewStartUpMacroContent, MacroFolder+StartUpMarcro);

    // if user wants to activate autostart
  } else if (matches(AutostartChoice,".*(Activate).*")==1){
    //Create an empty string
    NewStartUpMacroContent="";
    // reconstruct the autostart from the array
    for (n=0; n<StartUpMacroContentArray.length; n++){
      NewStartUpMacroContent=NewStartUpMacroContent+StartUpMacroContentArray[n]+"\n";
    }
    // add the  autostart at the end
    NewStartUpMacroContent=NewStartUpMacroContent+"run(\""+PluginName+" Toolbar\")\;"+"\n";
    // Save the File startup with the new content
    File.saveString(NewStartUpMacroContent, MacroFolder+StartUpMarcro);
    if (isOpen(PluginName+" Toolbar")!=1){
      run(PluginName+" Toolbar");
    }
    selectWindow(PluginName+" Toolbar");
    setLocation(IJPosX+IJSizeX+Spacer, IJPosY);

    }



  ///////////////////// Initial Dialog Box
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage("To validate the modification ImageJ needs to restart.");
  Dialog.setInsets(5, 50, 0);
  Dialog.addMessage("Do you want to quit ImageJ now?");
  Dialog.setInsets(0, 100, 0);
  Dialog.addRadioButtonGroup("", newArray("Quit", "Don't Quit"), 2, 1, "Don't Quit");
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  Dialog.show();
  RestartChoice=Dialog.getRadioButton();
  if(RestartChoice=="Quit"){run("Quit");}

}
