// Defines Global Variables
var PluginName="Spinalcord Mapper";
var MacroName="Alignment and Registration";
var FileExt="TIF";
var MinNbFile=1;
var FolderSuffix="Aligned and Registered";
CellSeparator= "\t";
LineSeparator="\n";


/////////////// Header, Set Preferences, Options and Housekeeping
// Select All measurements, Invert Y, and use 9 decimals
run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack display invert redirect=None decimal=9");
run("Line Width...", "line=1"); // Set Line width as 1
run("Input/Output...", "jpeg=100 gif=-1 file=.txt use copy_row save_column"); // Set Output as Txt and save columns and ignore row numbers
run("Point Tool...", "type=Hybrid color=White size=Large label show counter=0");// Set the Point tool as yellow Medium Circle
run("Colors...", "foreground=white background=black selection=White"); // Set foreground and background colors Selection is yellow
run("Appearance...", "  menu=0 16-bit=Automatic"); // Change appareance of 16bit image as automatic
run("Misc...", "divide=Infinity"); // Make sure Miscellaneous Options are set correctly
run("Overlay Options...", "stroke=White width=2 point=Hybrid size=Large fill=none apply show");
run("Labels...", "color=White font=10 show bold");
call("ij.Prefs.set", "tw.font.size",2);


IJPosX=screenWidth*0.1; // The position of ImageJ in X // Set IJ Size and position
IJPosY=screenHeight*0; // The position of ImageJ in Y at the top of the screen
IJSizeX=570; // The width of ImageJ toolbar in pixel
IJSizeY=100; // The Height of ImageJ toolbar in pixel
Spacer=25; // A spacer
DummyVariable=eval("script","IJ.getInstance().setLocation("+IJPosX+","+IJPosY+");"); // Adjust the position of the ImageJ toolbar

ToolbarSizeX=300;// Set Toolbar Size and position
ToolbarSizeY=200; // Size of the toolbar
ToolbarPosX=IJPosX+IJSizeX+Spacer; // Position of the Toolbar is to the right of the ImageJ toolbar
ToolbarPosY=IJPosY; // Position of to the Toolbar in Y

if(isOpen(PluginName+" Toolbar")){
  selectWindow(PluginName+" Toolbar");
  setLocation(ToolbarPosX,ToolbarPosY);
}

ThresholdSizeX=290;// Set Threshold Window Size and Position
ThresholdSizeY=260;
ThresholdPosX=ToolbarPosX; // The Position in X of the threshold window
ThresholdPosY=ToolbarPosY+ToolbarSizeY+Spacer; // Threshold toolbar is just below the plugin toolbar
call("ij.Prefs.set", "threshold.loc", ThresholdPosX+" , "+ThresholdPosY);

ROIManagerSizeX=250;// Set ROI Manager Size and Position
ROIManagerSizeY=300;
ROIManagerPosX=ToolbarPosX; // The Position in X of the ROI manager window which is to the right of the Treshold widnow
ROIManagerPosY=ThresholdPosY+ThresholdSizeY+Spacer;
call("ij.Prefs.set", "manager.loc", ROIManagerPosX+" , "+ROIManagerPosY);

ResultsSizeX=(screenWidth-(ToolbarPosX+ToolbarSizeX+Spacer)); // Set Results Size and Position to the right of the toolbar until the bottom of Threhsold window
ResultsSizeY=ROIManagerPosY-Spacer;
ResultsPosX=ToolbarPosX+ToolbarSizeX+Spacer;
ResultsPosY=ToolbarPosY;
call("ij.Prefs.set", "results.loc", ResultsPosX+" , "+ResultsPosY);
call("ij.Prefs.set", "results.width", ResultsSizeX);
call("ij.Prefs.set", "results.height", ResultsSizeY);

LogSizeX=(screenWidth-(ToolbarPosX+ToolbarSizeX+Spacer)); // Set Log location
LogSizeY=ROIManagerPosY-Spacer;
LogPosX=ToolbarPosX+ToolbarSizeX+Spacer; // The Position in X of the ROI manager window
LogPosY=ToolbarPosY;
call("ij.Prefs.set", "log.loc", LogPosX+" , "+LogPosY);

DebugSizeX=(screenWidth-(ToolbarPosX+ToolbarSizeX+Spacer)); // Set Debug location
DebugSizeY= ROIManagerPosY-Spacer;
DebugPosX=ToolbarPosX+ToolbarSizeX+Spacer; // The Position in X of the ROI manager window
DebugPosY=ToolbarPosY;
call("ij.Prefs.set", "debug.loc", DebugPosX+" , "+DebugPosY);

PointToolSizeX=250;// Set point Tool location
PointToolSizeY=300;
PointToolPosX= ROIManagerPosX+ROIManagerSizeX+Spacer;
PointToolPosY= ROIManagerPosY;

BCSizeX=150;// Set Brightness and contrast location
BCSizeY=300;
BCPosX=PointToolPosX+PointToolSizeX+Spacer;
BCPosY=ROIManagerPosY;
call("ij.Prefs.set", "b&c.loc", BCPosX+" , "+BCPosY);
//////////////// Header and Housekeeping

//////////////// General Functions
// Function to Append to an array
function Append(ArrayI, Value) {
  ArrayJ = newArray(ArrayI.length+1);
  for (ValueI=0; ValueI<ArrayI.length; ValueI++)
  ArrayJ[ValueI] = ArrayI[ValueI];
  ArrayJ[ArrayI.length] = Value;
  return ArrayJ;
}

// Function to display a message
var MessageDialogPass;
function MessageDialog(Message){
  MessageDialogPass=0;
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(Message);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  CloseUtilityWindows(ListUtilityWindows);
  Dialog.show();
  MessageDialogPass=1;
}

// Function to display an error and propose to Fix it / Try again or to quit
var ErrorDialogPass;
var UserResponseErrorDialog;
function ErrorDialog(MessageError, MessageFix, ErrorResponseArray){
  ErrorDialogPass=0;
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(MessageError);
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(MessageFix);
  Dialog.setInsets(0, 0, 0);
  Dialog.setInsets(0, 20, 0);
  Dialog.addRadioButtonGroup("", ErrorResponseArray, ErrorResponseArray.length, 1, ErrorResponseArray[0]);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  CloseUtilityWindows(ListUtilityWindows);
  Dialog.show();
  UserResponseErrorDialog=Dialog.getRadioButton();
  return UserResponseErrorDialog;
}

// Function to select an Input Directory containing at least MinNbFile with the correct File Extension FileExt
var SelectInputDirPass; // Switch for the dialog box
var InputDirPath; // Path of the input directory
var ParentDir; // ParentDirectory of the selected input directory
var InputDirName; // Name of the Input Directory
var NbFileWithCorrectExt; // Nb of File with the correct extension in the input directory
var InputItemList; // List of Files and folders in the input directory (all files no matter the extension)
var InputCorrectExtFileList; // List of files with the correct extension
var InputFileList;
var NbFile;

function SelectInputDir(MinNbFile, FileExt){
  // MinNbFile This is the minimum Nb of File to be present in the list to be accepted
  // FileExt This is the File extension as a string example "tif"
  InputDirPath=getDirectory("Select a FOLDER containing at least "+MinNbFile+" "+FileExt+" Files to process."); // Select a Folder
  InputItemList=getFileList(InputDirPath); // List of Item in the selected folder
  ParentDir=File.getParent(InputDirPath)+File.separator;
  InputDirName=File.getName(InputDirPath);

  SelectInputDirPass=0; // Switch for the Function
  NbFileWithCorrectExt=0; // Count of Nb of Files
  BaseNameError=0; // Switch to make sure there is only one "." in the filename
  InputCorrectExtFileList=newArray(0);

  // Evaluate the Nb of File with correct extension and add them to InputCorrectExtFileList
  for (ItemI=0; ItemI<InputItemList.length; ItemI++){
    if(endsWith(toLowerCase(InputItemList[ItemI]), "."+toLowerCase(FileExt))){ // Select files with correct extension
      InputCorrectExtFileList=Append(InputCorrectExtFileList, InputItemList[ItemI]);
    }
  }
  NbFileWithCorrectExt=InputCorrectExtFileList.length;
  if(NbFileWithCorrectExt<MinNbFile){ // If the Nb of File with correct extension is not at least equal to the MinNbFile Create Error Message.
    MessageError="Sorry but the Folder: \"" +InputDirName+"\" does not contain at least "+MinNbFile+" "+FileExt+" File.";
    MessageFix=MacroName+" requires a Folder that contains at least "+MinNbFile+" "+FileExt+" File.";
    ErrorResponseArray=newArray("Select Another Folder", "Cancel and Close");
    MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because the Folder: \"" +InputDirName+"\" did not contain at least "+MinNbFile+" "+FileExt+" File.";
    ErrorDialog(MessageError, MessageFix, ErrorResponseArray);

    if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
      CleanExit(MessageQuit);
    } else {
    }
  } else { // if NbFileWithCorrectExt is above or equal MinNbFile Evaluate Filenames
    InputFileList=newArray(0);
    for (FileI=0; FileI<InputCorrectExtFileList.length; FileI++){
      BasenameFileIArray=split(InputCorrectExtFileList[FileI],"."); // Make an array from the filename
      if(BasenameFileIArray.length!=2){// if there is more than one . in the file name abort
        MessageError="Sorry but the "+FileExt+" File:\n\""+InputCorrectExtFileList[FileI]+"\"\ncontains more than one \".\" in its filename.";
        MessageFix=MacroName+" function does NOT allow filenames with more than one unique \".\" used for the file extension.";
        ErrorResponseArray=newArray("Select Another Folder", "Ignore This File", "Cancel and Close");
        MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because the File \""+InputCorrectExtFileList[FileI]+"\" contains more than one \".\"\nMake sure filenames have no more than one unique \".\" for the File extension.";
        ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
        if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
          CleanExit(MessageQuit);
        } else if (UserResponseErrorDialog=="Ignore This File"){

        } else if (UserResponseErrorDialog=="Select Another Folder") {
          FileI=InputCorrectExtFileList.length;
          SelectInputDirPass=0;
          ErrorDialogPass=1;
        }
      }else { // If basename is good add it to the InputFileList
        InputFileList=Append(InputFileList, InputCorrectExtFileList[FileI]);
      }
    }
    // Make sure InpuFileList is > MinNbFile
    NbFile=InputFileList.length;
    if(NbFile<MinNbFile && ErrorDialogPass!=1){ // If the Nb of File with correct extension is not at least equal to the MinNbFile Create Error Message.
      MessageError="Sorry but the Folder: \"" +InputDirName+"\" does not contain at least "+MinNbFile+" "+FileExt+" File with no more than one \".\" in its filename.";
      MessageFix=MacroName+" requires a Folder that contains at least "+MinNbFile+" "+FileExt+" File with one unique \".\" used for the file extension.";
      ErrorResponseArray=newArray("Select Another Folder", "Cancel and Close");
      MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because the Folder: \"" +InputDirName+"\" did not contain at least "+MinNbFile+" "+FileExt+" File no more than one \".\" in its filename.";
      ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
      if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
        CleanExit(MessageQuit);
      } else {
        SelectInputDirPass=0;
      }
    } else if (ErrorDialogPass==1){
      SelectInputDirPass=0; // InputDir Pass the criteria
    } else {
      SelectInputDirPass=1; // InputDir Pass the criteria
    }
  }
} // End of Function Select InputDir

// Function to create a new output directory
var OutputDirPath; // The path of the output directory
var OutputDirName; // The name of the output directory
function CreateOutputDir(ParentDir, InputDirName, FolderSuffix){ // Folder suffix is a string appended to the input Directory
  OutputDirPath=ParentDir+InputDirName+"_"+FolderSuffix+File.separator; // Create the outputdirpath
  n=1;
  while(File.exists(OutputDirPath)!=0){ // If the path already exist, increment with _ n until it does not exist
    n++;
    OutputDirPath=ParentDir+InputDirName+"_"+FolderSuffix+"_"+n+File.separator;
  } // End of making sure the outpudirectory is a new folder
  File.makeDirectory(OutputDirPath); // Create the outpudirectory
  OutputDirName=File.getName(OutputDirPath); // Get the Name of the output directory
}

////// Close Function
function CloseAndCleanUp(PluginName, FileI, NbFile, FileExt, InputDirName, OutputDirName){
  beep();

  ListImages=getList("image.titles");
  for(n=0; n<ListImages.length; n++){
    ImageN=ListImages[n];
    selectWindow(ImageN);    run("Close");
  }


  /////////////////////// Closing Dialog Box
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(FileI+" of "+ NbFile+" "+ FileExt+ " Files in the folder:\n"+InputDirName+"\nhave been processed successfully.");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage("Files are saved in the following folder:\n"+OutputDirName+".");
  Dialog.setInsets(0, 0, 0);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  CloseUtilityWindows(ListUtilityWindows);
  Dialog.show();
}  ///////////////////////// End of Close Function

////// CleanExit Function
function CleanExit(MessageQuit){
  beep();
  if(isOpen("Threshold")){    selectWindow("Threshold");    run("Close");  }//end of if threshold is open
  if(isOpen("Results")){    run("Clear Results");    selectWindow("Results");    run("Close");  }//end of if Results is open
  if(isOpen("ROI Manager")){    roiManager("reset");    selectWindow("ROI Manager");    run("Close");  }//End of Close the ROI Manager
  if(isOpen("B&C")){    selectWindow("B&C");    run("Close");  }//End of Close the Brightness window

  ListImages=getList("image.titles");
  for(n=0; n<ListImages.length; n++){
    ImageN=ListImages[n];
    selectWindow(ImageN);    run("Close");

  }
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(MessageQuit);
  Dialog.setInsets(0, 0, 0);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  CloseUtilityWindows(ListUtilityWindows);
  Dialog.show();
  exit();
}  ///////////////////////// End of CleanExit Function

//////////Close UtilityWindows
function CloseUtilityWindows(ListUtilityWindows){
  // Typically  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  for(WindowI=0; WindowI<ListUtilityWindows.length; WindowI++){
    UtilityWindowI=ListUtilityWindows[WindowI];
    if(isOpen(UtilityWindowI)){
      if(UtilityWindowI=="Results"){        run("Clear Results");       }
      if(UtilityWindowI=="ROI Manager"){       roiManager("reset");      }
      selectWindow(UtilityWindowI); run("Close");
    }
  }
}
//////////End of Close UtilityWindows
////////////////////End of General Functions

/////////////////////  Specific Function
// This function Prompt for a specific type of selection and ensure a selection is made before moving next
var SelectionPromptPass; // This is the switch when the selection pass the criteria
function SelectionPrompt(SelectionTypeName, SelectionInfo){
  // Selection name is the name of the selection. It is a string that can take the following values:
  // rectangle, oval, polygon, freehand, traced, straight line, segmented line, freehandline, angle, point, multipoint
  // SelectionInfo is a string that explains what the Selection should be
  //SelectionPromptPass=0;
  // Define what the SelectionType value for each selection
  if(SelectionTypeName=="rectangle"){
    SelectionValue=0;
  } else if(SelectionTypeName=="oval"){
    SelectionValue=1;
  } else if(SelectionTypeName=="polygon"){
    SelectionValue=2;
  } else if(SelectionTypeName=="freehand"){
    SelectionValue=3;
  } else if(SelectionTypeName=="traced"){
    SelectionValue=4;
  } else if(SelectionTypeName=="straight line"){
    SelectionValue=5;
  } else if(SelectionTypeName=="segmented line"){
    SelectionValue=6;
  } else if(SelectionTypeName=="freehand line"){
    SelectionValue=7;
  } else if(SelectionTypeName=="angle"){
    SelectionValue=8;
  } else if(SelectionTypeName=="point"){
    SelectionValue=10;
  } else if(SelectionTypeName=="multipoint"){
    SelectionValue=10;
  } else {
    SelectionValue=-1; // No selection
  }

  CurrentImageName=getTitle(); // Get the Image of the Current Image
  CurrentSelection=selectionType(); // Get the Current selection

  // If the currentselection does not match the expected selection but if there is something in the overlay
  if(CurrentSelection!=SelectionValue && Overlay.size==1){
    run("Show Overlay");
    Overlay.activateSelection(0); // Get the selection from the overlay
    run("Remove Overlay");
    CurrentSelection=selectionType(); // refresh Current selection
  }

  if(CurrentSelection==SelectionValue && NbOfPoints==0){ // If a correct Selection is present ask what to do
    setBatchMode("show");
    selectWindow(CurrentImageName);
    setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);

    MessageError="A "+SelectionTypeName+" selection was detected.";
    MessageFix="What would you like to do?";
    ErrorResponseArray=newArray("Keep the current "+SelectionTypeName+" selection", "Adjust the current "+SelectionTypeName+" selection", "Discard the current "+SelectionTypeName+" selection", "Cancel and Close");
    MessageQuit="";
    ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
    if(UserResponseErrorDialog==ErrorResponseArray[0]){
      SelectionPromptPass=1;
    } else if(UserResponseErrorDialog==ErrorResponseArray[1]){
      SelectionPromptPass=0; // Set the Switch to 0
    } else if(UserResponseErrorDialog==ErrorResponseArray[2]) {
      run("Remove Overlay");
      run("Select None");
      SelectionPromptPass=0; // Set the Switch to 0
    }else if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]) {
      CleanExit(MessageQuit);
    }

  } else { // Else the current selection does not match the expected selection
    SelectionPromptPass=0;
    if(NbOfPoints==0){
      run("Select None");

    }
  }

  if(SelectionPromptPass==0){ // If the selection is not set prompt or does not correspond to the expected selection
    setBatchMode("show");
    selectWindow(CurrentImageName);
    setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
    run("Hide Overlay");
    setTool(SelectionTypeName);
    // if(SelectionTypeName=="multipoint"){
    //   setTool("multipoint");
    //   run("Point Tool...", "type=Hybrid color=White size=Large label show counter=0"); // Set the Point tool as yellow Medium Circle
    //   doCommand("Point Tool..."); // Bring the non-modal Point Tool at front in a separate thread
    // }
    call("ij.gui.WaitForUserDialog.setNextLocation", ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer)

    waitForUser(PluginName+" Information", "Draw a "+SelectionTypeName+" selection.\n"
    +SelectionInfo+
    "\nWhen done, press OK.");
    CurrentSelection=selectionType();
    if(CurrentSelection<0 || CurrentSelection!=SelectionValue){
      if(CurrentSelection<0){
        MessageError="Sorry but no "+SelectionTypeName+" selection was detected.";
        MessageFix=MacroName+" function requires a "+SelectionTypeName+" selection.";
        ErrorResponseArray=newArray("Create a "+SelectionTypeName+" selection", "Cancel and Close");
        MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because no "+SelectionTypeName+" was detected.";
      } else if(CurrentSelection!=SelectionValue){
        MessageError="Sorry but the Selection is not a "+SelectionTypeName+".";
        MessageFix=MacroName+" function requires a "+SelectionTypeName+" selection.";
        ErrorResponseArray=newArray("Create a "+SelectionTypeName+" selection", "Cancel and Close");
        MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because the provided selection was not a "+SelectionTypeName+".";
      }
      setBatchMode("show");

      // Close results windows if it is open
      if(isOpen("Results")){
        run("Clear Results");
        selectWindow("Results");        run("Close");

      }//end of if Results is open
      ErrorDialog(MessageError,MessageFix, ErrorResponseArray);
      if(UserResponseErrorDialog==ErrorResponseArray[0]){
        run("Select None");
        SelectionPromptPass=0;
      } else if (UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
        CleanExit(MessageQuit);
      }
    } else {
      SelectionPromptPass=1;
      setBatchMode("hide");

    }// End of else Selection is good
  } // End of If selection does not pass prompt for a selection
} // End of Function Get selection
///////////////////// End Sepcific Function




InitialMessage=""+MacroName+" will :"
+"\n- Prompt to select a Folder containing at least "+MinNbFile+" "+FileExt+" File to process"
+"\n\nFor each "+FileExt+" File:"
+"\n- Prompt for 7 registration points"
+"\n- Center the Image on the first registration point"
+"\n- Rotate the Image to have Registration Point #4 and #5 horizontal"
+"\n- Save Images as TIF Files with the Registration Points as an overlay"
+"\n- Save the X and Y Registration Coordinates in a single TXT File";

MessageDialog(InitialMessage); // Display the Intial Dialog

do{
  SelectInputDir(MinNbFile,FileExt); // Select the InputDirectory
}while(SelectInputDirPass!=1)

CreateOutputDir(ParentDir, InputDirName, FolderSuffix); // Create output Directory

// Write The Coordinates in a TXT file
TXTFileName=""+InputDirName+"_"+"Registration_Coordinates";
TXTFilePath=OutputDirPath+TXTFileName+".txt";
TXTFile = File.open(TXTFilePath);
// Write the header
print(TXTFile, "File_ID"+CellSeparator+"CC_X_Pixels"+CellSeparator+"CC_Y_Pixels"+CellSeparator
+"DE_R_X_Pixels"+CellSeparator+"DE_R_Y_Pixels"+CellSeparator
+"LE_R_X_Pixels"+CellSeparator+"LE_R_Y_Pixels"+CellSeparator
+"VE_R_X_Pixels"+CellSeparator+"VE_R_Y_Pixels"+CellSeparator
+"VE_L_X_Pixels"+CellSeparator+"VE_L_Y_Pixels"+CellSeparator
+"LE_L_X_Pixels"+CellSeparator+"LE_L_Y_Pixels"+CellSeparator
+"DE_L_X_Pixels"+CellSeparator+"DE_L_Y_Pixels"+CellSeparator
+"Total_Width_Pixels"+CellSeparator+"Total_Height_Pixels"+CellSeparator
+"Resolution_Pixels_per_Unit"+CellSeparator+"Resolution_Unit"+LineSeparator);
File.close(TXTFile);
//////////////////////////// End of Create an output TXT File




var NbOfPoints;

// Start of the loop going through the list of files in the input folder selected above
for (FileI = 0; FileI < InputFileList.length; FileI++){
  setBatchMode(true);
  InputFileNameI=InputFileList[FileI];
  BasenameArray=split(InputFileNameI,".");
  InputFileNameINoExt=BasenameArray[0];
  InputFilePathI = InputDirPath+InputFileNameI;
  open(InputFilePathI);

  // Save the Scale
  getPixelSize(PixelUnit, PixelWidth, PixelHeight, PixelDepth);
  ImageScale=1/PixelWidth;
  // Remove the scale to have coordinates in pixels
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");
  getDimensions(ImageWidth, ImageHeight, ImageChannels, ImageSlices, ImageFrames);
  NbOfPoints=0;
  // Make sure at least 7 points are selected
  while(NbOfPoints<7){
    do {
      SelectionPrompt("multipoint","A total of 7 points must be present in the following order:"
      +"\n1: Central Canal"
      +"\n2: Dorsal Spinal Edge (Right hemicord)"
      +"\n3: Lateral Spinal Edge (Right hemicord)"
      +"\n4: Ventral Spinal Edge (Right hemicord)"
      +"\n5: Ventral Spinal Edge (Left hemicord)"
      +"\n6: Lateral Spinal Edge (Left hemicord)"
      +"\n7: Dorsal Spinal Edge (Left hemicord)");
    } while(SelectionPromptPass!=1)
    SelectionTypeName="multipoint";
    run("Clear Results");
    run("Measure");
    NbOfPoints=nResults();
    if(NbOfPoints<7){
      MessageError="At least 7 points should be defined.";
      MessageFix=MacroName+" function requires at least 7 points.";
      ErrorResponseArray=newArray("Adjust the Current "+SelectionTypeName+" Selection", "Create a New "+SelectionTypeName+" Selection","Cancel and Close");
      MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because 7 points were not provided.";
      setBatchMode("show");
      setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
      run("Hide Overlay");
      // Close results windows if it is open
      if(isOpen("Results")){
        run("Clear Results");
        selectWindow("Results");      run("Close");

      }//end of if Results is open
      ErrorDialog(MessageError,MessageFix, ErrorResponseArray);
      if(UserResponseErrorDialog==ErrorResponseArray[0]){
        SelectionPromptPass=0;
      }else if (UserResponseErrorDialog==ErrorResponseArray[1]){
        run("Select None");
        SelectionPromptPass=0;
      } else if (UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
        CleanExit(MessageQuit);
      }
    }
  }
  setBatchMode("hide");
  // Create Arrays to save the X and Y Coordinates values in Pixels
  Array_X=newArray(0);
  Array_Y=newArray(0);
  // Populate the Arrays
  for (ResultI=0; ResultI<nResults; ResultI++){
    X=getResult("X",ResultI);
    Y=getResult("Y",ResultI); // Y coordinates are inverted
    Y=ImageHeight-Y; // Restore Y coordinates
    Array_X=Append(Array_X,X);
    Array_Y=Append(Array_Y,Y);
  }
  if(isOpen("Results")){
    run("Clear Results");
    selectWindow("Results");    run("Close");

  } //end of if Results is open

  // Resize Canvas to ensure no data loss
  // Get the Dimension of the Initial Image
  ImageCenterX_Ini=(ImageWidth/2);
  ImageCenterY_Ini=(ImageHeight/2);
  // Get the position of the futur center of the Image (Central canal)
  CC_PosX_Ini=Array_X[0];
  CC_PosY_Ini=Array_Y[0];

  // Calculate the Translation Vectors to center the CC into the Image
  Translate_X = (ImageCenterX_Ini - CC_PosX_Ini);
  Translate_Y = (ImageCenterY_Ini - (CC_PosY_Ini));
  // Resize the Canvas so no loss of data
  ImageWidth_Resized=ImageWidth+2*abs(Translate_X); // Double the Translation data because the resizing is both way but translation only one way
  ImageHeight_Resized=ImageHeight+2*abs(Translate_Y);
  // Scale the Canvas just to avoid data loss
  run("Canvas Size...", "width=&ImageWidth_Resized height=&ImageHeight_Resized position=Center zero");// Resize the Image
  // Center on Central canal into Image Center
  run("Translate...", "x=&Translate_X y=&Translate_Y interpolation=None"); // Translate now it is safe
  // Calculate rotation angle which is the slope between the two ventral points
  RotationAngle_Radian=atan2((Array_Y[3]-Array_Y[4]),(Array_X[3]-Array_X[4]));
  RotationAngle_Degrees=((-RotationAngle_Radian)*180/PI); //negative because non inverted Y coordinates
  // Rotate the Image
  run("Rotate... ", "angle=&RotationAngle_Degrees grid=1 interpolation=None fill enlarge");// Rotation is clockwise if angle is >0 Angle is in degree
  // Refresh the Image dimension after rotation
  // Rotation Resize the image
  getDimensions(ImageWidth_Rotated, ImageHeight_Rotated, ImageChannels_Rotated, ImageSlices_Rotated, ImageFrames_Rotated);
  // Calculate the resizing due to the rotation
  Rotational_Translational_Width=(ImageWidth_Rotated-ImageWidth_Resized)/2;
  Rotational_Translational_Height=(ImageHeight_Rotated-ImageHeight_Resized)/2;
  // Refresh  the Image Dimension
  ImageRotated_Center_X=ImageWidth_Rotated/2;
  ImageRotated_Center_Y=ImageHeight_Rotated/2;

  // Calculate new Coordinates
  Array_X_Transformed=newArray(0);
  Array_Y_Transformed=newArray(0);

  for(PointI=0; PointI<Array_X.length; PointI++){
    // Get coordinates in X and Y
    Coordinates_X_Ini=(Array_X[PointI]);
    Coordinates_Y_Ini=(Array_Y[PointI]);

    // Calculate coordinates in new Image after transalation
    Coordinates_X_Translated=Coordinates_X_Ini+abs(Translate_X)+Translate_X+Rotational_Translational_Width;
    Coordinates_Y_Translated=Coordinates_Y_Ini+abs(Translate_Y)+Translate_Y+Rotational_Translational_Height;

    // Center coordinates on Rotation Center
    Coordinates_X_Centered=Coordinates_X_Translated - ImageRotated_Center_X;
    Coordinates_Y_Centered=Coordinates_Y_Translated - ImageRotated_Center_Y;

    // Convert to polar Coordinates
    VectorLength=sqrt(Coordinates_X_Centered*Coordinates_X_Centered+Coordinates_Y_Centered*Coordinates_Y_Centered);
    if(Coordinates_X_Centered==0){
      VectorAngleRad=0;
    } else{
      VectorAngleRad=atan(Coordinates_Y_Centered/Coordinates_X_Centered);
    }
    // Rotate the Vector
    VectorAngleRad_Transformed=VectorAngleRad-RotationAngle_Radian;
    // Convert Back to Cartesian Coordinates
    Coordinates_X_Transformed=VectorLength*cos(VectorAngleRad_Transformed);
    Coordinates_Y_Transformed=VectorLength*sin(VectorAngleRad_Transformed);

    if(Coordinates_X_Centered<0 ){
      Coordinates_X_Transformed= -Coordinates_X_Transformed;
      Coordinates_Y_Transformed= -Coordinates_Y_Transformed;
    }

    Coordinates_X_Transformed_Centered= (Coordinates_X_Transformed + ImageRotated_Center_X);
    Coordinates_Y_Transformed_Centered= (Coordinates_Y_Transformed + ImageRotated_Center_Y);
    Array_X_Transformed=Append(Array_X_Transformed,Coordinates_X_Transformed_Centered);
    Array_Y_Transformed=Append(Array_Y_Transformed,Coordinates_Y_Transformed_Centered);
  }// end of for point I

  // Add selection to overlay and save the File
  selectWindow(InputFileNameI);
  run("Remove Overlay"); // Reset the overlay
  // Add new Coordinates to overlay
  makeSelection("point",Array_X_Transformed, Array_Y_Transformed);
  run("Add Selection..."); // Add the selection to the overlay

  // Crop the Image around the center to include the furthest registration point
  ImageWidth=getWidth();
  ImageHeight=getHeight();
  ImageCenterX=ImageWidth/2;
  ImageCenterY=ImageHeight/2;

  DistanceToCenterArray=newArray(0);

  for(PointI=0; PointI<Array_X_Transformed.length; PointI++){
    PosXPointI=Array_X_Transformed[PointI]-ImageCenterX;
    PosYPointI=Array_Y_Transformed[PointI]-ImageCenterY;
    DistanceToCenterArray=Append(DistanceToCenterArray, abs(PosXPointI));
    DistanceToCenterArray=Append(DistanceToCenterArray, abs(PosYPointI));
  }
  Array.getStatistics(DistanceToCenterArray, MinDistance, MaxDistance, MeanDistance, StDevDistance);
  FinalImageSize=2*(MaxDistance+MaxDistance*0.01); // Add 1% to the Max Distance
  run("Canvas Size...", "width=&FinalImageSize height=&FinalImageSize position=Center zero");

  Overlay.activateSelection(0); // Get the selection from the overlay
  run("Clear Results");
  // Invert Y Coordinates
  run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack display invert redirect=None decimal=9");
  run("Measure");
  if(nResults>6){
    // Create Arrays to save the X and Y Coordinates values in Pixels
    Array_FinalX=newArray(0);
    Array_FinalY=newArray(0);
    // Populate the Arrays
    for (ResultI=0; ResultI<nResults; ResultI++){
      X=getResult("X",ResultI);
      Y=getResult("Y",ResultI); // Y coordinates are inverted
      Array_FinalX=Append(Array_FinalX,X);
      Array_FinalY=Append(Array_FinalY,Y);
    }
  } else {
    MessageError="Sorry but at least 7 Registration Points should be provided.";
    MessageFix=MacroName+" function requires at least 7 Registration Points.";
    MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because 7 Registration Points were not provided.";
    ErrorResponseArray=newArray("Cancel and Close");
    ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
    if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
      CleanExit(MessageQuit);
    }
  }

  selectWindow(InputFileNameI);
  // Add the scale back
  run("Set Scale...", "distance=&ImageScale known=1 pixel=1 unit=&PixelUnit");
  run("Select None");
  saveAs("Tif", OutputDirPath+InputFileNameI);
  // Refresh the Image Width and Height
  ImageWidth=getWidth();
  ImageHeight=getHeight();
  close();
  // Invert Y coordinates here
  File.append(InputFileNameINoExt+CellSeparator
  +Array_FinalX[0]+CellSeparator+Array_FinalY[0]+CellSeparator
  +Array_FinalX[1]+CellSeparator+Array_FinalY[1]+CellSeparator
  +Array_FinalX[2]+CellSeparator+Array_FinalY[2]+CellSeparator
  +Array_FinalX[3]+CellSeparator+Array_FinalY[3]+CellSeparator
  +Array_FinalX[4]+CellSeparator+Array_FinalY[4]+CellSeparator
  +Array_FinalX[5]+CellSeparator+Array_FinalY[5]+CellSeparator
  +Array_FinalX[6]+CellSeparator+Array_FinalY[6]+CellSeparator
  +ImageWidth+CellSeparator+ImageHeight+CellSeparator
  +ImageScale+CellSeparator+PixelUnit, TXTFilePath);

  // Update the progress bar
  showProgress(FileI, InputFileList.length);
  // Close results windows if it is open
  if(isOpen("Results")){
    run("Clear Results");
    selectWindow("Results");    run("Close");

  }//end of if Results is open
}/////////////////////End of for Filei loop

CloseAndCleanUp(PluginName, FileI, NbFile, FileExt, InputDirName, OutputDirName);
