// Defines Global Variables
var PluginName="Spinalcord Mapper";
var MacroName="Auto Cell Detection";
var FileExt="TIF";
var MinNbFile=1;
var FolderSuffix="Auto-Cell-Detection";
var SubDirArray=newArray("Images","ROIs","Results");
CellSeparator= "\t";
LineSeparator="\n";
 
/////////////// Header, Set Preferences and Options and Housekeeping
// Select All measurements, Invert Y, and use 9 decimals
run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack display invert redirect=None decimal=9");
run("Line Width...", "line=1"); // Set Line width as 1
run("Input/Output...", "jpeg=100 gif=-1 file=.txt copy_row save_column"); // Set Output as txt and save columns and ignore row numbers
run("Point Tool...", "type=Hybrid color=White size=Large label show counter=0");// Set the Point tool as yellow Medium Circle
run("Colors...", "foreground=white background=black selection=White"); // Set foreground and background colors Selection is yellow
run("Appearance...", "  menu=0 16-bit=Automatic"); // Change appareance of 16bit image as automatic
run("Misc...", "divide=Infinity"); // Make sure Miscellaneous Options are set correctly
run("Overlay Options...", "stroke=White width=2 point=Hybrid size=Large fill=none apply show");
run("Labels...", "color=Orange font=10 show bold");
call("ij.Prefs.set", "tw.font.size",2);

// Set IJ Size and position
IJPosX=screenWidth*0.1; // The position of ImageJ in X
IJPosY=screenHeight*0; // The position of ImageJ in Y at the top of the screen
IJSizeX=575; // The width of ImageJ toolbar in pixel
IJSizeY=100; // The Height of ImageJ toolbar in pixel
Spacer=20; // A spacer
DummyVariable=eval("script","IJ.getInstance().setLocation("+IJPosX+","+IJPosY+");"); // Adjust the position of the ImageJ toolbar

// Set Toolbar Size and position
ToolbarSizeX=300; // Size of the toolbar
ToolbarSizeY=180; // Size of the toolbar
ToolbarPosX=IJPosX+IJSizeX+Spacer; // Position of the Toolbar is to the right of the ImageJ toolbar
ToolbarPosY=IJPosY; // Position of to the Toolbar in Y
// Check if the toolbar is present
ListWindows=getList("window.titles");
ToolbarPresent=0;
for(n=0; n<ListWindows.length; n++){
WindowN=ListWindows[n];
if(WindowN==PluginName+" Toolbar"){
// If toolbar is present place it next to the IJ toolbar
selectWindow(PluginName+" Toolbar");
setLocation(ToolbarPosX,ToolbarPosY);
ToolbarPresent=1;
}
}
// If Toolbar is not present prompt to display it
if(ToolbarPresent==0){
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage("The "+PluginName+" Toolbar is currently inactive.");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage("Do you want to start the "+PluginName+" Toolbar?");
Dialog.setInsets(0, 0, 0);
YesNoArray=newArray("No", "Yes");
Dialog.setInsets(0, 100, 0);
Dialog.addRadioButtonGroup("", YesNoArray, 2, 1, "Yes");
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
Dialog.show();
UserChoice=Dialog.getRadioButton();
if (UserChoice=="Yes"){
run(PluginName+" Toolbar");
selectWindow(PluginName+" Toolbar");
setLocation(ToolbarPosX,ToolbarPosY);
ToolbarPresent=1;
}
}

// Set Threshold Window Size and Position
ThresholdSizeX=290;
ThresholdSizeY=260;
ThresholdPosX=ToolbarPosX; // The Position in X of the threshold window
ThresholdPosY=ToolbarPosY+ToolbarSizeY+Spacer; // Threshold toolbar is just below the plugin toolbar
call("ij.Prefs.set", "threshold.loc", ThresholdPosX+" , "+ThresholdPosY);

// Set ROI Manager Size and Position
ROIManagerSizeX=290;
ROIManagerSizeY=260;
ROIManagerPosX=ToolbarPosX; // The Position in X of the ROI manager window which is to the right of the Treshold widnow
ROIManagerPosY=ThresholdPosY+ThresholdSizeY+Spacer;
call("ij.Prefs.set", "manager.loc", ROIManagerPosX+" , "+ROIManagerPosY);

// Set Results Size and Position to the right of the toolbar until the bottom of Threhsold window
ResultsSizeX=(screenWidth-(ToolbarPosX+ToolbarSizeX+Spacer));
ResultsSizeY=ROIManagerPosY;
ResultsPosX=ToolbarPosX+ToolbarSizeX+Spacer; // The Position in X of the ROI manager window
ResultsPosY=ToolbarPosY;
call("ij.Prefs.set", "results.loc", ResultsPosX+" , "+ResultsPosY);
call("ij.Prefs.set", "results.width", ResultsSizeX);
call("ij.Prefs.set", "results.height", ResultsSizeY);
//////////////// Header and Housekeeping





//////////////// General Functions
// Function to Append to an array
function Append(ArrayI, Value) {
ArrayJ = newArray(ArrayI.length+1);
for (ValueI=0; ValueI<ArrayI.length; ValueI++)
ArrayJ[ValueI] = ArrayI[ValueI];
ArrayJ[ArrayI.length] = Value;
return ArrayJ;
}

// Function to display a message
var MessageDialogPass;
function MessageDialog(Message){
MessageDialogPass=0;
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage(Message);
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
Dialog.show();
MessageDialogPass=1;
}

// Function to display an error and propose to Fix it / Try again or to quit
var ErrorDialogPass;
function ErrorDialog(MessageError, MessageFix, MessageQuit){
ErrorDialogPass=0;
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage(MessageError);
Dialog.setInsets(0, 0, 0);
Dialog.addMessage(MessageFix);
Dialog.setInsets(0, 0, 0);
TryAgainCancelCloseArray=newArray("Try Again", "Cancel & Close");
Dialog.setInsets(0, 100, 0);
Dialog.addRadioButtonGroup("", TryAgainCancelCloseArray, 2, 1, "Try Again");
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
Dialog.show();
UserChoice=Dialog.getRadioButton();
if (UserChoice=="Cancel & Close"){
exit(MessageQuit);
}
ErrorDialogPass=1;
}


// Function to select an Input Directory containing at least MinNbFile with the correct File Extension FileExt
var SelectInputDirPass; // switch to the dialog
var InputDirPath; // Path of the input directory
var ParentDir; // ParentDirectory of the selected input directory
var InputDirName; // Name of the Input Directory
var NbFile; // Nb of File with the correct extension in the input directory
var InputList; // List of Files and folders in the input directory (all files no matter the extension)
var InputFileList; // List of files with the correct extension

function SelectInputDir(MinNbFile, FileExt){
// MinNbFile This is the minimum Nb of File to be present in the list to be accepted
// FileExt This is the File extension as a string example "tif"
// NbFile This is the number of File within the InputList
// InputList is ALL the File within the input Directory
// InputFileList is the list of File with the correct File extension

InputDirPath=getDirectory("Select a FOLDER containing at least "+MinNbFile+" "+FileExt+" Files to process.");
InputList=getFileList(InputDirPath);
InputList=Array.sort(InputList); // Sort the List of Item
ParentDir=File.getParent(InputDirPath)+File.separator;
InputDirName=File.getName(InputDirPath);

SelectInputDirPass=0; // Switch to the Function
NbFile=0; // Count of Nb of Files
BaseNameError=0; // Make sure there is only one "." in the filename

// Evaluate the Nb of File
for (ItemI=0; ItemI<InputList.length; ItemI++){
if(endsWith(toLowerCase(InputList[ItemI]), "."+toLowerCase(FileExt))){ // Select files with correct extension
BasenameArray=split(InputList[ItemI],"."); // Make an array from the filename
if(BasenameArray.length!=2){// if there is more than one . in the file name abort
BaseNameError=1;
MessageError="Sorry but the "+FileExt+" File:\n\""+InputList[ItemI]+"\"\ncontains more than one \".\" in its filename.";
MessageFix=MacroName+" function does NOT allow filenames with more than one unique \".\" used for the file extension.";
MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because the File \""+InputList[ItemI]+"\"\ncontains more than one \".\"\nMake sure filenames have no more than one unique \".\" for the File extension.";
} else {
NbFile++; // Increment the nb of files with the correct extension
}
} // If ends by Extension increment
}

// This is the Value switch if the InputDir is passing the Min Nb of File criteria
if (NbFile<MinNbFile){
MessageError="Sorry but the Folder:\n\"" +InputDirName+"\"\ndoes not contain at least "+MinNbFile+" "+FileExt+" File.";
MessageFix=MacroName+" requires a Folder that contains at least "+MinNbFile+" "+FileExt+" File.";
MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because the Folder:\n\"" +InputDirName+"\"\ndid not contain at least "+MinNbFile+" "+FileExt+" File.";
}
if(NbFile<MinNbFile || BaseNameError==1){ // If filenames have more than 1 "." or if there is not enough file with the correct extension display an error
ErrorDialog(MessageError, MessageFix, MessageQuit);
}else{ // Else if there is no error
SelectInputDirPass=1; // Pass the criteria
InputFileList=newArray(0); // Create a new array with the files having the correct extension
for(ItemI=0; ItemI<InputList.length;ItemI++){
BasenameArray=split(InputList[ItemI],"."); // Split the filename and the extension
if(endsWith(toLowerCase(InputList[ItemI]), "."+toLowerCase(FileExt))){ // If the extension is correct
FileName=BasenameArray[0]+"."+BasenameArray[1]; // Recreate the filename with the extension
InputFileList=Append(InputFileList,FileName); // Append it to the InputFileList
}// end of IF endswith
}// end for each File
} // end of else
} // End of Function Select InputDir

// Function to create a new output directory
var OutputDirPath; // The path of the output directory
var OutputDirName; // The name of the output directory

function CreateOutputDir(FolderSuffix){ // Folder suffix is a string appended to the input Directory
OutputDirPath=ParentDir+InputDirName+"_"+FolderSuffix+File.separator; // Create the outputdirpath
n=1;
while(File.exists(OutputDirPath)!=0){ // If the path already exist, increment with _ n until it does not exist
n++;
OutputDirPath=ParentDir+InputDirName+"_"+FolderSuffix+"_"+n+File.separator;
} // End of making sure the outpudirectory is a new folder
File.makeDirectory(OutputDirPath); // Create the outpudirectory
OutputDirName=File.getName(OutputDirPath); // Get the Name of the output directory
}

// Function to create subfolders within the newly create outputdirectory
function CreateOutputSubDir(SubDirArray) { // SubDirArray is an array of the desired subfolders
for(i=0;i<SubDirArray.length;i++){
SubDirPath=OutputDirPath+SubDirArray[i]+File.separator; // Because outpudirpath is unique and new the subfolders do not exist yet so no need to check if they are already present
File.makeDirectory(SubDirPath);
} // End of for
} // End of CreateOutputSubDir function
// NOTE:It is useful to create a string for the subdirectory paths
// For each element in the subdirarray addMessage
// Output[SubDirArrayElementN]Path=""+OutputDirPath+"[SubDirArrayElementN]"+File.separator;
// Then you can use directly the string to save within a subdirectory

// This function Prompt for a specific type of selection and ensure a selection is made before moving next
var SelectionPromptPass; // This is the switch when the selection pass the criteria

function SelectionPrompt(SelectionName, SelectionInfo){
// Selection name is the name of the selection. It is a string that can take the following values:
// rectangle, oval, polygon, freehand, traced, straight line, segmented line, freehandline, angle, point, multipoint
SelectionPromptPass=0;
// Define what the SelectionType value for each selection
if(SelectionName=="rectangle"){
SelectionValue=0;
} else if (SelectionName=="oval"){
SelectionValue=1;
} else if (SelectionName=="polygon"){
SelectionValue=2;
} else if (SelectionName=="freehand"){
SelectionValue=3;
} else if (SelectionName=="traced"){
SelectionValue=4;
} else if (SelectionName=="straight line"){
SelectionValue=5;
} else if (SelectionName=="segmented line"){
SelectionValue=6;
} else if (SelectionName=="freehand line"){
SelectionValue=7;
} else if (SelectionName=="angle"){
SelectionValue=8;
} else if (SelectionName=="point"){
SelectionValue=10;
} else if (SelectionName=="multipoint"){
SelectionValue=10;
} else {
SelectionValue=-1; // No selection
}

CurrentImageName=getTitle();
CurrentSelection=selectionType(); // Get the Current selection

// If the currentselection does not match the expected selection but if there is something in the overlay
if(CurrentSelection!=SelectionValue && Overlay.size==1 ){
run("Show Overlay");
Overlay.activateSelection(0); // Get the selection from the overlay
CurrentSelection=selectionType(); // refresh Current selection
}

if (CurrentSelection==SelectionValue){ // If a correct Selection is present ask what to do
setBatchMode("show");
selectWindow(CurrentImageName);
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage("Would you like to adjust the current "+SelectionName+" selection?");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage(SelectionInfo);
UserChoiceArray=newArray("Keep the current "+SelectionName+" selection", "Let me adjust it", "Discard it");
Dialog.setInsets(0, 50, 0);
Dialog.addRadioButtonGroup("", UserChoiceArray, 3,1, "Keep the current "+SelectionName+" selection");
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
Dialog.show();
UserChoice=Dialog.getRadioButton();
if(UserChoice=="Keep the current "+SelectionName+" selection"){
setBatchMode("show");
SelectionPromptPass=1;
} else if (UserChoice=="Discard it"){ // else User wants to adjust the selection
run("Remove Overlay");
run("Select None");
SelectionPromptPass=0; // Set the Switch to 0
} else {
SelectionPromptPass=0; // Set the Switch to 0
}
} else{
SelectionPromptPass=0;
run("Select None");
}

if (SelectionPromptPass==0){ // If the selection is not set prompt
setBatchMode("show");
selectWindow(CurrentImageName);
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
run("Hide Overlay");
setTool(SelectionName);
if(SelectionName=="multipoint"){
setTool("multipoint");
run("Point Tool...", "type=Hybrid color=White size=Large label show counter=0"); // Set the Point tool as yellow Medium Circle
//doCommand("Point Tool..."); // Bring the non-modal Point Tool at front in a separate thread
}
waitForUser(PluginName+" Information", "Draw a "+SelectionName+" selection.\n"
+SelectionInfo+
"\nWhen done, press OK.");
CurrentSelection=selectionType();
if(CurrentSelection<0 || CurrentSelection!=SelectionValue){
if(CurrentSelection<0){
MessageError="Sorry but no "+SelectionName+" selection was detected.";
MessageFix=MacroName+" function requires a "+SelectionName+" selection.";
MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because no "+SelectionName+" was detected.";
} else if(CurrentSelection!=SelectionValue){
MessageError="Sorry but the Selection is not a "+SelectionName+".";
MessageFix=MacroName+" function requires a "+SelectionName+" selection.";
MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because the provided selection was not a "+SelectionName+".";
}
ErrorDialog(MessageError,MessageFix,MessageQuit);
run("Select None");
} else {
SelectionPromptPass=1;
setBatchMode("hide");

}
}
}
////////////////////End of General Functions






















/////////////////////// Get or Set previous default values saved in the preferences file
ProcessingMethodOptionsString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ProcessingMethodOptions", "Global,Individual"); // Status of ROI detection methods. First one is Sample detection. Second one is manual selection of ROI. 1=selected; 0=ignored.
ProcessingMethod=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ProcessingMethod", "Global");// This is a coefficient used to compute the minimum and maximum particle diameter for each channel

ROIMethodOptionsString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ROIMethodOptions", "Detect Sample,Manually Select ROI"); // Status of ROI detection methods. First one is Sample detection. Second one is manual selection of ROI. 1=selected; 0=ignored.
ROIMethodStatusString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ROIMethodStatus", "0,0"); // Status of ROI detection methods. First one is Sample detection. Second one is manual selection of ROI. 1=selected; 0=ignored.
ImageEnhancementOptionsString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ImageEnhancementOptions", "Remove Noise,Use Watershed"); // Status of ROI detection methods. First one is Sample detection. Second one is manual selection of ROI. 1=selected; 0=ignored.

LowerSampleThreshold=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".LowerSampleThreshold", "0"); // Sample Threshold Values. First one is Lower Threshold, Second one is UpperThrehsold
UpperSampleThreshold=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".UpperSampleThreshold", "0");

ListChSelectionStatusString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ListChSelectionStatus", "1,1,1,1,1,1,1"); // List of status for 5 channels. 1=selected; 0=ignored.
ListChNamesString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ListChNames", "Ch1,Ch2,Ch3,Ch4,Ch5,Ch6,Ch7"); // List of name of 5 channels.
ListChMinParticleDiameterString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ListChMinParticleDiameter", "0,0,0,0,0,0,0"); // List of particle diameter for the 5 channels.
ListChMaxParticleDiameterString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ListChMaxParticleDiameter", "100,100,100,100,100,100,100"); // List of particle diameter for the 5 channels.
ListChMinParticleCircularityString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ListChMinParticleCircularity", "0,0,0,0,0,0,0"); // List of particle diameter for the 5 channels.
ListChMaxParticleCircularityString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ListChMaxParticleCircularity", "100,100,100,100,100,100,100"); // List of particle diameter for the 5 channels.

ListChLowerThresholdString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ListChLowerThreshold", "0,0,0,0,0,0,0"); // List of lower threshold for the 5 channels.
ListChUpperThresholdString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ListChUpperThreshold", "255,255,255,255,255,255,255"); // List of upper threshold for the 5 channels.
ListChRemoveNoiseStatusString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ListChRemoveNoiseStatus", "0,0,0,0,0,0,0");// Status of Remove Noise for each channel 1=selected; 0=ignored.
ListChWatershedStatusString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ListChWatershedStatus", "0,0,0,0,0,0,0");// Status of Watershed for each channelds. 1=selected; 0=ignored.


/////////////////////// Split the String from the preference file into Vectors
ProcessingMethodOptions=split(ProcessingMethodOptionsString,",");
ROIMethodOptions=split(ROIMethodOptionsString,",");
ROIMethodStatus=split(ROIMethodStatusString,",");
ImageEnhancementOptions=split(ImageEnhancementOptionsString,",");
ListChSelectionStatus=split(ListChSelectionStatusString,",");
ListChNames=split(ListChNamesString,",");
ListChMinParticleDiameter=split(ListChMinParticleDiameterString,",");
ListChMaxParticleDiameter=split(ListChMinParticleDiameterString,",");
ListChMinParticleCircularity=split(ListChMinParticleCircularityString,",");
ListChMaxParticleCircularity=split(ListChMaxParticleCircularityString,",");
ListChLowerThreshold=split(ListChLowerThresholdString,",");
ListChUpperThreshold=split(ListChUpperThresholdString,",");
ListChRemoveNoiseStatus=split(ListChRemoveNoiseStatusString,",");
ListChWatershedStatus=split(ListChWatershedStatusString,",");


/////////////////////// Initial Dialog Box
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage(MacroName+" will :"
+"\n- Prompt to select a folder containing TIF images to be quantified"
+"\n- Prompt for:"
+"\n   - Channel selection"
+"\n   - Channel names"
+"\n   - Methods to define the Sample and ROI"
+"\n   - Image Enhancement Options"
+"\n   - Min and Max Cell Diameter"
+"\n   - Min and Max Cell Circuilarity Percentage"
+"\n- Open TIF images 1 by 1 from the selected folder"
+"\n- Process them with the defined parameters"
+"\n- Save the results in a new folder");
Dialog.setInsets(5, 0, 0);
Dialog.addMessage("Choose the Processing Method:"
+"\n - Global: Apply same parameters to all images"
+"\n - Individual: Prompt for parameters for each image");
Dialog.setInsets(0, 5, 0);
Dialog.addRadioButtonGroup("Processing Method:", ProcessingMethodOptions, 1, 2, ProcessingMethod);
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
Dialog.show();
/////////////////////// Initial Dialog Box
ProcessingMethod=Dialog.getRadioButton();
call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".ProcessingMethod",ProcessingMethod);




// Defines Global Variables
var InputDirPath;
var ParentDir;
var InputDirName;
var NbFile;
var InputFileList; // This is the List of File with the correct extension
var OutputDirPath;
var OutputDirName;
var InputDirPass;
var FileExt=".tif";
var MinNbFile=1;
var SelectChannelPass;
var ListChSelectionStatus;
var ListChNames;
var ROIMethodStatus;
var NbSelectedCh;

function SelectInputDir(MinNbFile, FileExt){
//  NbFile This is the number of File within the InputList
//  FileExt This is the file extension as a string example ".tif"
//  MinNbFile This is the minimum Nb of File to be present in the list to be accepted
// InputList is ALL the files within the input Directory
// InputFileList is the list of files with the correct file extension

/////////////////////// Select Input Directory
InputDirPath=getDirectory("Select the FOLDER containing at least "+MinNbFile+" "+FileExt+" Files to process.");
InputList=getFileList(InputDirPath);
ParentDir=File.getParent(InputDirPath)+File.separator;
InputDirName=File.getName(InputDirPath);
/////////////////////// Select Input Directory

NbFile=0;
// Evaluate the Nb of File
for (ItemI=0; ItemI<InputList.length; ItemI++){
if(endsWith(InputList[ItemI], FileExt)){
NbFile++;
} // If ends by Extension increment nbTFile
}
InputDirPass=0; // This is the Value switch if the InputDir is passing the criteria
if (NbFile<MinNbFile){
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage("Sorry but "+InputDirName+" does not contain at least "+MinNbFile+" "+FileExt+" Files.");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage(MacroName+" requires a folder that contains at least "+MinNbFile+" "+FileExt+" Files.");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage("Do you want to select another folder?");
UserChoiceArray=newArray("Try Again", "Cancel & Close");
Dialog.setInsets(0, 100, 0);
Dialog.addRadioButtonGroup("", UserChoiceArray, 2, 1, "Try Again");
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
Dialog.show();
UserChoice=Dialog.getRadioButton();
if (UserChoice=="Cancel & Close"){
exit(PluginName+ " Information:\nThe function "+ MacroName+" has stopped because "+InputDirName+ " did not contain at least "+MinNbFile+" TIF Files.");
} /////////////////////// End user choice
} else { // else of if NbFile is at least equal to the min Nb of File
InputDirPass=1;
InputFileList=newArray(NbFile);
n=0;
for(i=0; i<InputList.length;i++){
if (endsWith(InputList[i],FileExt)==1){
InputFileList[n]=InputList[i];
n++;
}// end of IF endswith
}// end for each file
} // end of else
} // End of Function Select InputDir

function CreateOutputDir(FolderSuffix){
OutputDirPath=ParentDir+InputDirName+FolderSuffix+File.separator;
n=1;
while(File.exists(OutputDirPath)!=0){
n++;
OutputDirPath=ParentDir+InputDirName+FolderSuffix+"_"+n+File.separator;
}
File.makeDirectory(OutputDirPath);
OutputDirName=File.getName(OutputDirPath);
}

function CreateOutputSubDir(ListSubDirAsString) {
ListSubDir=split(ListSubDirAsString,",");
for(i=0;i<ListSubDir.length;i++){
SubDirPath=OutputDirPath+ListSubDir[i]+File.separator;
File.makeDirectory(SubDirPath);
} // End of for
} // End of CreateOutputSubDir function

function SelectChannels(){
SelectChannelPass=0;
Dialog.create(PluginName+" Information");
Dialog.setInsets(5, 0, 0);
Dialog.addMessage("Select the Channels you would like to process:");
Dialog.setInsets(5, 20, 0);
ListChNamesCurrentImage=Array.trim(ListChNames, NbChannels);
ListChSelectionStatusCurrentImage=Array.trim(ListChSelectionStatus, NbChannels);
Dialog.addCheckboxGroup(1,NbChannels,ListChNamesCurrentImage,ListChSelectionStatusCurrentImage);
Dialog.addMessage("Channel Names:");
for (ChI=0; ChI < NbChannels; ChI++){
Dialog.setInsets(5, 40, 0);
Dialog.addString("Ch "+ChI+1+":", ListChNames[ChI], 10);
}
Dialog.setInsets(20, 10, 0);
Dialog.addMessage("ROI Methods:");
Dialog.setInsets(5, 10, 0);
Dialog.addCheckboxGroup(1,2,ROIMethodOptions,ROIMethodStatus);
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+Spacer+15);
Dialog.show();

// Get the selection status and channel names
for (ChI=0; ChI < NbChannels; ChI++){
ListChSelectionStatus[ChI]=Dialog.getCheckbox();
ListChNames[ChI]=Dialog.getString();
}// End of geet the selection status and channel names

// Get ROI Method
ROIMethodStatus[0]=Dialog.getCheckbox();
ROIMethodStatus[1]=Dialog.getCheckbox();

// Get the Nb of Selected Channels
NbSelectedCh=0;
for (ChI=0; ChI < NbChannels; ChI++){
NbSelectedCh=NbSelectedCh+ListChSelectionStatus[ChI];
}

// Check the Nb of Select Channel is at least 1
if(NbSelectedCh<1){
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage("At least 1 Channel should be selected.");
Dialog.setInsets(0, 0, 0);
UserChoiceArray=newArray("Try Again", "Cancel & Close");
Dialog.setInsets(0, 50, 0);
Dialog.addRadioButtonGroup("", UserChoiceArray, 2, 1, "Try Again");
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+Spacer+15);
Dialog.show();
UserChoice=Dialog.getRadioButton();
if (UserChoice== "Cancel & Close"){
exit(MacroName+ " Information:\nThe function "+ MacroName+" has stopped because No Channel was selected. "+PluginName+" requires the selection of at least 1 Channel.");
}else { // Reset Ch Status
ListChSelectionStatusString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ListChSelectionStatus", "1,1,1,1,1,1,1"); // List of status for 5 channels. 1=selected; 0=ignored.
ListChSelectionStatus=split(ListChSelectionStatusString,",");
}
} else { // If at least one channel is selected Make sure the names are unambiguous
SelectChannelPass=1;
for (ChIA = 0; ChIA < NbChannels-1; ChIA++){
for (ChIB = ChIA+1; ChIB < NbChannels; ChIB++){
ChNameA=ListChNames[ChIA];
ChNameB=ListChNames[ChIB];
if (ChNameA==ChNameB){
SelectChannelPass=0;
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage("Channels "+ChIA+1+" and "+ChIB+1+" have the same name \""+ChNameA+"\".");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage("Channel Names should be unambiguous.");
UserChoiceArray=newArray("Try Again", "Cancel & Close");
Dialog.setInsets(0, 80, 0);
Dialog.addRadioButtonGroup("", UserChoiceArray, 2, 1, "Try Again");
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+Spacer+15);
Dialog.show();
UserChoice=Dialog.getRadioButton();
if (UserChoice== "Cancel & Close"){
exit(MacroName+ " Information:\nThe function "+ MacroName+" has stopped because Channels "+ChIA+1+" and "+ChIB+1+" have the same name \""+ChNameA+"\".\n"+PluginName+" requires unambiguous Channel Names.");
} else { // if try again then reset the values
ListChNamesString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ListChNames", "Ch1,Ch2,Ch3,Ch4,Ch5,Ch6,Ch7"); // List of name of 5 channels.
ListChNames=split(ListChNamesString,",");
}
}
} // end ChIB
} // end ChIA
} // end of else NbSelectedCh is at least 1 evaluate the names
}// End of Function select Ch
/////////////////////////////////// Functions






// Select InputDir with at least 1 TIF File
do{
SelectInputDir(MinNbFile,FileExt);
}while(InputDirPass!=1)

// Create OutputDirectory with the folder suffix
CreateOutputDir("_Quantified_"+ProcessingMethod);

// Create Output Subdirectory and create general variables for each SubdirectoryOuputdir Path
CreateOutputSubDir("Result Tables,Images,Parameters,Measurements");
var OutputTablePath=""+OutputDirPath+"Result Tables"+File.separator;
var OutputImagePath=""+OutputDirPath+"Images"+File.separator;
var OutputParameterPath=""+OutputDirPath+"Parameters"+File.separator;
var OutputMeasurementPath=""+OutputDirPath+"Measurements"+File.separator;

/////////////////////// Open the Paramaters Files to store parameters data
CellSeparator= ",";
LineSeparator="\n";

///////////////////////////////////////////////// Process each file
///////////////////////////////////////////////// Process each file
for (FileI=0; FileI < InputFileList.length; FileI++){
InputFileNamei=InputFileList[FileI];
InputFileNameiNoExt=replace(InputFileNamei, ".tif", "");
InputFilePathi=InputDirPath+InputFileNamei;
FirstResult="true";

setBatchMode("hide");

call("ij.gui.ImageWindow.setNextLocation", IJPosX,IJPosY+IJSizeY+Spacer)
open(InputFilePathi);
selectWindow(InputFileNamei);
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
run("Remove Overlay"); // Remove any Overlay
run("Select None"); // Remove any selection
roiManager("reset"); // Remove any ROI
getDimensions(ImageWidth, ImageHeight, NbChannels, NbSlices, NbFrames); // Get dimensions of the Image

// Check the Dimension of the File and offer to only Channel Options


if(NbSlices>1 || NbFrames>1){
if(ProcessingMethod=="Global" && FileI>0){
// do Nothing aka do not prompt and recycle the previous values
} else {
// Exit Batchmode
selectWindow(InputFileNamei);
setBatchMode("show");
selectWindow(InputFileNamei);
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
// Prompt what to do
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
if(NbSlices>1 && NbFrames>1){
Dialog.addMessage(InputFileNameiNoExt+" is a Stack and a Video (z-slices and t-frames).");
} else if (NbSlices>1){
Dialog.addMessage(InputFileNameiNoExt+" is a Stack (z-slices).");
} else if (NbFrames>1){
Dialog.addMessage(InputFileNameiNoExt+" is a Video (t-frames).");
}
MultipleDimensionsProcessingOptions=newArray("Process a specific Slice/Frame", "Process the Maximum Intensity Projection", "Cancel & Close");
Dialog.setInsets(0, 5, 0);
Dialog.addRadioButtonGroup("", MultipleDimensionsProcessingOptions, 3, 1, "Process a specific Slice");
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+Spacer);
Dialog.show();
MultipleDimensionsProcessing=Dialog.getRadioButton();
}// end of if process is not global prompt for what to do

// Process the file according to  MultipleDimensionsProcessing Choice
if(MultipleDimensionsProcessing=="Process a specific Slice/Frame"){
if(isOpen("Threshold")){
selectWindow("Threshold");
run("Close");
}
call("ij.gui.ImageWindow.setNextLocation", ThresholdPosX,ThresholdPosY+ThresholdSizeY+Spacer);
if(ProcessingMethod=="Global" && FileI>0){
// Recyclle the Values and do not prompt for which slice
setBatchMode("hide");
} else{ // If process is not global then prompt for which slice
selectWindow(InputFileNamei);
setBatchMode("show");
selectWindow(InputFileNamei);
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
waitForUser(PluginName+" Information", "Move to the Slice/Frame you would like to process."
+"\nWhen done, press OK.");
setBatchMode("hide");
selectWindow(InputFileNamei);
getDimensions(ImageWidth, ImageHeight, NbChannels, NbSlices, NbFrames); // Get dimensions of the Image
Stack.getPosition(CurrentChannel, CurrentSlice, CurrentFrame);
}
// Delete the other Slices
call("ij.gui.ImageWindow.setNextLocation", IJPosX,IJPosY+IJSizeY+Spacer);
SubStackString=""+"channels=1-"+NbChannels+" slices="+CurrentSlice+" frames="+CurrentFrame;
run("Make Substack...", SubStackString);
selectWindow(InputFileNamei);
close();
selectWindow(InputFileNameiNoExt+"-1.tif");
rename(InputFileNamei);
selectWindow(InputFileNamei);
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
} else if(MultipleDimensionsProcessing=="Process the Maximum Intensity Projection"){
setBatchMode("hide");
if(NbSlices>1 && NbFrames>1){
selectWindow(InputFileNamei);
call("ij.gui.ImageWindow.setNextLocation", IJPosX,IJPosY+IJSizeY+Spacer);
run("Grouped Z Project...", "projection=[Max Intensity] all");
selectWindow(InputFileNamei);
close();
selectWindow("MAX_"+InputFileNamei);
rename(InputFileNamei);
}
selectWindow(InputFileNamei);
run("Z Project...", "projection=[Max Intensity]");
selectWindow(InputFileNamei);
close();
selectWindow("MAX_"+InputFileNamei);
rename(InputFileNamei);
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
run("Grays");
} else{
exit(PluginName+ " Information: The function "+ MacroName+" has stopped because "+InputFileNameiNoExt+ " contains images with more than 1 Slice/Frame (Stack and/or Video).");
}



}// End of Check Input File dimensions

// Select the Channels and indicate the Channel Names
do{
if(ProcessingMethod=="Global" && FileI>0){
SelectChannelPass=1;
setBatchMode("hide");
} else {
selectWindow(InputFileNamei);
setBatchMode("show");
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
SelectChannels();
}
} while(SelectChannelPass!=1)

// Save the ListChNames, ListChStatus, ROI Methods in preferences and Create List of SelectCh and Dropped Channels
if(ProcessingMethod=="Global" && FileI>0){
setBatchMode("hide");
} else {
setBatchMode("hide");
//////////////////////////////// Recreate the Strings to be saved in the Preferences
ROIMethodStatusString=""+ROIMethodStatus[0]+","+ROIMethodStatus[1];
for(i=0;i<ListChSelectionStatus.length;i++){
if(i==0){
ListChSelectionStatusString=""+ListChSelectionStatus[i];
ListChNamesString=""+ListChNames[i];
}else{
ListChSelectionStatusString=ListChSelectionStatusString+","+ListChSelectionStatus[i];
ListChNamesString=ListChNamesString+","+ListChNames[i];
}
}
//////////////////////////////// Save the parameters in the Preferences
call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".ROIMethodStatus",ROIMethodStatusString);
call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".ListChSelectionStatus",ListChSelectionStatusString);
call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".ListChNames",ListChNamesString);
//////////////////////////////// Create a new array with only the selected Ch
NbDroppedCh=NbChannels-NbSelectedCh;
ListSelectedCh=newArray(NbSelectedCh); // This is the List of Channels that are selected
if(NbDroppedCh!=0){
ListDroppedCh=newArray(NbDroppedCh);
}
// Populate the two arrays
SelectedChI=0;
DroppedChI=0;
for(ChI=0; ChI < NbChannels; ChI++){
if(ListChSelectionStatus[ChI]==1){
ListSelectedCh[SelectedChI]=ChI+1; //We add 1 for making a list of Ch number from 1 to 5 and not 0 to 4
SelectedChI++;
} else {
ListDroppedCh[DroppedChI]=ChI+1;
DroppedChI++;
}
}// End of For ChI populate the ListofSelect Ch or DroppedCH
}// End of Else Process is individual


setBatchMode("hide");
// Duplicate the Opened Image and save it as an Original it will be used at the end to get the Measurements
selectWindow(InputFileNamei); //  This is the image we are using as a source for other things it will be rescaled to have a nice um unit
call("ij.gui.ImageWindow.setNextLocation", IJPosX,IJPosY+IJSizeY+Spacer)
run("Duplicate...", "title=Original duplicate");// This is exactly the original picture
selectWindow("Original");
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);



// Get the Initial Scale of the Image and Adjust it to get some understand values
setBatchMode("hide");
selectWindow(InputFileNamei);
getPixelSize(Unit, PixelWidth, PixelHeight, PixelDepth);

run("Text Window...", "name=ParameterData width=50 height=6 menu");
setLocation(ToolbarPosX+ToolbarSizeX+Spacer, ToolbarPosY);
// Write the Header for the parameterdata
print("[ParameterData]", "Filename"+CellSeparator+"ROI"+CellSeparator+"Parameter"+CellSeparator+"Value"+LineSeparator);
print("[ParameterData]", "All Files"+CellSeparator+"All ROIs"+CellSeparator+"Processing Method"+CellSeparator+ProcessingMethod+LineSeparator);



// Write the Initial Scale in the Parameter file
if(Unit=="pixels"){ // if the scale is not defined
print("[ParameterData]",InputFileNameiNoExt+CellSeparator+"Whole Image"+CellSeparator+"Scale"+CellSeparator+"Not Defined"+LineSeparator);
RescaledUnit="pixels";
} else { // if the scale is defined make sure it is
InitialScale=1/PixelWidth;
print("[ParameterData]",InputFileNameiNoExt+CellSeparator+"Whole Image"+CellSeparator+"Resolution (pixels per "+Unit+")"+CellSeparator+InitialScale+LineSeparator);

// Format the Initial Scale to make sure the known distance is 1
selectWindow(InputFileNamei);
run("Set Scale...", "distance in pixels=&InitialScale known=1 pixel=1");

// Change the Unit until New Scale is <1 (While>1)
if (InitialScale>1){ // Then rescale the image
ScalingFactor=0;
NewScale=InitialScale;
while(NewScale>1){
NewScale=NewScale/10;
ScalingFactor++;
}// end of while

// Calculate the new Unit
NewUnit="10^-"+ScalingFactor+" "+Unit;
// Calculate the New Known distance
NewKnownDistance=pow(10,ScalingFactor);

// Rescale the Image
selectWindow(InputFileNamei);
run("Set Scale...", "known=&NewKnownDistance unit=&NewUnit");
selectWindow(InputFileNamei);
// Get the Rescaled dimensions
getPixelSize(RescaledUnit, RescaledPixelWidth, RescaledPixelHeight, RescaledPixelDepth);
FinalScale=1/RescaledPixelWidth;
print("[ParameterData]",InputFileNameiNoExt+CellSeparator+"Whole Image"+CellSeparator+"Rescaled Resolution (pixel per "+RescaledUnit+")"+CellSeparator+FinalScale+LineSeparator);
} // end of rescale the image
}// End of if scale is defined initially

// Get the dimension of the image in pixel and the area
selectWindow(InputFileNamei);
ImageTotalWidth=getWidth();
ImageTotalHeight=getHeight();
ImageTotalArea=ImageTotalWidth*ImageTotalHeight;
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+"Whole Image"+CellSeparator+"Image Total Width (pixel)"+CellSeparator+ImageTotalWidth+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+"Whole Image"+CellSeparator+"Image Total Height (pixel)"+CellSeparator+ImageTotalHeight+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+"Whole Image"+CellSeparator+"Image Total Area (pixel^2)"+CellSeparator+ImageTotalArea+LineSeparator);


// Duplicate InputFIleNamei and Remove the Unused Channels and call it SelectedChannels
setBatchMode("hide");
selectWindow(InputFileNamei);
call("ij.gui.ImageWindow.setNextLocation", IJPosX,IJPosY+IJSizeY+Spacer)
run("Duplicate...", "title=SelectedChannels duplicate");// This is the sample
selectWindow("SelectedChannels");
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
if(NbChannels>1 && NbSelectedCh<NbChannels ){
selectWindow("SelectedChannels");
for (DroppedChI=ListDroppedCh.length-1; DroppedChI>=0; DroppedChI--){
DroppedChIListPos=(ListDroppedCh[DroppedChI]);
setSlice(DroppedChIListPos);
run("Delete Slice", "delete=channel");
}
}
if(NbSelectedCh==1){
// Work to identify the sample
selectWindow("SelectedChannels");
run("Grays");
}


// Work to identify the sample
if(ROIMethodStatus[0]==1){
setBatchMode("hide");
selectWindow("SelectedChannels");
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
call("ij.gui.ImageWindow.setNextLocation", IJPosX,IJPosY+IJSizeY+Spacer)
run("Duplicate...", "title=Sample duplicate");// This is the sample
selectWindow("Sample");
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
// Flatten The Sample Image if more than 1 Channel
if(NbSelectedCh>1){
call("ij.gui.ImageWindow.setNextLocation", IJPosX,IJPosY+IJSizeY+Spacer)
run("Z Project...", "title=MIP projection=[Max Intensity]");
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
selectWindow("Sample");
close();
selectWindow("MAX_Sample");
rename("Sample");
run("Grays");
// This is the Maximum Intensity projection of the image used to detect the sample contour
} else{ // If only 1 Channels then convert to gray
run("Grays");
}
// From here we have a gray Sample 1 Ch

if(ProcessingMethod=="Global" && FileI>0){ // If process is Global
setBatchMode("hide");
selectWindow("Sample");
setThreshold(LowerSampleThreshold, UpperSampleThreshold);
run("Convert to Mask");
}else{

selectWindow("Sample");// We convert the Sample to binary for a mask
setBatchMode("show");
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
// These lines are if you want to bring up threshold values from previous files It causes issues with 16bits images
// setThreshold(LowerSampleThreshold,UpperSampleThreshold);
setAutoThreshold("Default dark");
run("Threshold...");
call("ij.gui.ImageWindow.setNextLocation", ToolbarPosX,ToolbarPosY+ToolbarSizeY+Spacer);
waitForUser(PluginName+" Information", "Adjust the Threshold to identify all your SAMPLE."
+"\nWhen done, press OK.");
getThreshold(LowerSampleThreshold, UpperSampleThreshold);

setBatchMode("hide");
selectWindow("Sample");// We convert the Sample to binary for a mask
setThreshold(LowerSampleThreshold, UpperSampleThreshold);
run("Convert to Mask");
if(isOpen("Threshold")){
selectWindow("Threshold");
run("Close");}
} // end of else if process is individual
// From Here Sample Image has been Thresholded
setBatchMode("hide");
/////////////////////// Process the binary Mask to cover all the tissue
run("Options...", "iterations=5 count=1 do=Open");
run("Options...", "iterations=5 count=1 do=Fill Holes");
run("Options...", "iterations=5 count=1 do=Dilate");
run("Options...", "iterations=5 count=1 do=Fill Holes");
run("Options...", "iterations=1 count=1 do=Nothing");

// Create a selection to be added to the ROI
selectWindow("Sample");
run("Create Selection");
// Get the dimension of the selection
getSelectionBounds(SelectionPosX, SelectionPosY, SelectionWidth, SelectionHeight);
getDimensions(ImageWidth, ImageHeight, NbChannels, NbSlices, NbFrames); // Get dimensions of the Image
// If the selection is empty ImageJ will use X=0 Y=0 Width=Height=1 or Width=Height=MaxImageHeight
// Make sure the Selection is not a default ImageJ
if(SelectionPosX==0 && SelectionPosY==0 && ((SelectionWidth==1 && SelectionHeight==1) || (SelectionWidth==ImageWidth && SelectionHeight==ImageHeight) )){
// if it is a default selection
if(ProcessingMethod=="Global" && FileI>0){ // If MEthod is global just select all
selectWindow("Sample");
run("Select None");
run("Select All");// If it is then select all
} else { // If method is individual then prompt the user
setBatchMode("hide");
call("ij.gui.ImageWindow.setNextLocation", ThresholdPosX,ThresholdPosY+ThresholdSizeY+Spacer);
selectWindow("Sample"); // Close the sample because it is empty
close();
// Recreate a Sample but do not Threhsold this time
selectWindow("SelectedChannels");
call("ij.gui.ImageWindow.setNextLocation", IJPosX,IJPosY+IJSizeY+Spacer)
run("Duplicate...", "title=Sample duplicate");// This is the sample
selectWindow("Sample");
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
// Delete the Unselected Channels
selectWindow("Sample");
if(NbSelectedCh>1){
call("ij.gui.ImageWindow.setNextLocation", IJPosX,IJPosY+IJSizeY+Spacer)
run("Z Project...", "title=MIP projection=[Max Intensity]");
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
selectWindow("Sample");
close();
selectWindow("MAX_Sample");
rename("Sample");
run("Grays");
// This is the Maximum Intensity projection of the image used to detect the sample contour
} else{
run("Grays");
}

selectWindow("Sample");
setBatchMode("show");
selectWindow("Sample");
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);

do {
SelectionPass=0;
if(isOpen("Threshold")){
selectWindow("Threshold");
run("Close");}
selectWindow("Sample");
run("Select None");
setTool("freehand");
call("ij.gui.ImageWindow.setNextLocation", ThresholdPosX,ThresholdPosY+ThresholdSizeY+Spacer);
waitForUser(PluginName+" Information", "The Sample could not be detected automatically.\nPlease use a Selection Tool to Select the Sample Area.\nWhen done press OK.");
CurrentSelection=selectionType();
// Ensure a selection is provided
if(CurrentSelection<0){
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage("Sorry but no selection has been detected."
+"\nUse a Selection Tool to Select the Sample Area.");
UserChoiceArray=newArray("Try Again", "Cancel & Close");
Dialog.setInsets(0, 80, 0);
Dialog.addRadioButtonGroup("", UserChoiceArray, 2,1, "Try Again");
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+Spacer+15);
Dialog.show();
UserChoice=Dialog.getRadioButton();
if (UserChoice=="Cancel & Close"){
exit(PluginName+" has stopped because no Sample Selection was provided.");
}
}else {SelectionPass=1;}
} while(SelectionPass!=1)
} // if no sample area could be identified automatically and Method is not global then Prompt to draw a Sample Area
}// End of if Threshold Sample gave an empty image and
setBatchMode("hide");
// Write the Threshold Values in the preferences Only if Sample was Selected
call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".LowerSampleThreshold",LowerSampleThreshold);
call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".UpperSampleThreshold",UpperSampleThreshold);

// Save the Selection into the ROI manager
roiManager("reset");
selectWindow("Sample");
roiManager("Add");
roiManager("Select", 0);
roiManager("Rename", "Sample");
roiManager("Set Color", "magenta");
roiManager("Set Line Width", 10);
selectWindow("Sample"); // We have the ROI of the sample in the ROI manager so we can close the window
close();

// Duplicate the SelectedChannels Image to Save the Sample as Overlay
selectWindow("SelectedChannels");
call("ij.gui.ImageWindow.setNextLocation", IJPosX,IJPosY+IJSizeY+Spacer)
run("Duplicate...", "title=Sample duplicate");// This is the sample
selectWindow("Sample");
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
roiManager("Select", 0);
run("Add Selection..."); // Add to Overlay
run("Overlay Options...", "stroke=cyan width=10 fill=none apply");
OutputSampleImage=OutputImagePath+InputFileNameiNoExt+"_1_Sample_Overlay.tif";
selectWindow("Sample");
saveAs("Tiff", OutputSampleImage);
close();


} else { // End of if Sample should be detected. so if sample is NOT detected
LowerSampleThreshold="No Sample detection"; // To be written in the parameters
UpperSampleThreshold="No Sample detection";
}// End of IF Sample is Not detected

// Print Parameters data
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+"Whole Image"+CellSeparator+"Lower Sample Threshold"+CellSeparator+LowerSampleThreshold+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+"Whole Image"+CellSeparator+"Upper Sample Threshold"+CellSeparator+UpperSampleThreshold+LineSeparator);


//Work on the Manual ROI
if(ROIMethodStatus[1]==1){
setBatchMode("hide");
selectWindow("SelectedChannels");
call("ij.gui.ImageWindow.setNextLocation", IJPosX,IJPosY+IJSizeY+Spacer)
run("Duplicate...", "title=RegionOfInterest duplicate");// This is the sample
selectWindow("RegionOfInterest");
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);

if(ProcessingMethod=="Global" && FileI>0){ // If process is global then Use the Sample as a ROI
setBatchMode("hide");
if(ROIMethodStatus[0]==0){ // If sample was not defined earlier
selectWindow("RegionOfInterest");
run("Select None");
run("Select All");
} else { // If sample was defined earlier
// Use the previous ROI and copy it
selectWindow("RegionOfInterest");
NbROI=roiManager("count");
run("Select None");
roiManager("Select", NbROI-1);
} // End of if sample was not defined earlier
} else { // end of if process is global so if process is individual
if(ROIMethodStatus[0]==0){ // If sample was not defined earlier then prompt to draw a selection
if(isOpen("Threshold")){
selectWindow("Threshold");
run("Close");}
selectWindow("RegionOfInterest");
run("Select None"); // deselect any pre selection
selectWindow("RegionOfInterest");
setBatchMode("show");
selectWindow("RegionOfInterest");
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
setTool("freehand");
waitForUser(PluginName+" Information", "Please, use a Selection Tool to Select the Region of Interest (ROI).\nWhen done press OK.");
CurrentSelection=selectionType();
if(CurrentSelection<0){
do {
SelectionPass=0;
if(isOpen("Threshold")){
selectWindow("Threshold");
run("Close");}
selectWindow("RegionOfInterest");
run("Select None");
setTool("freehand");
call("ij.gui.ImageWindow.setNextLocation", ThresholdPosX,ThresholdPosY+ThresholdSizeY+Spacer);
waitForUser(PluginName+" Information", "The Region of Interest (ROI) could not be detected.\nPlease use a Selection Tool to Select the Region of Interest (ROI).\nWhen done press OK.");
CurrentSelection=selectionType();
// Ensure a selection is provided
if(CurrentSelection<0){
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage("Sorry but no selection has been detected."
+"\nUse a Selection Tool to Select the Region of Interest (ROI).");
UserChoiceArray=newArray("Try Again", "Cancel & Close");
Dialog.setInsets(0, 80, 0);
Dialog.addRadioButtonGroup("", UserChoiceArray, 2,1, "Try Again");
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+Spacer+15);
Dialog.show();
UserChoice=Dialog.getRadioButton();
if (UserChoice=="Cancel & Close"){
exit(PluginName+" has stopped because no Region of Interest (ROI) Selection was provided.");
}
}else {SelectionPass=1;}
} while(SelectionPass!=1) // end of ensure a Selection
}
} else { // end of if sample was not defined earlier so Sample WAS actually then prompt to ADJUST the previous selection
if(isOpen("Threshold")){
selectWindow("Threshold");
run("Close");}
selectWindow("RegionOfInterest");
setBatchMode("show");
selectWindow("RegionOfInterest");
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
selectWindow("RegionOfInterest");
NbROI=roiManager("count");
run("Select None");
roiManager("Select", NbROI-1);
setTool("freehand");
call("ij.gui.ImageWindow.setNextLocation", ThresholdPosX,ThresholdPosY+ThresholdSizeY+Spacer);
waitForUser(PluginName+" Information", "If necessary, Adjust the Current Region of Interest (ROI).\nUse\nShift+Click & Drag to ADD\nor\nOption+Click & Drag to SUBTRACT to the Current Selection\nWhen done press OK.");
CurrentSelection=selectionType();

if(CurrentSelection<0){
do {
SelectionPass=0;
if(isOpen("Threshold")){
selectWindow("Threshold");
run("Close");}
selectWindow("RegionOfInterest");
run("Select None");
setTool("freehand");
call("ij.gui.ImageWindow.setNextLocation", ThresholdPosX,ThresholdPosY+ThresholdSizeY+Spacer);
waitForUser(PluginName+" Information", "The Region of Interest (ROI) could not be detected.\nPlease use a Selection Tool to Select the Region of Interest (ROI).\nWhen done press OK.");
CurrentSelection=selectionType();
// Ensure a selection is provided
if(CurrentSelection<0){
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage("Sorry but no Selection has been detected."
+"\nUse a Selection Tool to Select the Region of Interest (ROI).");
UserChoiceArray=newArray("Try Again", "Cancel & Close");
Dialog.setInsets(0, 80, 0);
Dialog.addRadioButtonGroup("", UserChoiceArray, 2,1, "Try Again");
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+Spacer+15);
Dialog.show();
UserChoice=Dialog.getRadioButton();
if (UserChoice=="Cancel & Close"){
exit(PluginName+" has stopped because no Region of Interest (ROI) Selection was provided.");
}
}else {SelectionPass=1;}
} while(SelectionPass!=1) // end of ensure a Selection
}// end of if Current Selection
} // end of else Sample WAS actually defined earlier prompt to adjust
}// end of if Process is NOT global so it is individual then prompt
// From now we should have a ROI Selection
setBatchMode("hide");
selectWindow("RegionOfInterest");
roiManager("Add");
NbROI=roiManager("count");
run("Select None");
roiManager("Select", NbROI-1);
roiManager("Rename", "Region_Of_Interest");
roiManager("Set Color", "magenta");
roiManager("Set Line Width", 10);
run("Add Selection..."); // Add to Overlay
run("Overlay Options...", "stroke=cyan width=10 fill=none apply");
OutputROIImage=OutputImagePath+InputFileNameiNoExt+"_2_ROI_Overlay.tif";
selectWindow("RegionOfInterest");
saveAs("Tiff", OutputROIImage);
close();
} else { // ENd of if Manual ROI is selected
//Do nothing
} // end of If Manual ROI is NOT selected
setForegroundColor(255, 255, 255);
setBackgroundColor(0, 0, 0);// Set the foreground and background colors
// if a ROI was defined Sample OR Manual then clear outside the last made ROI
if(ROIMethodStatus[0]==1 || ROIMethodStatus[1]==1){
setBatchMode("hide");
setForegroundColor(255, 255, 255);
setBackgroundColor(0, 0, 0);// Set the foreground and background colors
selectWindow(InputFileNamei); // InputFileName has all the original channels and is cropped on the sample or on the ROI
NbROI=roiManager("count");
run("Select None");
roiManager("Select", NbROI-1);
run("Clear Outside");
}
setBatchMode("hide");
selectWindow("SelectedChannels"); // SelectedChannels has only the Selected Channels and is cropped on the sample or on the ROI
close();






///////////////////////////////////////////// Duplicate and threshold the each selected channels
for (ChI=0; ChI < ListSelectedCh.length; ChI++){
setBatchMode("hide");
SelectedChI=ListSelectedCh[ChI]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIListPos=SelectedChI-1; // This is the position within the array of the SelectedChI
NameSelectedChI=ListChNames[SelectedChIListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChI=ListChLowerThreshold[SelectedChIListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChI=ListChUpperThreshold[SelectedChIListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChI=ListChRemoveNoiseStatus[SelectedChIListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChI=ListChWatershedStatus[SelectedChIListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChI=ListChMinParticleDiameter[SelectedChIListPos]; // This is the particle diameter in Unit^2 for ChI
MaxParticleDiameterSelectedChI=ListChMaxParticleDiameter[SelectedChIListPos]; // This is the  percentage of variation allowed around the particle diameterfor ChI
MinParticleCircularitySelectedChI=ListChMinParticleCircularity[SelectedChIListPos]; // This is the particle diameter in Unit^2 for ChI
MaxParticleCircularitySelectedChI=ListChMaxParticleCircularity[SelectedChIListPos]; // This is the particle diameter in Unit^2 for ChI

selectWindow(InputFileNamei);
run("Select None");
run("Remove Overlay");
call("ij.gui.ImageWindow.setNextLocation", IJPosX,IJPosY+IJSizeY+Spacer)
run("Duplicate...", "duplicate title=&NameSelectedChI channels=&SelectedChI"); // Duplicate each channel to threshold
selectWindow(NameSelectedChI);
run("Grays");
// This is to bring the threshold from the preferences but cause bugs in 16bits image
// setThreshold(LowerThresholdSelectedChI,UpperThresholdSelectedChI);

if(ProcessingMethod=="Global" && FileI>0){
setBatchMode("hide");
selectWindow(NameSelectedChI);
// Threshold the Image
setThreshold(LowerThresholdSelectedChI, UpperThresholdSelectedChI);
run("Convert to Mask");
// Apply the Image Enhancements
if(RemoveNoiseStatusSelectedChI==1 && WatershedStatusSelectedChI==0){
run("Open");
} else if(RemoveNoiseStatusSelectedChI==0 && WatershedStatusSelectedChI==1){
run("Watershed");
} else if(RemoveNoiseStatusSelectedChI==1 && WatershedStatusSelectedChI==1){
run("Open");
run("Watershed");
}
// Calculate the Particle Area
MinParticleAreaSelectedChI=PI*MinParticleDiameterSelectedChI*MinParticleDiameterSelectedChI;
MaxParticleAreaSelectedChI=PI*MaxParticleDiameterSelectedChI*MaxParticleDiameterSelectedChI;
// Convert the circularity percentage into a decimal
MinParticleCircularitySelectedChIDecimal = 0.01*MinParticleCircularitySelectedChI;
MaxParticleCircularitySelectedChIDecimal = 0.01*MaxParticleCircularitySelectedChI;
// Analyze Particle for saving as an Overlay
selectWindow(NameSelectedChI);
run("Select None");
run("Remove Overlay");
run("Analyze Particles...", "size=&MinParticleAreaSelectedChI-&MaxParticleAreaSelectedChI circularity=&MinParticleCircularitySelectedChIDecimal-&MaxParticleCircularitySelectedChIDecimal show=[Overlay Masks] in_situ");
run("Overlay Options...", "stroke=magenta width=1 fill=cyan apply show");
run("Labels...", "color=blue font=10 show bold");

} else { // If processing is not Global
// These lines are if you want to bring up threshold values from previous files It causes issues with 16bits images
// setThreshold(LowerThresholdSelectedChI,UpperThresholdSelectedChI);
selectWindow(NameSelectedChI);
setBatchMode("show");
selectWindow(NameSelectedChI);
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
setAutoThreshold("Default dark");
run("Threshold...");
setTool("zoom");
waitForUser(PluginName+" Information", "Adjust the Threshold to identify your staining for "+NameSelectedChI+"."
+"\nWhen done, press OK.");
setBatchMode("hide");
getThreshold(LowerThresholdSelectedChI, UpperThresholdSelectedChI);
// Update the List of Threshold
ListChLowerThreshold[SelectedChIListPos]=LowerThresholdSelectedChI;
ListChUpperThreshold[SelectedChIListPos]=UpperThresholdSelectedChI;
selectWindow(NameSelectedChI);
run("Convert to Mask");
if(isOpen("Threshold")){
selectWindow("Threshold");
run("Close");}
selectWindow(NameSelectedChI);
run("Duplicate...", "title=RemoveNoise duplicate");
run("Open");
selectWindow(NameSelectedChI);
run("Duplicate...", "title=Watershed duplicate");
run("Watershed");
selectWindow(NameSelectedChI);
run("Duplicate...", "title=RemoveNoise_AND_Watershed duplicate");
run("Open");
run("Watershed");
ImageEnhancementName="Image Enhancement Options for "+NameSelectedChI;
run("Concatenate...", "  title=&ImageEnhancementName image1=&NameSelectedChI image2=RemoveNoise image3=Watershed image4=RemoveNoise_AND_Watershed image5=[-- None --]");
selectWindow(ImageEnhancementName);
// This set up the slice of the previously choosen options
if(RemoveNoiseStatusSelectedChI==1 && WatershedStatusSelectedChI==0){
setSlice(2);
} else if(RemoveNoiseStatusSelectedChI==0 && WatershedStatusSelectedChI==1){
setSlice(3);
} else if(RemoveNoiseStatusSelectedChI==1 && WatershedStatusSelectedChI==1){
setSlice(4);
} else {
setSlice(1);
}
resetThreshold();
if(isOpen("Threshold")){
selectWindow("Threshold");
run("Close");
}
setTool("zoom");
selectWindow(ImageEnhancementName);
resetThreshold();
setBatchMode("show");
selectWindow(ImageEnhancementName);
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
call("ij.gui.ImageWindow.setNextLocation", ThresholdPosX,ThresholdPosY+ThresholdSizeY+Spacer);
waitForUser(PluginName+" Information", "Select the optimal Image for "+NameSelectedChI+".\nYou may Zoom for a better view.\nSlice 1: Original\nSlice 2: Noise Removed\nSlice 3: Watershed\nSlice 4: Noise Removed & Wateshed"
+"\nWhen done, press OK.");
setBatchMode("hide");
selectWindow(ImageEnhancementName);
getDimensions(ImageWidthEnhancement, ImageHeightEnhancement, NbChannelsEnhancement, NbSlicesEnhancement, NbFramesEnhancement); // Get dimensions of the Image
Stack.getPosition(CurrentChannelEnhancement, CurrentSliceEnhancement, CurrentFrameEnhancement);
// Delete the other Slices
SubStackString=""+"channels=1-"+NbChannelsEnhancement+" slices="+CurrentSliceEnhancement+" frames="+CurrentFrameEnhancement;
selectWindow(ImageEnhancementName);
run("Select None");
run("Make Substack...", SubStackString);
rename(NameSelectedChI);
selectWindow(ImageEnhancementName);
close();
if(CurrentSliceEnhancement==2){
RemoveNoiseStatusSelectedChI=1;
WatershedStatusSelectedChI=0;
}else if(CurrentSliceEnhancement==3){
RemoveNoiseStatusSelectedChI=0;
WatershedStatusSelectedChI=1;
}else if(CurrentSliceEnhancement==4){
RemoveNoiseStatusSelectedChI=1;
WatershedStatusSelectedChI=1;
} else {
RemoveNoiseStatusSelectedChI=0;
WatershedStatusSelectedChI=0;
}
// Update the Enhancement Status
ListChRemoveNoiseStatus[SelectedChIListPos]=RemoveNoiseStatusSelectedChI;
ListChWatershedStatus[SelectedChIListPos]=WatershedStatusSelectedChI;


// From Now we have selected the Enhancement option for Selected Ch and have a binary Image

do {
SelectionPass=0;
if(isOpen("Threshold")){
selectWindow("Threshold");
run("Close");}
setTool("wand");//Select wand tool
selectWindow(NameSelectedChI);
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
setBatchMode("show");
selectWindow(NameSelectedChI);
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
call("ij.gui.ImageWindow.setNextLocation", ThresholdPosX,ThresholdPosY+ThresholdSizeY+Spacer);
waitForUser(PluginName+" Information", "Select the Largest Cell you would like to count for "+NameSelectedChI+"."
+"\nWhen done, press OK.");
CurrentSelection=selectionType();

if(CurrentSelection<0 || CurrentSelection>5){
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage("Sorry but no selection has been detected."
+"\nUse a Selection Tool to Select the Largest Cell\nyou would like to count for "+NameSelectedChI+".");
UserChoiceArray=newArray("Try Again", "Cancel & Close");
Dialog.setInsets(0, 80, 0);
Dialog.addRadioButtonGroup("", UserChoiceArray, 2,1, "Try Again");
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+Spacer+15);
Dialog.show();
UserChoice=Dialog.getRadioButton();
if (UserChoice=="Cancel & Close"){
exit(PluginName+" has stopped because no selection was provided for "+NameSelectedChI+".");
}
}else {SelectionPass=1;}
} while(SelectionPass!=1)

setBatchMode("hide");
// Once a selection is Made get the area of the selection
run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack display invert redirect=None decimal=9");
//run("Clear Results");

run("Measure");
ParticleAreaChIMeasured=getResult("Area", nResults-1);
//run("Clear Results");
IJ.deleteRows(nResults-1,nResults-1);
selectWindow(NameSelectedChI);
run("Select None");
// From the area calculate the diameter of the Particle
ParticleDiameterChIMeasured=round(2*sqrt(ParticleAreaChIMeasured/PI));
// Set up the Min and Max Particle diameter and circularity
MinParticleDiameterSelectedChI=0;
MaxParticleDiameterSelectedChI=ParticleDiameterChIMeasured;
MinParticleCircularitySelectedChI=0;
MaxParticleCircularitySelectedChI=100;

// Prompt for Parameter adjustments
do{
// Calculate the Min and Max ParticleArea from the Diameter
MinParticleAreaSelectedChI=PI*MinParticleDiameterSelectedChI*MinParticleDiameterSelectedChI;
MaxParticleAreaSelectedChI=PI*MaxParticleDiameterSelectedChI*MaxParticleDiameterSelectedChI;
// Convert the circularity percentage into a decimal
MinParticleCircularitySelectedChIDecimal=0.01*MinParticleCircularitySelectedChI;
MaxParticleCircularitySelectedChIDecimal=0.01*MaxParticleCircularitySelectedChI;

// Do a first analysis particle and save it as OverlayMask
selectWindow(NameSelectedChI);
run("Select None");// Remove any selection
run("Remove Overlay");
run("Analyze Particles...", "size=&MinParticleAreaSelectedChI-&MaxParticleAreaSelectedChI circularity=&MinParticleCircularitySelectedChIDecimal-&MaxParticleCircularitySelectedChIDecimal show=[Overlay Masks] in_situ");
run("Overlay Options...", "stroke=magenta width=1 fill=cyan apply show");
run("Labels...", "color=blue font=10 show bold");
if(isOpen("Threshold")){
selectWindow("Threshold");
run("Close");}
setTool("zoom");
selectWindow(NameSelectedChI);
setBatchMode("show");
selectWindow(NameSelectedChI);
setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
waitForUser(PluginName+" Information","Look at the Cell Detection (Cyan Overlay).\nYou may Zoom for a better view.\nCell Detection Parameters will appear when OK is pressed.");

do{
DialogPass=0;
ParticleDetectionPass=0;
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage("Adjust the Cell Detection Parameters for "+NameSelectedChI+" and Try Again.");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage("or Move to Next.");
Dialog.setInsets(0, 0, 0);
Dialog.addNumber("Min Cell Diameter for "+NameSelectedChI+" :", MinParticleDiameterSelectedChI, 0, 10, RescaledUnit)
Dialog.setInsets(0, 0, 0);
Dialog.addNumber("Max Cell Diameter for "+NameSelectedChI+" :", MaxParticleDiameterSelectedChI, 0, 10, RescaledUnit)
Dialog.setInsets(0, 0, 0);
Dialog.addSlider("Min Cell Circularity for "+NameSelectedChI+" :", 0, 100, MinParticleCircularitySelectedChI);
Dialog.setInsets(0, 0, 0);
Dialog.addSlider("Max Cell Circularity for "+NameSelectedChI+" :", 0, 100, MaxParticleCircularitySelectedChI);
Dialog.setInsets(0, 0, 0);
UserChoiceDetectionArray=newArray("Try Again", "Move to Next");
Dialog.setInsets(0, 150, 0);
Dialog.addRadioButtonGroup("", UserChoiceDetectionArray, 2, 1, "Try Again");
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+Spacer+15);
Dialog.show();

MinParticleDiameterSelectedChI=Dialog.getNumber();
MaxParticleDiameterSelectedChI=Dialog.getNumber();
MinParticleCircularitySelectedChI=Dialog.getNumber();
MaxParticleCircularitySelectedChI=Dialog.getNumber();
UserChoiceDetection=Dialog.getRadioButton();
// Reorder Particle Diameter if smaller is larger
if(MinParticleDiameterSelectedChI>MaxParticleDiameterSelectedChI){
ParticleDiameterTemporary=MaxParticleDiameterSelectedChI;
MaxParticleDiameterSelectedChI=MinParticleDiameterSelectedChI;
MinParticleDiameterSelectedChI=ParticleDiameterTemporary;
}
// Reorder Particle Circularity if smaller is larger
if(MinParticleCircularitySelectedChI>MaxParticleCircularitySelectedChI){
ParticleCircularityTemporary=MinParticleCircularitySelectedChI;
MaxParticleCircularitySelectedChI=MinParticleCircularitySelectedChI;
MinParticleCircularitySelectedChI=ParticleCircularityTemporary;
}

// Ensure Particle Diameter entered are numeric and positive
if(isNaN(MinParticleDiameterSelectedChI)||isNaN(MaxParticleDiameterSelectedChI)|| MinParticleDiameterSelectedChI<0){
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
if(isNaN(MinParticleDiameterSelectedChI)){
Dialog.addMessage("Sorry but the Min Particle Diameter must be a number.");
}else if (isNaN(MaxParticleDiameterSelectedChI)) {
Dialog.addMessage("Sorry but the Max Particle Diameter must be a number.");
} else {
Dialog.addMessage("Sorry but the Min Particle Diameter can't be smaller than 0.");
}
Dialog.setInsets(0, 0, 0);
UserChoiceArray=newArray("Try Again", "Cancel & Close");
Dialog.setInsets(0, 50, 0);
Dialog.addRadioButtonGroup("", UserChoiceArray, 2, 1, "Try Again");
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+Spacer+15);
Dialog.show();
UserChoice=Dialog.getRadioButton();
if (UserChoice=="Cancel & Close"){
if(isNaN(MinParticleDiameterSelectedChI)){
exit(PluginName+ " Information:\nThe function "+ MacroName+" has stopped because the Min Particle Diameter for "+NameSelectedChI+" wasn't numeric");
}else if (isNaN(MaxParticleDiameterSelectedChI)) {
exit(PluginName+ " Information:\nThe function "+ MacroName+" has stopped because the Max Particle Diameter for "+NameSelectedChI+" wasn't numeric");
} else {
exit(PluginName+ " Information:\nThe function "+ MacroName+" has stopped because the Min Particle Diameter for "+NameSelectedChI+" was smaller than 0.");
}
} else if(UserChoice=="Try Again"){
if(isNaN(MinParticleDiameterSelectedChI)|| MinParticleDiameterSelectedChI<0){
MinParticleDiameterSelectedChI=0;
} else if (isNaN(MaxParticleDiameterSelectedChI)){
MaxParticleDiameterSelectedChI=100;
}
} // End of if user try Again
} else{ // end of if particle is NaN
DialogPass=1;
} // End of else dialog pass
} while(DialogPass!=1) // End of Do Dialog box
if(UserChoiceDetection=="Move to Next"){
ParticleDetectionPass=1;
} // End of UserCHoice detection
} while(ParticleDetectionPass!=1) // End of Do loop Analyze particle


// Update the list of Ch Particle Diameter and Circularity
ListChMinParticleDiameter[SelectedChIListPos]=MinParticleDiameterSelectedChI; // This is the particle diameter in Unit^2 for ChI
ListChMaxParticleDiameter[SelectedChIListPos]=MaxParticleDiameterSelectedChI;
ListChMinParticleCircularity[SelectedChIListPos]=MinParticleCircularitySelectedChI;
ListChMaxParticleCircularity[SelectedChIListPos]=MaxParticleCircularitySelectedChI;
} // End of If process is Individual

// Now we have the Particle detected we can save it as an Overlay
setBatchMode("hide");
ChNb=ChI+1;
selectWindow(NameSelectedChI);
OutputParticleImageChI=OutputImagePath+InputFileNameiNoExt+"_Ch"+ChNb+"_"+NameSelectedChI+"_CellCount_Overlay.tif";
saveAs("Tiff", OutputParticleImageChI);
rename(NameSelectedChI);

// Print the parameter into the text file
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+NameSelectedChI+CellSeparator+"Lower Threshold"+CellSeparator+LowerThresholdSelectedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+NameSelectedChI+CellSeparator+"Upper Threshold"+CellSeparator+UpperThresholdSelectedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+NameSelectedChI+CellSeparator+"Min Particle Diameter ("+RescaledUnit+")"+CellSeparator+MinParticleDiameterSelectedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+NameSelectedChI+CellSeparator+"Max Particle Diameter ("+RescaledUnit+")"+CellSeparator+MaxParticleDiameterSelectedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+NameSelectedChI+CellSeparator+"Min Particle Area ("+RescaledUnit+"^2)"+CellSeparator+MinParticleAreaSelectedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+NameSelectedChI+CellSeparator+"Max Particle Area ("+RescaledUnit+"^2)"+CellSeparator+MaxParticleAreaSelectedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+NameSelectedChI+CellSeparator+"Min Particle Circularity (0-100)"+CellSeparator+MinParticleCircularitySelectedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+NameSelectedChI+CellSeparator+"Max Particle Circularity (0-100)"+CellSeparator+MaxParticleCircularitySelectedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+NameSelectedChI+CellSeparator+"Remove Noise Option"+CellSeparator+RemoveNoiseStatusSelectedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+NameSelectedChI+CellSeparator+"Watershed Option"+CellSeparator+WatershedStatusSelectedChI+LineSeparator);


// ReAnalyze particle on Selected ChI to have the DATA this time
selectWindow(NameSelectedChI);
run("Select None");
run("Remove Overlay");
if(FirstResult=="true"){
run("Clear Results");
setResult("Area",nResults,0);     // Add a blank results line and column just in case the analysis particle is gives an empty results
NbOfParticles=0;
FirstResult="false";
}

run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack display invert redirect=None decimal=9");
selectWindow(NameSelectedChI);

run("Analyze Particles...", "size=&MinParticleAreaSelectedChI-&MaxParticleAreaSelectedChI circularity=&MinParticleCircularitySelectedChIDecimal-&MaxParticleCircularitySelectedChIDecimal show=Masks display summarize in_situ");
selectWindow("Results");
//Add the Label and Channel Names to the Results

if(NbOfParticles<nResults){
for(i=NbOfParticles;i<nResults;i++){
setResult("Label", i, InputFileNameiNoExt);
setResult("Channel", i, NameSelectedChI);
}
NbOfParticles=nResults;
}
selectWindow("Results");
updateResults();
selectWindow("Summary");
setLocation(ToolbarPosX+ToolbarSizeX, ToolbarPosY);

// Create a selection add to the roi Manager
selectWindow(NameSelectedChI); // This is the Mask after the particle detection
run("Create Selection");
// Make Sure the selection is not empty
getSelectionBounds(SelectionPosX, SelectionPosY, SelectionWidth, SelectionHeight);
getDimensions(ImageWidth, ImageHeight, NbChannels, NbSlices, NbFrames); // Get dimensions of the Image
// If the selection is empty ImageJ will use X=0 Y=0 Width=Height=1 or Width=Height=MaxImageHeight
if(SelectionPosX==0 && SelectionPosY==0 && ((SelectionWidth==1 && SelectionHeight==1) || (SelectionWidth==ImageWidth && SelectionHeight==ImageHeight) )){
run("Select None");
makeRectangle(0, 0, 1, 1);
}
roiManager("Add");
NbROI=roiManager("count");
roiManager("Select", NbROI-1);
roiManager("Rename", NameSelectedChI);
roiManager("Set Color", "magenta");
roiManager("Set Line Width", 10);
// Do not close each individual channels because we will use it for combination
}// end for ChI
////////////////////////////////////////////// End Duplicate and threshold the Staining channels
setBatchMode("hide");
if(ProcessingMethod=="Global" && FileI>0){
//  do nothing
} else { //update the Preferences
for(i=0;i<ListChSelectionStatus.length;i++){
if(i==0){
ListChLowerThresholdString=""+ListChLowerThreshold[i];
ListChUpperThresholdString=""+ListChUpperThreshold[i];
ListChMinParticleDiameterString=""+ListChMinParticleDiameter[i];
ListChMaxParticleDiameterString=""+ListChMaxParticleDiameter[i];
ListChMinParticleCircularityString=""+ListChMinParticleCircularity[i];
ListChMaxParticleCircularityString=""+ListChMaxParticleCircularity[i];
ListChRemoveNoiseStatusString=""+ListChRemoveNoiseStatus[i];
ListChWatershedStatusString=""+ListChWatershedStatus[i];
}else{
ListChLowerThresholdString=ListChLowerThresholdString+","+ListChLowerThreshold[i];
ListChUpperThresholdString=ListChUpperThresholdString+","+ListChUpperThreshold[i];
ListChMinParticleDiameterString=ListChMinParticleDiameterString+","+ListChMinParticleDiameter[i];
ListChMaxParticleDiameterString=ListChMaxParticleDiameterString+","+ListChMaxParticleDiameter[i];
ListChMinParticleCircularityString=ListChMinParticleCircularityString+","+ListChMinParticleCircularity[i];
ListChMaxParticleCircularityString=ListChMaxParticleCircularityString+","+ListChMaxParticleCircularity[i];
ListChRemoveNoiseStatusString=ListChRemoveNoiseStatusString+","+ListChRemoveNoiseStatus[i];
ListChWatershedStatusString=ListChWatershedStatusString+","+ListChWatershedStatus[i];
}
} // end of for i

// Save the parameters in the Preferences
call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".ListChLowerThreshold",ListChLowerThresholdString);
call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".ListChUpperThreshold",ListChUpperThresholdString);
call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".ListChMinParticleDiameter",ListChMinParticleDiameterString);
call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".ListChMaxParticleDiameter",ListChMaxParticleDiameterString);
call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".ListChMinParticleCircularity",ListChMinParticleCircularityString);
call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".ListChMaxParticleCircularity",ListChMaxParticleCircularityString);
call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".ListChRemoveNoiseStatus",ListChRemoveNoiseStatusString);
call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".ListChWatershedStatus",ListChWatershedStatusString);
}// end of if not global then save the parameters







setBatchMode("hide");
///////////////////////// Combine 2 channels
///////////////////////// Combine 2 channels
if(ListSelectedCh.length>1){
for (ChIA=0; ChIA < ListSelectedCh.length-1; ChIA++){
for (ChIB=ChIA+1; ChIB < ListSelectedCh.length; ChIB++){
SelectedChIA=ListSelectedCh[ChIA]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIAListPos=SelectedChIA-1; // This is the position within the array of the SelectedChIA
NameSelectedChIA=ListChNames[SelectedChIAListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIA=ListChLowerThreshold[SelectedChIAListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIA=ListChUpperThreshold[SelectedChIAListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIA=ListChRemoveNoiseStatus[SelectedChIAListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIA=ListChWatershedStatus[SelectedChIAListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIA=ListChMinParticleDiameter[SelectedChIAListPos]; // This is the particle diameter in Unit^2 for ChIA
MaxParticleDiameterSelectedChIA=ListChMaxParticleDiameter[SelectedChIAListPos]; // This is the  percentage of variation allowed around the particle diameterfor ChIA
MinParticleCircularitySelectedChIA=ListChMinParticleCircularity[SelectedChIAListPos]; // This is the particle diameter in Unit^2 for ChIA
MaxParticleCircularitySelectedChIA=ListChMaxParticleCircularity[SelectedChIAListPos]; // This is the particle diameter in Unit^2 for ChI

SelectedChIB=ListSelectedCh[ChIB]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIBListPos=SelectedChIB-1; // This is the position within the array of the SelectedChIB
NameSelectedChIB=ListChNames[SelectedChIBListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIB=ListChLowerThreshold[SelectedChIBListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIB=ListChUpperThreshold[SelectedChIBListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIB=ListChRemoveNoiseStatus[SelectedChIBListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIB=ListChWatershedStatus[SelectedChIBListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIB=ListChMinParticleDiameter[SelectedChIBListPos]; // This is the particle diameter in Unit^2 for ChIB
MaxParticleDiameterSelectedChIB=ListChMaxParticleDiameter[SelectedChIBListPos]; // This is the  percentage of variation allowed around the particle diameterfor ChIB
MinParticleCircularitySelectedChIB=ListChMinParticleCircularity[SelectedChIBListPos]; // This is the particle diameter in Unit^2 for ChIB
MaxParticleCircularitySelectedChIB=ListChMaxParticleCircularity[SelectedChIBListPos]; // This is the particle diameter in Unit^2 for ChI

CombinedParticleDiameterArray=newArray(MinParticleDiameterSelectedChIA, MaxParticleDiameterSelectedChIA,MinParticleDiameterSelectedChIB, MaxParticleDiameterSelectedChIB);
CombinedParticleCircularityArray=newArray(MinParticleCircularitySelectedChIA, MaxParticleCircularitySelectedChIA,MinParticleCircularitySelectedChIB, MaxParticleCircularitySelectedChIB);
CombinedChNameI=""+NameSelectedChIA+"x"+NameSelectedChIB;
CombinedChNbI="_Ch"+ChIA+1+"xCh"+ChIB+1+"_";
OutputResultsPathCombinedChI=OutputTablePath+InputFileNameiNoExt+CombinedChNbI+CombinedChNameI+"_CellCount_DetailedResult.txt";
OutputParticleImageCombinedChI=OutputImagePath+InputFileNameiNoExt+CombinedChNbI+CombinedChNameI+"_CellCount_Overlay.tif";

Array.getStatistics(CombinedParticleDiameterArray, MinParticleDiameterCombinedChI, MaxParticleDiameterCombinedChI, MeanParticleDiameterCombinedChI, StDevParticleDiameterCombinedChI);
MinParticleAreaCombinedChI=PI*MinParticleDiameterCombinedChI*MinParticleDiameterCombinedChI;
MaxParticleAreaCombinedChI=PI*MaxParticleDiameterCombinedChI*MaxParticleDiameterCombinedChI;

Array.getStatistics(CombinedParticleCircularityArray, MinParticleCircularityCombinedChI, MaxParticleCircularityCombinedChI, MeanParticleCircularityCombinedChI, StDevParticleCircularityCombinedChI);
MinParticleCircularityCombinedChIDecimal=MinParticleCircularityCombinedChI/100;
MaxParticleCircularityCombinedChIDecimal=MaxParticleCircularityCombinedChI/100;

selectWindow(NameSelectedChIA);
run("Select None");
run("Duplicate...", "title=CombinedChImage duplicate");
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChIB);
selectWindow("CombinedChImage");
rename(CombinedChNameI);

selectWindow(CombinedChNameI);
run("Select None");// Remove any selection
run("Remove Overlay");
selectWindow(CombinedChNameI);
run("Duplicate...", "title=CombinedChImageForROI duplicate");
selectWindow("CombinedChImageForROI");
run("Analyze Particles...", "size=&MinParticleAreaCombinedChI-&MaxParticleAreaCombinedChI circularity=&MinParticleCircularityCombinedChIDecimal-&MaxParticleCircularityCombinedChIDecimal show=Masks in_situ");
selectWindow("CombinedChImageForROI");
run("Create Selection");

getSelectionBounds(SelectionPosX, SelectionPosY, SelectionWidth, SelectionHeight);
getDimensions(ImageWidth, ImageHeight, NbChannels, NbSlices, NbFrames); // Get dimensions of the Image
// If the selection is empty ImageJ will use X=0 Y=0 Width=Height=1 or Width=Height=MaxImageHeight
if(SelectionPosX==0 && SelectionPosY==0 && ((SelectionWidth==1 && SelectionHeight==1) || (SelectionWidth==ImageWidth && SelectionHeight==ImageHeight) )){
run("Select None");
makeRectangle(0, 0, 1, 1);
}
roiManager("Add");
NbROI=roiManager("count");
roiManager("Select", NbROI-1);
roiManager("Rename", CombinedChNameI);
roiManager("Set Color", "magenta");
roiManager("Set Line Width", 10);
selectWindow("CombinedChImageForROI");
close();

// Run again the analyze Particle for the Detailed results and the overlay
run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack display invert redirect=None decimal=9");
selectWindow(CombinedChNameI);
run("Analyze Particles...", "size=&MinParticleAreaCombinedChI-&MaxParticleAreaCombinedChI circularity=&MinParticleCircularityCombinedChIDecimal-&MaxParticleCircularityCombinedChIDecimal show=[Overlay Masks] display summarize in_situ");
selectWindow("Results");
//Add the Label and Channel Names to the Results
if(NbOfParticles<nResults){
for(i=NbOfParticles;i<nResults;i++){
setResult("Label", i, InputFileNameiNoExt);
setResult("Channel", i, CombinedChNameI);
}
NbOfParticles=nResults;
}

selectWindow("Results");
updateResults();
selectWindow(CombinedChNameI);
run("Overlay Options...", "stroke=magenta width=1 fill=cyan apply show");
run("Labels...", "color=blue font=10 show bold");


selectWindow(CombinedChNameI);
saveAs("Tiff", OutputParticleImageCombinedChI);
close();

print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Min Particle Diameter ("+RescaledUnit+")"+CellSeparator+MinParticleDiameterCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Max Particle Diameter ("+RescaledUnit+")"+CellSeparator+MaxParticleDiameterCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Min Particle Area ("+RescaledUnit+"^2)"+CellSeparator+MinParticleAreaCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Max Particle Area ("+RescaledUnit+"^2)"+CellSeparator+MaxParticleAreaCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Min Particle Circularity (0-100)"+CellSeparator+MinParticleCircularityCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Max Particle Circularity (0-100)"+CellSeparator+MaxParticleCircularityCombinedChI+LineSeparator);
}// end for ChIB
}// for ChIA
} // End of if more than 1 selected channel




///////////////////////// Combine 3 channels
///////////////////////// Combine 3 channels
if(ListSelectedCh.length>2){
for (ChIA=0; ChIA < ListSelectedCh.length-2; ChIA++){
for (ChIB=ChIA+1; ChIB < ListSelectedCh.length-1; ChIB++){
for (ChIC=ChIB+1; ChIC < ListSelectedCh.length; ChIC++){
SelectedChIA=ListSelectedCh[ChIA]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIAListPos=SelectedChIA-1; // This is the position within the array of the SelectedChIA
NameSelectedChIA=ListChNames[SelectedChIAListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIA=ListChLowerThreshold[SelectedChIAListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIA=ListChUpperThreshold[SelectedChIAListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIA=ListChRemoveNoiseStatus[SelectedChIAListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIA=ListChWatershedStatus[SelectedChIAListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIA=ListChMinParticleDiameter[SelectedChIAListPos]; // This is the particle diameter in Unit^2 for ChIA
MaxParticleDiameterSelectedChIA=ListChMaxParticleDiameter[SelectedChIAListPos]; // This is the  percentage of variation allowed around the particle diameterfor ChIA
MinParticleCircularitySelectedChIA=ListChMinParticleCircularity[SelectedChIAListPos]; // This is the particle diameter in Unit^2 for ChIA
MaxParticleCircularitySelectedChIA=ListChMaxParticleCircularity[SelectedChIAListPos]; // This is the particle diameter in Unit^2 for ChI

SelectedChIB=ListSelectedCh[ChIB]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIBListPos=SelectedChIB-1; // This is the position within the array of the SelectedChIB
NameSelectedChIB=ListChNames[SelectedChIBListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIB=ListChLowerThreshold[SelectedChIBListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIB=ListChUpperThreshold[SelectedChIBListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIB=ListChRemoveNoiseStatus[SelectedChIBListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIB=ListChWatershedStatus[SelectedChIBListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIB=ListChMinParticleDiameter[SelectedChIBListPos]; // This is the particle diameter in Unit^2 for ChIB
MaxParticleDiameterSelectedChIB=ListChMaxParticleDiameter[SelectedChIBListPos]; // This is the  percentage of variation allowed around the particle diameterfor ChIB
MinParticleCircularitySelectedChIB=ListChMinParticleCircularity[SelectedChIBListPos]; // This is the particle diameter in Unit^2 for ChIB
MaxParticleCircularitySelectedChIB=ListChMaxParticleCircularity[SelectedChIBListPos]; // This is the particle diameter in Unit^2 for ChI


SelectedChIC=ListSelectedCh[ChIC]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChICListPos=SelectedChIC-1; // This is the position within the array of the SelectedChIC
NameSelectedChIC=ListChNames[SelectedChICListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIC=ListChLowerThreshold[SelectedChICListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIC=ListChUpperThreshold[SelectedChICListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIC=ListChRemoveNoiseStatus[SelectedChICListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIC=ListChWatershedStatus[SelectedChICListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIC=ListChMinParticleDiameter[SelectedChICListPos]; // This is the particle diameter in Unit^2 for ChIC
MaxParticleDiameterSelectedChIC=ListChMaxParticleDiameter[SelectedChICListPos]; // This is the  percentage of variation allowed around the particle diameterfor ChIC
MinParticleCircularitySelectedChIC=ListChMinParticleCircularity[SelectedChICListPos]; // This is the particle diameter in Unit^2 for ChIC
MaxParticleCircularitySelectedChIC=ListChMaxParticleCircularity[SelectedChICListPos]; // This is the particle diameter in Unit^2 for ChI



CombinedParticleDiameterArray=newArray(MinParticleDiameterSelectedChIA, MaxParticleDiameterSelectedChIA,MinParticleDiameterSelectedChIB, MaxParticleDiameterSelectedChIB,MinParticleDiameterSelectedChIC, MaxParticleDiameterSelectedChIC);
CombinedParticleCircularityArray=newArray(MinParticleCircularitySelectedChIA, MaxParticleCircularitySelectedChIA,MinParticleCircularitySelectedChIB, MaxParticleCircularitySelectedChIB,MinParticleCircularitySelectedChIC, MaxParticleCircularitySelectedChIC);
CombinedChNameI=""+NameSelectedChIA+"x"+NameSelectedChIB+"x"+NameSelectedChIC;
CombinedChNbI="_Ch"+ChIA+1+"xCh"+ChIB+1+"xCh"+ChIC+1+"_";

OutputResultsPathCombinedChI=OutputTablePath+InputFileNameiNoExt+CombinedChNbI+CombinedChNameI+"_CellCount_DetailedResult.txt";
OutputParticleImageCombinedChI=OutputImagePath+InputFileNameiNoExt+CombinedChNbI+CombinedChNameI+"_CellCount_Overlay.tif";

Array.getStatistics(CombinedParticleDiameterArray, MinParticleDiameterCombinedChI, MaxParticleDiameterCombinedChI, MeanParticleDiameterCombinedChI, StDevParticleDiameterCombinedChI);
MinParticleAreaCombinedChI=PI*MinParticleDiameterCombinedChI*MinParticleDiameterCombinedChI;
MaxParticleAreaCombinedChI=PI*MaxParticleDiameterCombinedChI*MaxParticleDiameterCombinedChI;

Array.getStatistics(CombinedParticleCircularityArray, MinParticleCircularityCombinedChI, MaxParticleCircularityCombinedChI, MeanParticleCircularityCombinedChI, StDevParticleCircularityCombinedChI);
MinParticleCircularityCombinedChIDecimal=MinParticleCircularityCombinedChI/100;
MaxParticleCircularityCombinedChIDecimal=MaxParticleCircularityCombinedChI/100;

selectWindow(NameSelectedChIA);
run("Select None");
run("Duplicate...", "title=CombinedChImage duplicate");
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChIB);
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChIC);
selectWindow("CombinedChImage");
rename(CombinedChNameI);

selectWindow(CombinedChNameI);
run("Select None");// Remove any selection
run("Remove Overlay");

// Duplicate and analyze particle show the Mask and save it as ROI
selectWindow(CombinedChNameI);
run("Duplicate...", "title=CombinedChImageForROI duplicate");
selectWindow("CombinedChImageForROI");
run("Analyze Particles...", "size=&MinParticleAreaCombinedChI-&MaxParticleAreaCombinedChI circularity=&MinParticleCircularityCombinedChIDecimal-&MaxParticleCircularityCombinedChIDecimal show=Masks in_situ");
selectWindow("CombinedChImageForROI");
run("Create Selection");
getSelectionBounds(SelectionPosX, SelectionPosY, SelectionWidth, SelectionHeight);
getDimensions(ImageWidth, ImageHeight, NbChannels, NbSlices, NbFrames); // Get dimensions of the Image
// If the selection is empty ImageJ will use X=0 Y=0 Width=Height=1 or Width=Height=MaxImageHeight
if(SelectionPosX==0 && SelectionPosY==0 && ((SelectionWidth==1 && SelectionHeight==1) || (SelectionWidth==ImageWidth && SelectionHeight==ImageHeight) )){
selectWindow("CombinedChImageForROI");
run("Select None");
makeRectangle(0, 0, 1, 1);
}
roiManager("Add");
NbROI=roiManager("count");
roiManager("Select", NbROI-1);
roiManager("Rename", CombinedChNameI);
roiManager("Set Color", "magenta");
roiManager("Set Line Width", 10);
selectWindow("CombinedChImageForROI"); // Now the ROI is saved we can close the Image
close();

// Run again the analyze Particle for the Detailed results and the overlay Image
// Run again the analyze Particle for the Detailed results and the overlay
run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack display invert redirect=None decimal=9");
selectWindow(CombinedChNameI);
run("Analyze Particles...", "size=&MinParticleAreaCombinedChI-&MaxParticleAreaCombinedChI circularity=&MinParticleCircularityCombinedChIDecimal-&MaxParticleCircularityCombinedChIDecimal show=[Overlay Masks] display summarize in_situ");
selectWindow("Results");
//Add the Label and Channel Names to the Results
if(NbOfParticles<nResults){
for(i=NbOfParticles;i<nResults;i++){
setResult("Label", i, InputFileNameiNoExt);
setResult("Channel", i, CombinedChNameI);
}
NbOfParticles=nResults;
}
selectWindow("Results");
updateResults();
selectWindow(CombinedChNameI);
run("Overlay Options...", "stroke=magenta width=1 fill=cyan apply show");
run("Labels...", "color=blue font=10 show bold");
selectWindow(CombinedChNameI);
saveAs("Tiff", OutputParticleImageCombinedChI);
close();
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Min Particle Diameter ("+RescaledUnit+")"+CellSeparator+MinParticleDiameterCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Max Particle Diameter ("+RescaledUnit+")"+CellSeparator+MaxParticleDiameterCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Min Particle Area ("+RescaledUnit+"^2)"+CellSeparator+MinParticleAreaCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Max Particle Area ("+RescaledUnit+"^2)"+CellSeparator+MaxParticleAreaCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Min Particle Circularity (0-100)"+CellSeparator+MinParticleCircularityCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Max Particle Circularity (0-100)"+CellSeparator+MaxParticleCircularityCombinedChI+LineSeparator);
}// end for ChIC
}// end for ChIB
}// for ChIA
} // End of Combine 3 Channels






///////////////////////// Combine 4 channels
///////////////////////// Combine 4 channels
if(ListSelectedCh.length>3){
for (ChIA=0; ChIA < ListSelectedCh.length-3; ChIA++){
for (ChIB=ChIA+1; ChIB < ListSelectedCh.length-2; ChIB++){
for (ChIC=ChIB+1; ChIC < ListSelectedCh.length-1; ChIC++){
for (ChID=ChIC+1; ChID < ListSelectedCh.length; ChID++){
SelectedChIA=ListSelectedCh[ChIA]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIAListPos=SelectedChIA-1; // This is the position within the array of the SelectedChIA
NameSelectedChIA=ListChNames[SelectedChIAListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIA=ListChLowerThreshold[SelectedChIAListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIA=ListChUpperThreshold[SelectedChIAListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIA=ListChRemoveNoiseStatus[SelectedChIAListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIA=ListChWatershedStatus[SelectedChIAListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIA=ListChMinParticleDiameter[SelectedChIAListPos]; // This is the particle diameter in Unit^2 for ChIA
MaxParticleDiameterSelectedChIA=ListChMaxParticleDiameter[SelectedChIAListPos]; // This is the  percentage of variation allowed around the particle diameterfor ChIA
MinParticleCircularitySelectedChIA=ListChMinParticleCircularity[SelectedChIAListPos]; // This is the particle diameter in Unit^2 for ChIA
MaxParticleCircularitySelectedChIA=ListChMaxParticleCircularity[SelectedChIAListPos]; // This is the particle diameter in Unit^2 for ChI

SelectedChIB=ListSelectedCh[ChIB]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIBListPos=SelectedChIB-1; // This is the position within the array of the SelectedChIB
NameSelectedChIB=ListChNames[SelectedChIBListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIB=ListChLowerThreshold[SelectedChIBListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIB=ListChUpperThreshold[SelectedChIBListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIB=ListChRemoveNoiseStatus[SelectedChIBListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIB=ListChWatershedStatus[SelectedChIBListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIB=ListChMinParticleDiameter[SelectedChIBListPos]; // This is the particle diameter in Unit^2 for ChIB
MaxParticleDiameterSelectedChIB=ListChMaxParticleDiameter[SelectedChIBListPos]; // This is the  percentage of variation allowed around the particle diameterfor ChIB
MinParticleCircularitySelectedChIB=ListChMinParticleCircularity[SelectedChIBListPos]; // This is the particle diameter in Unit^2 for ChIB
MaxParticleCircularitySelectedChIB=ListChMaxParticleCircularity[SelectedChIBListPos]; // This is the particle diameter in Unit^2 for ChI


SelectedChIC=ListSelectedCh[ChIC]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChICListPos=SelectedChIC-1; // This is the position within the array of the SelectedChIC
NameSelectedChIC=ListChNames[SelectedChICListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIC=ListChLowerThreshold[SelectedChICListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIC=ListChUpperThreshold[SelectedChICListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIC=ListChRemoveNoiseStatus[SelectedChICListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIC=ListChWatershedStatus[SelectedChICListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIC=ListChMinParticleDiameter[SelectedChICListPos]; // This is the particle diameter in Unit^2 for ChIC
MaxParticleDiameterSelectedChIC=ListChMaxParticleDiameter[SelectedChICListPos]; // This is the  percentage of variation allowed around the particle diameterfor ChIC
MinParticleCircularitySelectedChIC=ListChMinParticleCircularity[SelectedChICListPos]; // This is the particle diameter in Unit^2 for ChIC
MaxParticleCircularitySelectedChIC=ListChMaxParticleCircularity[SelectedChICListPos]; // This is the particle diameter in Unit^2 for ChI

SelectedChID=ListSelectedCh[ChID]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIDListPos=SelectedChID-1; // This is the position within the array of the
NameSelectedChID=ListChNames[SelectedChIDListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChID=ListChLowerThreshold[SelectedChIDListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChID=ListChUpperThreshold[SelectedChIDListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChID=ListChRemoveNoiseStatus[SelectedChIDListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChID=ListChWatershedStatus[SelectedChIDListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChID=ListChMinParticleDiameter[SelectedChIDListPos]; // This is the particle diameter in Unit^2 for
MaxParticleDiameterSelectedChID=ListChMaxParticleDiameter[SelectedChIDListPos]; // This is the  percentage of variation allowed around the particle diameterfor
MinParticleCircularitySelectedChID=ListChMinParticleCircularity[SelectedChIDListPos]; // This is the particle diameter in Unit^2 for
MaxParticleCircularitySelectedChID=ListChMaxParticleCircularity[SelectedChIDListPos]; // This is the particle diameter in Unit^2 for ChI


CombinedParticleDiameterArray=newArray(MinParticleDiameterSelectedChIA, MaxParticleDiameterSelectedChIA,MinParticleDiameterSelectedChIB, MaxParticleDiameterSelectedChIB,MinParticleDiameterSelectedChIC, MaxParticleDiameterSelectedChIC,MinParticleDiameterSelectedChID, MaxParticleDiameterSelectedChID);
CombinedParticleCircularityArray=newArray(MinParticleCircularitySelectedChIA, MaxParticleCircularitySelectedChIA,MinParticleCircularitySelectedChIB, MaxParticleCircularitySelectedChIB,MinParticleCircularitySelectedChIC, MaxParticleCircularitySelectedChIC,MinParticleCircularitySelectedChID, MaxParticleCircularitySelectedChID);
CombinedChNameI=""+NameSelectedChIA+"x"+NameSelectedChIB+"x"+NameSelectedChIC+"x"+NameSelectedChID;
CombinedChNbI="_Ch"+ChIA+1+"xCh"+ChIB+1+"xCh"+ChIC+1+"xCh"+ChID+1+"_";

OutputResultsPathCombinedChI=OutputTablePath+InputFileNameiNoExt+CombinedChNbI+CombinedChNameI+"_CellCount_DetailedResult.txt";
OutputParticleImageCombinedChI=OutputImagePath+InputFileNameiNoExt+CombinedChNbI+CombinedChNameI+"_CellCount_Overlay.tif";

Array.getStatistics(CombinedParticleDiameterArray, MinParticleDiameterCombinedChI, MaxParticleDiameterCombinedChI, MeanParticleDiameterCombinedChI, StDevParticleDiameterCombinedChI);
MinParticleAreaCombinedChI=PI*MinParticleDiameterCombinedChI*MinParticleDiameterCombinedChI;
MaxParticleAreaCombinedChI=PI*MaxParticleDiameterCombinedChI*MaxParticleDiameterCombinedChI;

Array.getStatistics(CombinedParticleCircularityArray, MinParticleCircularityCombinedChI, MaxParticleCircularityCombinedChI, MeanParticleCircularityCombinedChI, StDevParticleCircularityCombinedChI);
MinParticleCircularityCombinedChIDecimal=MinParticleCircularityCombinedChI/100;
MaxParticleCircularityCombinedChIDecimal=MaxParticleCircularityCombinedChI/100;

selectWindow(NameSelectedChIA);
run("Select None");
run("Duplicate...", "title=CombinedChImage duplicate");
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChIB);
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChIC);
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChID);
selectWindow("CombinedChImage");
rename(CombinedChNameI);

selectWindow(CombinedChNameI);
run("Select None");// Remove any selection
run("Remove Overlay");

// Duplicate and analyze particle show the Mask and save it as ROI
selectWindow(CombinedChNameI);
run("Duplicate...", "title=CombinedChImageForROI duplicate");
selectWindow("CombinedChImageForROI");
run("Analyze Particles...", "size=&MinParticleAreaCombinedChI-&MaxParticleAreaCombinedChI circularity=&MinParticleCircularityCombinedChIDecimal-&MaxParticleCircularityCombinedChIDecimal show=Masks in_situ");
selectWindow("CombinedChImageForROI");
run("Create Selection");
getSelectionBounds(SelectionPosX, SelectionPosY, SelectionWidth, SelectionHeight);
getDimensions(ImageWidth, ImageHeight, NbChannels, NbSlices, NbFrames); // Get dimensions of the Image
// If the selection is empty ImageJ will use X=0 Y=0 Width=Height=1 or Width=Height=MaxImageHeight
if(SelectionPosX==0 && SelectionPosY==0 && ((SelectionWidth==1 && SelectionHeight==1) || (SelectionWidth==ImageWidth && SelectionHeight==ImageHeight) )){
selectWindow("CombinedChImageForROI");
run("Select None");
makeRectangle(0, 0, 1, 1);
}
roiManager("Add");
NbROI=roiManager("count");
roiManager("Select", NbROI-1);
roiManager("Rename", CombinedChNameI);
roiManager("Set Color", "magenta");
roiManager("Set Line Width", 10);
selectWindow("CombinedChImageForROI"); // Now the ROI is saved we can close the Image
close();

// Run again the analyze Particle for the Detailed results and the overlay Image
// Run again the analyze Particle for the Detailed results and the overlay
run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack display invert redirect=None decimal=9");
selectWindow(CombinedChNameI);
run("Analyze Particles...", "size=&MinParticleAreaCombinedChI-&MaxParticleAreaCombinedChI circularity=&MinParticleCircularityCombinedChIDecimal-&MaxParticleCircularityCombinedChIDecimal show=[Overlay Masks] display summarize in_situ");
selectWindow("Results");
//Add the Label and Channel Names to the Results
if(NbOfParticles<nResults){
for(i=NbOfParticles;i<nResults;i++){
setResult("Label", i, InputFileNameiNoExt);
setResult("Channel", i, CombinedChNameI);
}
NbOfParticles=nResults;
}
selectWindow("Results");
updateResults();
selectWindow(CombinedChNameI);
run("Overlay Options...", "stroke=magenta width=1 fill=cyan apply show");
run("Labels...", "color=blue font=10 show bold");
selectWindow(CombinedChNameI);
saveAs("Tiff", OutputParticleImageCombinedChI);
close();
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Min Particle Diameter ("+RescaledUnit+")"+CellSeparator+MinParticleDiameterCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Max Particle Diameter ("+RescaledUnit+")"+CellSeparator+MaxParticleDiameterCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Min Particle Area ("+RescaledUnit+"^2)"+CellSeparator+MinParticleAreaCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Max Particle Area ("+RescaledUnit+"^2)"+CellSeparator+MaxParticleAreaCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Min Particle Circularity (0-100)"+CellSeparator+MinParticleCircularityCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Max Particle Circularity (0-100)"+CellSeparator+MaxParticleCircularityCombinedChI+LineSeparator);
}// end for ChID
}// end for ChIC
}// end for ChIB
}// for ChIA
} // End of Combine 4 selected channels



///////////////////////// Combine 5 channels
///////////////////////// Combine 5 channels
if(ListSelectedCh.length>4){
for (ChIA=0; ChIA < ListSelectedCh.length-4; ChIA++){
for (ChIB=ChIA+1; ChIB < ListSelectedCh.length-3; ChIB++){
for (ChIC=ChIB+1; ChIC < ListSelectedCh.length-2; ChIC++){
for (ChID=ChIC+1; ChID < ListSelectedCh.length-1; ChID++){
for (ChIE=ChID+1; ChIE < ListSelectedCh.length; ChIE++){
SelectedChIA=ListSelectedCh[ChIA]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIAListPos=SelectedChIA-1; // This is the position within the array of the SelectedChIA
NameSelectedChIA=ListChNames[SelectedChIAListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIA=ListChLowerThreshold[SelectedChIAListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIA=ListChUpperThreshold[SelectedChIAListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIA=ListChRemoveNoiseStatus[SelectedChIAListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIA=ListChWatershedStatus[SelectedChIAListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIA=ListChMinParticleDiameter[SelectedChIAListPos]; // This is the particle diameter in Unit^2 for ChIA
MaxParticleDiameterSelectedChIA=ListChMaxParticleDiameter[SelectedChIAListPos]; // This is the  percentage of variation allowed around the particle diameterfor ChIA
MinParticleCircularitySelectedChIA=ListChMinParticleCircularity[SelectedChIAListPos]; // This is the particle diameter in Unit^2 for ChIA
MaxParticleCircularitySelectedChIA=ListChMaxParticleCircularity[SelectedChIAListPos]; // This is the particle diameter in Unit^2 for ChI

SelectedChIB=ListSelectedCh[ChIB]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIBListPos=SelectedChIB-1; // This is the position within the array of the SelectedChIB
NameSelectedChIB=ListChNames[SelectedChIBListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIB=ListChLowerThreshold[SelectedChIBListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIB=ListChUpperThreshold[SelectedChIBListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIB=ListChRemoveNoiseStatus[SelectedChIBListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIB=ListChWatershedStatus[SelectedChIBListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIB=ListChMinParticleDiameter[SelectedChIBListPos]; // This is the particle diameter in Unit^2 for ChIB
MaxParticleDiameterSelectedChIB=ListChMaxParticleDiameter[SelectedChIBListPos]; // This is the  percentage of variation allowed around the particle diameterfor ChIB
MinParticleCircularitySelectedChIB=ListChMinParticleCircularity[SelectedChIBListPos]; // This is the particle diameter in Unit^2 for ChIB
MaxParticleCircularitySelectedChIB=ListChMaxParticleCircularity[SelectedChIBListPos]; // This is the particle diameter in Unit^2 for ChI


SelectedChIC=ListSelectedCh[ChIC]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChICListPos=SelectedChIC-1; // This is the position within the array of the SelectedChIC
NameSelectedChIC=ListChNames[SelectedChICListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIC=ListChLowerThreshold[SelectedChICListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIC=ListChUpperThreshold[SelectedChICListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIC=ListChRemoveNoiseStatus[SelectedChICListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIC=ListChWatershedStatus[SelectedChICListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIC=ListChMinParticleDiameter[SelectedChICListPos]; // This is the particle diameter in Unit^2 for ChIC
MaxParticleDiameterSelectedChIC=ListChMaxParticleDiameter[SelectedChICListPos]; // This is the  percentage of variation allowed around the particle diameterfor ChIC
MinParticleCircularitySelectedChIC=ListChMinParticleCircularity[SelectedChICListPos]; // This is the particle diameter in Unit^2 for ChIC
MaxParticleCircularitySelectedChIC=ListChMaxParticleCircularity[SelectedChICListPos]; // This is the particle diameter in Unit^2 for ChI

SelectedChID=ListSelectedCh[ChID]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIDListPos=SelectedChID-1; // This is the position within the array of the
NameSelectedChID=ListChNames[SelectedChIDListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChID=ListChLowerThreshold[SelectedChIDListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChID=ListChUpperThreshold[SelectedChIDListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChID=ListChRemoveNoiseStatus[SelectedChIDListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChID=ListChWatershedStatus[SelectedChIDListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChID=ListChMinParticleDiameter[SelectedChIDListPos]; // This is the particle diameter in Unit^2 for
MaxParticleDiameterSelectedChID=ListChMaxParticleDiameter[SelectedChIDListPos]; // This is the  percentage of variation allowed around the particle diameterfor
MinParticleCircularitySelectedChID=ListChMinParticleCircularity[SelectedChIDListPos]; // This is the particle diameter in Unit^2 for
MaxParticleCircularitySelectedChID=ListChMaxParticleCircularity[SelectedChIDListPos]; // This is the particle diameter in Unit^2 for ChI

SelectedChIE=ListSelectedCh[ChIE]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIEListPos=SelectedChIE-1; // This is the position within the array of the
NameSelectedChIE=ListChNames[SelectedChIEListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIE=ListChLowerThreshold[SelectedChIEListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIE=ListChUpperThreshold[SelectedChIEListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIE=ListChRemoveNoiseStatus[SelectedChIEListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIE=ListChWatershedStatus[SelectedChIEListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIE=ListChMinParticleDiameter[SelectedChIEListPos]; // This is the particle diameter in Unit^2 for
MaxParticleDiameterSelectedChIE=ListChMaxParticleDiameter[SelectedChIEListPos]; // This is the  percentage of variation allowed around the particle diameterfor
MinParticleCircularitySelectedChIE=ListChMinParticleCircularity[SelectedChIEListPos]; // This is the particle diameter in Unit^2 for
MaxParticleCircularitySelectedChIE=ListChMaxParticleCircularity[SelectedChIEListPos]; // This is the particle diameter in Unit^2 for ChI

CombinedParticleDiameterArray=newArray(MinParticleDiameterSelectedChIA, MaxParticleDiameterSelectedChIA,MinParticleDiameterSelectedChIB, MaxParticleDiameterSelectedChIB,MinParticleDiameterSelectedChIC, MaxParticleDiameterSelectedChIC,MinParticleDiameterSelectedChID, MaxParticleDiameterSelectedChID,MinParticleDiameterSelectedChIE, MaxParticleDiameterSelectedChIE);
CombinedParticleCircularityArray=newArray(MinParticleCircularitySelectedChIA, MaxParticleCircularitySelectedChIA,MinParticleCircularitySelectedChIB, MaxParticleCircularitySelectedChIB,MinParticleCircularitySelectedChIC, MaxParticleCircularitySelectedChIC,MinParticleCircularitySelectedChID, MaxParticleCircularitySelectedChID,MinParticleCircularitySelectedChIE, MaxParticleCircularitySelectedChIE);
CombinedChNameI=""+NameSelectedChIA+"x"+NameSelectedChIB+"x"+NameSelectedChIC+"x"+NameSelectedChID+"x"+NameSelectedChIE;
CombinedChNbI="_Ch"+ChIA+1+"xCh"+ChIB+1+"xCh"+ChIC+1+"xCh"+ChID+1+"xCh"+ChIE+1+"_";

OutputResultsPathCombinedChI=OutputTablePath+InputFileNameiNoExt+CombinedChNbI+CombinedChNameI+"_CellCount_DetailedResult.txt";
OutputParticleImageCombinedChI=OutputImagePath+InputFileNameiNoExt+CombinedChNbI+CombinedChNameI+"_CellCount_Overlay.tif";

Array.getStatistics(CombinedParticleDiameterArray, MinParticleDiameterCombinedChI, MaxParticleDiameterCombinedChI, MeanParticleDiameterCombinedChI, StDevParticleDiameterCombinedChI);
MinParticleAreaCombinedChI=PI*MinParticleDiameterCombinedChI*MinParticleDiameterCombinedChI;
MaxParticleAreaCombinedChI=PI*MaxParticleDiameterCombinedChI*MaxParticleDiameterCombinedChI;

Array.getStatistics(CombinedParticleCircularityArray, MinParticleCircularityCombinedChI, MaxParticleCircularityCombinedChI, MeanParticleCircularityCombinedChI, StDevParticleCircularityCombinedChI);
MinParticleCircularityCombinedChIDecimal=MinParticleCircularityCombinedChI/100;
MaxParticleCircularityCombinedChIDecimal=MaxParticleCircularityCombinedChI/100;

selectWindow(NameSelectedChIA);
run("Select None");
run("Duplicate...", "title=CombinedChImage duplicate");
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChIB);
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChIC);
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChID);
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChIE);
selectWindow("CombinedChImage");
rename(CombinedChNameI);

selectWindow(CombinedChNameI);
run("Select None");// Remove any selection
run("Remove Overlay");

// Duplicate and analyze particle show the Mask and save it as ROI
selectWindow(CombinedChNameI);
run("Duplicate...", "title=CombinedChImageForROI duplicate");
selectWindow("CombinedChImageForROI");
run("Analyze Particles...", "size=&MinParticleAreaCombinedChI-&MaxParticleAreaCombinedChI circularity=&MinParticleCircularityCombinedChIDecimal-&MaxParticleCircularityCombinedChIDecimal show=Masks in_situ");
selectWindow("CombinedChImageForROI");
run("Create Selection");
getSelectionBounds(SelectionPosX, SelectionPosY, SelectionWidth, SelectionHeight);
getDimensions(ImageWidth, ImageHeight, NbChannels, NbSlices, NbFrames); // Get dimensions of the Image
// If the selection is empty ImageJ will use X=0 Y=0 Width=Height=1 or Width=Height=MaxImageHeight
if(SelectionPosX==0 && SelectionPosY==0 && ((SelectionWidth==1 && SelectionHeight==1) || (SelectionWidth==ImageWidth && SelectionHeight==ImageHeight) )){
selectWindow("CombinedChImageForROI");
run("Select None");
makeRectangle(0, 0, 1, 1);
}
roiManager("Add");
NbROI=roiManager("count");
roiManager("Select", NbROI-1);
roiManager("Rename", CombinedChNameI);
roiManager("Set Color", "magenta");
roiManager("Set Line Width", 10);
selectWindow("CombinedChImageForROI"); // Now the ROI is saved we can close the Image
close();

// Run again the analyze Particle for the Detailed results and the overlay Image
// Run again the analyze Particle for the Detailed results and the overlay
run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack display invert redirect=None decimal=9");
selectWindow(CombinedChNameI);
run("Analyze Particles...", "size=&MinParticleAreaCombinedChI-&MaxParticleAreaCombinedChI circularity=&MinParticleCircularityCombinedChIDecimal-&MaxParticleCircularityCombinedChIDecimal show=[Overlay Masks] display summarize in_situ");
selectWindow("Results");
//Add the Label and Channel Names to the Results
if(NbOfParticles<nResults){
for(i=NbOfParticles;i<nResults;i++){
setResult("Label", i, InputFileNameiNoExt);
setResult("Channel", i, CombinedChNameI);
}
NbOfParticles=nResults;
}
selectWindow("Results");
updateResults();
selectWindow(CombinedChNameI);
run("Overlay Options...", "stroke=magenta width=1 fill=cyan apply show");
run("Labels...", "color=blue font=10 show bold");
selectWindow(CombinedChNameI);
saveAs("Tiff", OutputParticleImageCombinedChI);
close();
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Min Particle Diameter ("+RescaledUnit+")"+CellSeparator+MinParticleDiameterCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Max Particle Diameter ("+RescaledUnit+")"+CellSeparator+MaxParticleDiameterCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Min Particle Area ("+RescaledUnit+"^2)"+CellSeparator+MinParticleAreaCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Max Particle Area ("+RescaledUnit+"^2)"+CellSeparator+MaxParticleAreaCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Min Particle Circularity (0-100)"+CellSeparator+MinParticleCircularityCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Max Particle Circularity (0-100)"+CellSeparator+MaxParticleCircularityCombinedChI+LineSeparator);
}// end for ChIE
}// end for ChID
}// end for ChIC
}// end for ChIB
}// for ChIA
} // End of Combine 5 selected channels



///////////////////////// Combine 6 channels
///////////////////////// Combine 6 channels
if(ListSelectedCh.length>5){
for (ChIA=0; ChIA < ListSelectedCh.length-5; ChIA++){
for (ChIB=ChIA+1; ChIB < ListSelectedCh.length-4; ChIB++){
for (ChIC=ChIB+1; ChIC < ListSelectedCh.length-3; ChIC++){
for (ChID=ChIC+1; ChID < ListSelectedCh.length-2; ChID++){
for (ChIE=ChID+1; ChIE < ListSelectedCh.length-1; ChIE++){
for (ChIF=ChIE+1; ChIF < ListSelectedCh.length; ChIF++){
SelectedChIA=ListSelectedCh[ChIA]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIAListPos=SelectedChIA-1; // This is the position within the array of the SelectedChIA
NameSelectedChIA=ListChNames[SelectedChIAListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIA=ListChLowerThreshold[SelectedChIAListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIA=ListChUpperThreshold[SelectedChIAListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIA=ListChRemoveNoiseStatus[SelectedChIAListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIA=ListChWatershedStatus[SelectedChIAListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIA=ListChMinParticleDiameter[SelectedChIAListPos]; // This is the particle diameter in Unit^2 for ChIA
MaxParticleDiameterSelectedChIA=ListChMaxParticleDiameter[SelectedChIAListPos]; // This is the  percentage of variation allowed around the particle diameterfor ChIA
MinParticleCircularitySelectedChIA=ListChMinParticleCircularity[SelectedChIAListPos]; // This is the particle diameter in Unit^2 for ChIA
MaxParticleCircularitySelectedChIA=ListChMaxParticleCircularity[SelectedChIAListPos]; // This is the particle diameter in Unit^2 for ChI

SelectedChIB=ListSelectedCh[ChIB]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIBListPos=SelectedChIB-1; // This is the position within the array of the SelectedChIB
NameSelectedChIB=ListChNames[SelectedChIBListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIB=ListChLowerThreshold[SelectedChIBListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIB=ListChUpperThreshold[SelectedChIBListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIB=ListChRemoveNoiseStatus[SelectedChIBListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIB=ListChWatershedStatus[SelectedChIBListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIB=ListChMinParticleDiameter[SelectedChIBListPos]; // This is the particle diameter in Unit^2 for ChIB
MaxParticleDiameterSelectedChIB=ListChMaxParticleDiameter[SelectedChIBListPos]; // This is the  percentage of variation allowed around the particle diameterfor ChIB
MinParticleCircularitySelectedChIB=ListChMinParticleCircularity[SelectedChIBListPos]; // This is the particle diameter in Unit^2 for ChIB
MaxParticleCircularitySelectedChIB=ListChMaxParticleCircularity[SelectedChIBListPos]; // This is the particle diameter in Unit^2 for ChI


SelectedChIC=ListSelectedCh[ChIC]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChICListPos=SelectedChIC-1; // This is the position within the array of the SelectedChIC
NameSelectedChIC=ListChNames[SelectedChICListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIC=ListChLowerThreshold[SelectedChICListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIC=ListChUpperThreshold[SelectedChICListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIC=ListChRemoveNoiseStatus[SelectedChICListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIC=ListChWatershedStatus[SelectedChICListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIC=ListChMinParticleDiameter[SelectedChICListPos]; // This is the particle diameter in Unit^2 for ChIC
MaxParticleDiameterSelectedChIC=ListChMaxParticleDiameter[SelectedChICListPos]; // This is the  percentage of variation allowed around the particle diameterfor ChIC
MinParticleCircularitySelectedChIC=ListChMinParticleCircularity[SelectedChICListPos]; // This is the particle diameter in Unit^2 for ChIC
MaxParticleCircularitySelectedChIC=ListChMaxParticleCircularity[SelectedChICListPos]; // This is the particle diameter in Unit^2 for ChI

SelectedChID=ListSelectedCh[ChID]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIDListPos=SelectedChID-1; // This is the position within the array of the
NameSelectedChID=ListChNames[SelectedChIDListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChID=ListChLowerThreshold[SelectedChIDListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChID=ListChUpperThreshold[SelectedChIDListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChID=ListChRemoveNoiseStatus[SelectedChIDListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChID=ListChWatershedStatus[SelectedChIDListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChID=ListChMinParticleDiameter[SelectedChIDListPos]; // This is the particle diameter in Unit^2 for
MaxParticleDiameterSelectedChID=ListChMaxParticleDiameter[SelectedChIDListPos]; // This is the  percentage of variation allowed around the particle diameterfor
MinParticleCircularitySelectedChID=ListChMinParticleCircularity[SelectedChIDListPos]; // This is the particle diameter in Unit^2 for
MaxParticleCircularitySelectedChID=ListChMaxParticleCircularity[SelectedChIDListPos]; // This is the particle diameter in Unit^2 for ChI

SelectedChIE=ListSelectedCh[ChIE]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIEListPos=SelectedChIE-1; // This is the position within the array of the
NameSelectedChIE=ListChNames[SelectedChIEListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIE=ListChLowerThreshold[SelectedChIEListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIE=ListChUpperThreshold[SelectedChIEListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIE=ListChRemoveNoiseStatus[SelectedChIEListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIE=ListChWatershedStatus[SelectedChIEListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIE=ListChMinParticleDiameter[SelectedChIEListPos]; // This is the particle diameter in Unit^2 for
MaxParticleDiameterSelectedChIE=ListChMaxParticleDiameter[SelectedChIEListPos]; // This is the  percentage of variation allowed around the particle diameterfor
MinParticleCircularitySelectedChIE=ListChMinParticleCircularity[SelectedChIEListPos]; // This is the particle diameter in Unit^2 for
MaxParticleCircularitySelectedChIE=ListChMaxParticleCircularity[SelectedChIEListPos]; // This is the particle diameter in Unit^2 for ChI

SelectedChIF=ListSelectedCh[ChIF]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIFListPos=SelectedChIF-1; // This is the position within the array of the
NameSelectedChIF=ListChNames[SelectedChIFListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIF=ListChLowerThreshold[SelectedChIFListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIF=ListChUpperThreshold[SelectedChIFListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIF=ListChRemoveNoiseStatus[SelectedChIFListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIF=ListChWatershedStatus[SelectedChIFListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIF=ListChMinParticleDiameter[SelectedChIFListPos]; // This is the particle diameter in Unit^2 for
MaxParticleDiameterSelectedChIF=ListChMaxParticleDiameter[SelectedChIFListPos]; // This is the  percentage of variation allowed around the particle diameterfor
MinParticleCircularitySelectedChIF=ListChMinParticleCircularity[SelectedChIFListPos]; // This is the particle diameter in Unit^2 for
MaxParticleCircularitySelectedChIF=ListChMaxParticleCircularity[SelectedChIFListPos]; // This is the particle diameter in Unit^2 for ChI

CombinedParticleDiameterArray=newArray(MinParticleDiameterSelectedChIA, MaxParticleDiameterSelectedChIA,MinParticleDiameterSelectedChIB, MaxParticleDiameterSelectedChIB,MinParticleDiameterSelectedChIC, MaxParticleDiameterSelectedChIC,MinParticleDiameterSelectedChID, MaxParticleDiameterSelectedChID,MinParticleDiameterSelectedChIE, MaxParticleDiameterSelectedChIE,MinParticleDiameterSelectedChIF, MaxParticleDiameterSelectedChIF);
CombinedParticleCircularityArray=newArray(MinParticleCircularitySelectedChIA, MaxParticleCircularitySelectedChIA,MinParticleCircularitySelectedChIB, MaxParticleCircularitySelectedChIB,MinParticleCircularitySelectedChIC, MaxParticleCircularitySelectedChIC,MinParticleCircularitySelectedChID, MaxParticleCircularitySelectedChID,MinParticleCircularitySelectedChIE, MaxParticleCircularitySelectedChIE,MinParticleCircularitySelectedChIF, MaxParticleCircularitySelectedChIF);
CombinedChNameI=""+NameSelectedChIA+"x"+NameSelectedChIB+"x"+NameSelectedChIC+"x"+NameSelectedChID+"x"+NameSelectedChIE+"x"+NameSelectedChIF;
CombinedChNbI="_Ch"+ChIA+1+"xCh"+ChIB+1+"xCh"+ChIC+1+"xCh"+ChID+1+"xCh"+ChIE+1+"xCh"+ChIF+1+"_";

OutputResultsPathCombinedChI=OutputTablePath+InputFileNameiNoExt+CombinedChNbI+CombinedChNameI+"_CellCount_DetailedResult.txt";
OutputParticleImageCombinedChI=OutputImagePath+InputFileNameiNoExt+CombinedChNbI+CombinedChNameI+"_CellCount_Overlay.tif";

Array.getStatistics(CombinedParticleDiameterArray, MinParticleDiameterCombinedChI, MaxParticleDiameterCombinedChI, MeanParticleDiameterCombinedChI, StDevParticleDiameterCombinedChI);
MinParticleAreaCombinedChI=PI*MinParticleDiameterCombinedChI*MinParticleDiameterCombinedChI;
MaxParticleAreaCombinedChI=PI*MaxParticleDiameterCombinedChI*MaxParticleDiameterCombinedChI;

Array.getStatistics(CombinedParticleCircularityArray, MinParticleCircularityCombinedChI, MaxParticleCircularityCombinedChI, MeanParticleCircularityCombinedChI, StDevParticleCircularityCombinedChI);
MinParticleCircularityCombinedChIDecimal=MinParticleCircularityCombinedChI/100;
MaxParticleCircularityCombinedChIDecimal=MaxParticleCircularityCombinedChI/100;

selectWindow(NameSelectedChIA);
run("Select None");
run("Duplicate...", "title=CombinedChImage duplicate");
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChIB);
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChIC);
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChID);
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChIE);
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChIF);
selectWindow("CombinedChImage");
rename(CombinedChNameI);

selectWindow(CombinedChNameI);
run("Select None");// Remove any selection
run("Remove Overlay");

// Duplicate and analyze particle show the Mask and save it as ROI
selectWindow(CombinedChNameI);
run("Duplicate...", "title=CombinedChImageForROI duplicate");
selectWindow("CombinedChImageForROI");
run("Analyze Particles...", "size=&MinParticleAreaCombinedChI-&MaxParticleAreaCombinedChI circularity=&MinParticleCircularityCombinedChIDecimal-&MaxParticleCircularityCombinedChIDecimal show=Masks in_situ");
selectWindow("CombinedChImageForROI");
run("Create Selection");
getSelectionBounds(SelectionPosX, SelectionPosY, SelectionWidth, SelectionHeight);
getDimensions(ImageWidth, ImageHeight, NbChannels, NbSlices, NbFrames); // Get dimensions of the Image
// If the selection is empty ImageJ will use X=0 Y=0 Width=Height=1 or Width=Height=MaxImageHeight
if(SelectionPosX==0 && SelectionPosY==0 && ((SelectionWidth==1 && SelectionHeight==1) || (SelectionWidth==ImageWidth && SelectionHeight==ImageHeight) )){
selectWindow("CombinedChImageForROI");
run("Select None");
makeRectangle(0, 0, 1, 1);
}
roiManager("Add");
NbROI=roiManager("count");
roiManager("Select", NbROI-1);
roiManager("Rename", CombinedChNameI);
roiManager("Set Color", "magenta");
roiManager("Set Line Width", 10);
selectWindow("CombinedChImageForROI"); // Now the ROI is saved we can close the Image
close();

// Run again the analyze Particle for the Detailed results and the overlay Image
// Run again the analyze Particle for the Detailed results and the overlay
run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack display invert redirect=None decimal=9");
selectWindow(CombinedChNameI);
run("Analyze Particles...", "size=&MinParticleAreaCombinedChI-&MaxParticleAreaCombinedChI circularity=&MinParticleCircularityCombinedChIDecimal-&MaxParticleCircularityCombinedChIDecimal show=[Overlay Masks] display summarize in_situ");
selectWindow("Results");
//Add the Label and Channel Names to the Results
if(NbOfParticles<nResults){
for(i=NbOfParticles;i<nResults;i++){
setResult("Label", i, InputFileNameiNoExt);
setResult("Channel", i, CombinedChNameI);
}
NbOfParticles=nResults;
}
selectWindow("Results");
updateResults();
selectWindow(CombinedChNameI);
run("Overlay Options...", "stroke=magenta width=1 fill=cyan apply show");
run("Labels...", "color=blue font=10 show bold");
selectWindow(CombinedChNameI);
saveAs("Tiff", OutputParticleImageCombinedChI);
close();
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Min Particle Diameter ("+RescaledUnit+")"+CellSeparator+MinParticleDiameterCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Max Particle Diameter ("+RescaledUnit+")"+CellSeparator+MaxParticleDiameterCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Min Particle Area ("+RescaledUnit+"^2)"+CellSeparator+MinParticleAreaCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Max Particle Area ("+RescaledUnit+"^2)"+CellSeparator+MaxParticleAreaCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Min Particle Circularity (0-100)"+CellSeparator+MinParticleCircularityCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Max Particle Circularity (0-100)"+CellSeparator+MaxParticleCircularityCombinedChI+LineSeparator);
}// end for ChIF
}// end for ChIE
}// end for ChID
}// end for ChIC
}// end for ChIB
}// for ChIA
} // End of Combine 6 selected channels




///////////////////////// Combine 7 channels
///////////////////////// Combine 7 channels
if(ListSelectedCh.length>6){
for (ChIA=0; ChIA < ListSelectedCh.length-6; ChIA++){
for (ChIB=ChIA+1; ChIB < ListSelectedCh.length-5; ChIB++){
for (ChIC=ChIB+1; ChIC < ListSelectedCh.length-4; ChIC++){
for (ChID=ChIC+1; ChID < ListSelectedCh.length-3; ChID++){
for (ChIE=ChID+1; ChIE < ListSelectedCh.length-2; ChIE++){
for (ChIF=ChIE+1; ChIF < ListSelectedCh.length-1; ChIF++){
for (ChIG=ChIF+1; ChIG < ListSelectedCh.length; ChIG++){
SelectedChIA=ListSelectedCh[ChIA]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIAListPos=SelectedChIA-1; // This is the position within the array of the SelectedChIA
NameSelectedChIA=ListChNames[SelectedChIAListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIA=ListChLowerThreshold[SelectedChIAListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIA=ListChUpperThreshold[SelectedChIAListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIA=ListChRemoveNoiseStatus[SelectedChIAListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIA=ListChWatershedStatus[SelectedChIAListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIA=ListChMinParticleDiameter[SelectedChIAListPos]; // This is the particle diameter in Unit^2 for ChIA
MaxParticleDiameterSelectedChIA=ListChMaxParticleDiameter[SelectedChIAListPos]; // This is the  percentage of variation allowed around the particle diameterfor ChIA
MinParticleCircularitySelectedChIA=ListChMinParticleCircularity[SelectedChIAListPos]; // This is the particle diameter in Unit^2 for ChIA
MaxParticleCircularitySelectedChIA=ListChMaxParticleCircularity[SelectedChIAListPos]; // This is the particle diameter in Unit^2 for ChI

SelectedChIB=ListSelectedCh[ChIB]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIBListPos=SelectedChIB-1; // This is the position within the array of the SelectedChIB
NameSelectedChIB=ListChNames[SelectedChIBListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIB=ListChLowerThreshold[SelectedChIBListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIB=ListChUpperThreshold[SelectedChIBListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIB=ListChRemoveNoiseStatus[SelectedChIBListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIB=ListChWatershedStatus[SelectedChIBListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIB=ListChMinParticleDiameter[SelectedChIBListPos]; // This is the particle diameter in Unit^2 for ChIB
MaxParticleDiameterSelectedChIB=ListChMaxParticleDiameter[SelectedChIBListPos]; // This is the  percentage of variation allowed around the particle diameterfor ChIB
MinParticleCircularitySelectedChIB=ListChMinParticleCircularity[SelectedChIBListPos]; // This is the particle diameter in Unit^2 for ChIB
MaxParticleCircularitySelectedChIB=ListChMaxParticleCircularity[SelectedChIBListPos]; // This is the particle diameter in Unit^2 for ChI


SelectedChIC=ListSelectedCh[ChIC]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChICListPos=SelectedChIC-1; // This is the position within the array of the SelectedChIC
NameSelectedChIC=ListChNames[SelectedChICListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIC=ListChLowerThreshold[SelectedChICListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIC=ListChUpperThreshold[SelectedChICListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIC=ListChRemoveNoiseStatus[SelectedChICListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIC=ListChWatershedStatus[SelectedChICListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIC=ListChMinParticleDiameter[SelectedChICListPos]; // This is the particle diameter in Unit^2 for ChIC
MaxParticleDiameterSelectedChIC=ListChMaxParticleDiameter[SelectedChICListPos]; // This is the  percentage of variation allowed around the particle diameterfor ChIC
MinParticleCircularitySelectedChIC=ListChMinParticleCircularity[SelectedChICListPos]; // This is the particle diameter in Unit^2 for ChIC
MaxParticleCircularitySelectedChIC=ListChMaxParticleCircularity[SelectedChICListPos]; // This is the particle diameter in Unit^2 for ChI

SelectedChID=ListSelectedCh[ChID]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIDListPos=SelectedChID-1; // This is the position within the array of the
NameSelectedChID=ListChNames[SelectedChIDListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChID=ListChLowerThreshold[SelectedChIDListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChID=ListChUpperThreshold[SelectedChIDListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChID=ListChRemoveNoiseStatus[SelectedChIDListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChID=ListChWatershedStatus[SelectedChIDListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChID=ListChMinParticleDiameter[SelectedChIDListPos]; // This is the particle diameter in Unit^2 for
MaxParticleDiameterSelectedChID=ListChMaxParticleDiameter[SelectedChIDListPos]; // This is the  percentage of variation allowed around the particle diameterfor
MinParticleCircularitySelectedChID=ListChMinParticleCircularity[SelectedChIDListPos]; // This is the particle diameter in Unit^2 for
MaxParticleCircularitySelectedChID=ListChMaxParticleCircularity[SelectedChIDListPos]; // This is the particle diameter in Unit^2 for ChI

SelectedChIE=ListSelectedCh[ChIE]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIEListPos=SelectedChIE-1; // This is the position within the array of the
NameSelectedChIE=ListChNames[SelectedChIEListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIE=ListChLowerThreshold[SelectedChIEListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIE=ListChUpperThreshold[SelectedChIEListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIE=ListChRemoveNoiseStatus[SelectedChIEListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIE=ListChWatershedStatus[SelectedChIEListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIE=ListChMinParticleDiameter[SelectedChIEListPos]; // This is the particle diameter in Unit^2 for
MaxParticleDiameterSelectedChIE=ListChMaxParticleDiameter[SelectedChIEListPos]; // This is the  percentage of variation allowed around the particle diameterfor
MinParticleCircularitySelectedChIE=ListChMinParticleCircularity[SelectedChIEListPos]; // This is the particle diameter in Unit^2 for
MaxParticleCircularitySelectedChIE=ListChMaxParticleCircularity[SelectedChIEListPos]; // This is the particle diameter in Unit^2 for ChI

SelectedChIF=ListSelectedCh[ChIF]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIFListPos=SelectedChIF-1; // This is the position within the array of the
NameSelectedChIF=ListChNames[SelectedChIFListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIF=ListChLowerThreshold[SelectedChIFListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIF=ListChUpperThreshold[SelectedChIFListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIF=ListChRemoveNoiseStatus[SelectedChIFListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIF=ListChWatershedStatus[SelectedChIFListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIF=ListChMinParticleDiameter[SelectedChIFListPos]; // This is the particle diameter in Unit^2 for
MaxParticleDiameterSelectedChIF=ListChMaxParticleDiameter[SelectedChIFListPos]; // This is the  percentage of variation allowed around the particle diameterfor
MinParticleCircularitySelectedChIF=ListChMinParticleCircularity[SelectedChIFListPos]; // This is the particle diameter in Unit^2 for
MaxParticleCircularitySelectedChIF=ListChMaxParticleCircularity[SelectedChIFListPos]; // This is the particle diameter in Unit^2 for ChI

SelectedChIG=ListSelectedCh[ChIG]; //This is the number of the selected channels >=1 it can be above 5 if user select only channel 2 and 7 for example.
SelectedChIGListPos=SelectedChIG-1; // This is the position within the array of the
NameSelectedChIG=ListChNames[SelectedChIGListPos]; // This is the Name of the Selected Channels
LowerThresholdSelectedChIG=ListChLowerThreshold[SelectedChIGListPos]; // This is the LowerThreshold for the Channel I
UpperThresholdSelectedChIG=ListChUpperThreshold[SelectedChIGListPos];// This is the UpperThreshold for the Channel I
RemoveNoiseStatusSelectedChIG=ListChRemoveNoiseStatus[SelectedChIGListPos]; // This is 1 or 0 if we apply or not Remove Noise function
WatershedStatusSelectedChIG=ListChWatershedStatus[SelectedChIGListPos];// This is 1 or 0 if we apply or not Watershed function
MinParticleDiameterSelectedChIG=ListChMinParticleDiameter[SelectedChIGListPos]; // This is the particle diameter in Unit^2 for
MaxParticleDiameterSelectedChIG=ListChMaxParticleDiameter[SelectedChIGListPos]; // This is the  percentage of variation allowed around the particle diameterfor
MinParticleCircularitySelectedChIG=ListChMinParticleCircularity[SelectedChIGListPos]; // This is the particle diameter in Unit^2 for
MaxParticleCircularitySelectedChIG=ListChMaxParticleCircularity[SelectedChIGListPos]; // This is the particle diameter in Unit^2 for ChI

CombinedParticleDiameterArray=newArray(MinParticleDiameterSelectedChIA, MaxParticleDiameterSelectedChIA,MinParticleDiameterSelectedChIB, MaxParticleDiameterSelectedChIB,MinParticleDiameterSelectedChIC, MaxParticleDiameterSelectedChIC,MinParticleDiameterSelectedChID, MaxParticleDiameterSelectedChID,MinParticleDiameterSelectedChIE, MaxParticleDiameterSelectedChIE,MinParticleDiameterSelectedChIF, MaxParticleDiameterSelectedChIF,MinParticleDiameterSelectedChIG, MaxParticleDiameterSelectedChIG);
CombinedParticleCircularityArray=newArray(MinParticleCircularitySelectedChIA, MaxParticleCircularitySelectedChIA,MinParticleCircularitySelectedChIB, MaxParticleCircularitySelectedChIB,MinParticleCircularitySelectedChIC, MaxParticleCircularitySelectedChIC,MinParticleCircularitySelectedChID, MaxParticleCircularitySelectedChID,MinParticleCircularitySelectedChIE, MaxParticleCircularitySelectedChIE,MinParticleCircularitySelectedChIF, MaxParticleCircularitySelectedChIF,MinParticleCircularitySelectedChIG, MaxParticleCircularitySelectedChIG);
CombinedChNameI=""+NameSelectedChIA+"x"+NameSelectedChIB+"x"+NameSelectedChIC+"x"+NameSelectedChID+"x"+NameSelectedChIE+"x"+NameSelectedChIF+"x"+NameSelectedChIG;
CombinedChNbI="_Ch"+ChIA+1+"xCh"+ChIB+1+"xCh"+ChIC+1+"xCh"+ChID+1+"xCh"+ChIE+1+"xCh"+ChIF+1+"xCh"+ChIG+1"_";

OutputResultsPathCombinedChI=OutputTablePath+InputFileNameiNoExt+CombinedChNbI+CombinedChNameI+"_CellCount_DetailedResult.txt";
OutputParticleImageCombinedChI=OutputImagePath+InputFileNameiNoExt+CombinedChNbI+CombinedChNameI+"_CellCount_Overlay.tif";

Array.getStatistics(CombinedParticleDiameterArray, MinParticleDiameterCombinedChI, MaxParticleDiameterCombinedChI, MeanParticleDiameterCombinedChI, StDevParticleDiameterCombinedChI);
MinParticleAreaCombinedChI=PI*MinParticleDiameterCombinedChI*MinParticleDiameterCombinedChI;
MaxParticleAreaCombinedChI=PI*MaxParticleDiameterCombinedChI*MaxParticleDiameterCombinedChI;

Array.getStatistics(CombinedParticleCircularityArray, MinParticleCircularityCombinedChI, MaxParticleCircularityCombinedChI, MeanParticleCircularityCombinedChI, StDevParticleCircularityCombinedChI);
MinParticleCircularityCombinedChIDecimal=MinParticleCircularityCombinedChI/100;
MaxParticleCircularityCombinedChIDecimal=MaxParticleCircularityCombinedChI/100;

selectWindow(NameSelectedChIA);
run("Select None");
run("Duplicate...", "title=CombinedChImage duplicate");
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChIB);
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChIC);
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChID);
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChIE);
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChIF);
selectWindow("CombinedChImage");
imageCalculator("AND","CombinedChImage", NameSelectedChIG);
selectWindow("CombinedChImage");
rename(CombinedChNameI);

selectWindow(CombinedChNameI);
run("Select None");// Remove any selection
run("Remove Overlay");

// Duplicate and analyze particle show the Mask and save it as ROI
selectWindow(CombinedChNameI);
run("Duplicate...", "title=CombinedChImageForROI duplicate");
selectWindow("CombinedChImageForROI");
run("Analyze Particles...", "size=&MinParticleAreaCombinedChI-&MaxParticleAreaCombinedChI circularity=&MinParticleCircularityCombinedChIDecimal-&MaxParticleCircularityCombinedChIDecimal show=Masks in_situ");
selectWindow("CombinedChImageForROI");
run("Create Selection");
getSelectionBounds(SelectionPosX, SelectionPosY, SelectionWidth, SelectionHeight);
getDimensions(ImageWidth, ImageHeight, NbChannels, NbSlices, NbFrames); // Get dimensions of the Image
// If the selection is empty ImageJ will use X=0 Y=0 Width=Height=1 or Width=Height=MaxImageHeight
if(SelectionPosX==0 && SelectionPosY==0 && ((SelectionWidth==1 && SelectionHeight==1) || (SelectionWidth==ImageWidth && SelectionHeight==ImageHeight) )){
selectWindow("CombinedChImageForROI");
run("Select None");
makeRectangle(0, 0, 1, 1);
}
roiManager("Add");
NbROI=roiManager("count");
roiManager("Select", NbROI-1);
roiManager("Rename", CombinedChNameI);
roiManager("Set Color", "magenta");
roiManager("Set Line Width", 10);
selectWindow("CombinedChImageForROI"); // Now the ROI is saved we can close the Image
close();

// Run again the analyze Particle for the Detailed results and the overlay Image
// Run again the analyze Particle for the Detailed results and the overlay
run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack display invert redirect=None decimal=9");
selectWindow(CombinedChNameI);
run("Analyze Particles...", "size=&MinParticleAreaCombinedChI-&MaxParticleAreaCombinedChI circularity=&MinParticleCircularityCombinedChIDecimal-&MaxParticleCircularityCombinedChIDecimal show=[Overlay Masks] display summarize in_situ");
selectWindow("Results");
//Add the Label and Channel Names to the Results
if(NbOfParticles<nResults){
for(i=NbOfParticles;i<nResults;i++){
setResult("Label", i, InputFileNameiNoExt);
setResult("Channel", i, CombinedChNameI);
}
NbOfParticles=nResults;
}
selectWindow("Results");
updateResults();
selectWindow(CombinedChNameI);
run("Overlay Options...", "stroke=magenta width=1 fill=cyan apply show");
run("Labels...", "color=blue font=10 show bold");
selectWindow(CombinedChNameI);
saveAs("Tiff", OutputParticleImageCombinedChI);
close();
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Min Particle Diameter ("+RescaledUnit+")"+CellSeparator+MinParticleDiameterCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Max Particle Diameter ("+RescaledUnit+")"+CellSeparator+MaxParticleDiameterCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Min Particle Area ("+RescaledUnit+"^2)"+CellSeparator+MinParticleAreaCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Max Particle Area ("+RescaledUnit+"^2)"+CellSeparator+MaxParticleAreaCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Min Particle Circularity (0-100)"+CellSeparator+MinParticleCircularityCombinedChI+LineSeparator);
print("[ParameterData]", InputFileNameiNoExt+CellSeparator+CombinedChNameI+CellSeparator+"Max Particle Circularity (0-100)"+CellSeparator+MaxParticleCircularityCombinedChI+LineSeparator);
}// end for ChIG
}// end for ChIF
}// end for ChIE
}// end for ChID
}// end for ChIC
}// end for ChIB
}// for ChIA
} // End of Combine 7 selected channels

































































///////////////////////// Close the individual Channels
///////////////////////// Close the individual Channels
///////////////////////// Close the individual Channels
///////////////////////// Close the individual Channels
///////////////////////// Close the individual Channels
///////////////////////// Close the individual Channels
for(ChI=0; ChI<ListSelectedCh.length; ChI++){
SelectedChI=ListSelectedCh[ChI];
SelectedChIListPos=SelectedChI-1;
NameSelectedChI=ListChNames[SelectedChIListPos];
selectWindow(NameSelectedChI);
close();
}///////////////////////// End of Close the Channels


////////// Get the Values of the whole Staining for each Channel and add it to the Measurements Textwindow
for (ChI=0; ChI<ListSelectedCh.length; ChI++){
SelectedChI=ListSelectedCh[ChI];
SelectedChIListPos=SelectedChI-1;
NameSelectedChI=ListChNames[SelectedChIListPos];

if(ChI==0){
run("Text Window...", "name=MeasurementData width=50 height=6 menu");
setLocation(ToolbarPosX+ToolbarSizeX+Spacer, ToolbarPosY);
List.setMeasurements; // For the first time add the header to MeasurementData
MeasurementsHeader=List.getList;
MeasurementsHeader=replace(MeasurementsHeader,"=.*\n",",");
print("[MeasurementData]", "Filename"+CellSeparator+"Measurement Category"+CellSeparator+"Channel"+CellSeparator+"ROI"+CellSeparator+MeasurementsHeader+LineSeparator);
}

NbROI=roiManager("count");
selectWindow("Original");
if(ListSelectedCh.length>1){
Stack.setChannel(SelectedChI);
}
for (ROIn=0; ROIn<NbROI; ROIn++){
roiManager("Select", ROIn);
ROINameI=call("ij.plugin.frame.RoiManager.getName", ROIn);
List.setMeasurements;
MeasurementsChI=List.getList;
MeasurementsChI=replace(MeasurementsChI,"%Area=",""); // Remove the measurements Area
MeasurementsChI=replace(MeasurementsChI,"\n.*=",",");
MeasurementsChI=replace(MeasurementsChI,"\n","");
print("[MeasurementData]", InputFileNameiNoExt+CellSeparator+"Staining Measurements"+CellSeparator+NameSelectedChI+CellSeparator+ROINameI+CellSeparator+MeasurementsChI+LineSeparator);
}//for each ChannelROI
}// end for ChI
///////////////////////// Get the Values of the whole Staining for each Channel and add it to the Measurements Textwindow


///////////////////////// Save the ROI
selectWindow(InputFileNamei);
roiManager("Deselect");
run("Select None");
OutputPathROI=OutputImagePath+InputFileNameiNoExt+"_ROI.zip";
roiManager("Save", OutputPathROI);
roiManager("reset");
///////////////////////// Save the ROI

///////////////////////// Close the original files
selectWindow(InputFileNamei);
close();
selectWindow("Original");
close();
///////////////////////// Close the original file


OutputSummaryCountDataPath=OutputDirPath+InputFileNameiNoExt+"_SummaryResults.txt";
selectWindow("Summary");
saveAs("Text", OutputSummaryCountDataPath);
selectWindow(InputFileNameiNoExt+"_SummaryResults.txt");
run("Close");


OutputMeasurementDataPath=OutputMeasurementPath+InputFileNameiNoExt+"_Measurements.txt";
selectWindow("MeasurementData");
saveAs("Text", OutputMeasurementDataPath);
selectWindow(InputFileNameiNoExt+"_Measurements.txt");
run("Close");

///////////////////////// Save the text files with the data
OutputParameterDataPath=OutputParameterPath+InputFileNameiNoExt+"_Parameters.txt";
selectWindow("ParameterData");
saveAs("Text", OutputParameterDataPath);
run("Close");




OutputDetailedResultsPath=OutputTablePath+InputFileNameiNoExt+"_CellCount_DetailedResult.txt";
selectWindow("Results");
saveAs("Text", OutputDetailedResultsPath);
run("Clear Results");
run("Close");


///////////////////////// Update the progress bar
showProgress(FileI, InputFileList.length);



} ///////////////////////// End for FileI loop



///////////////////////// Close Utility windows
if(isOpen("Threshold")){
selectWindow("Threshold");
run("Close");}

if(isOpen("Results")){
run("Clear Results");
selectWindow("Results");
run("Close");}

if(isOpen("ROI Manager")){
roiManager("reset");
selectWindow("ROI Manager");
run("Close");}
///////////////////////// Close Utility windows



/////////////////////// Initial Dialog Box
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage(NbFile+" "+ FileExt+ " Files in the folder:\n"+InputDirName+"\nhave been processed successfully.");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage("Files are saved in the following folder:\n"+OutputDirName+".");
Dialog.setInsets(0, 0, 0);
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
Dialog.show();
