// Defines Global Variables
var PluginName="Spinalcord Mapper";
var MacroName="Toggle Autostart";
CellSeparator= "\t";
LineSeparator="\n";

/////////////// Header, Set Preferences, Options and Housekeeping
// Select All measurements, Invert Y, and use 9 decimals
run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack display invert redirect=None decimal=9");
run("Line Width...", "line=1"); // Set Line width as 1
run("Input/Output...", "jpeg=100 gif=-1 file=.txt use copy_row save_column"); // Set Output as Txt and save columns and ignore row numbers
run("Point Tool...", "type=Hybrid color=White size=Large label show counter=0");// Set the Point tool as yellow Medium Circle
run("Colors...", "foreground=white background=black selection=White"); // Set foreground and background colors Selection is yellow
run("Appearance...", "  menu=0 16-bit=Automatic"); // Change appareance of 16bit image as automatic
run("Misc...", "divide=Infinity"); // Make sure Miscellaneous Options are set correctly
run("Overlay Options...", "stroke=White width=2 point=Hybrid size=Large fill=none apply show");
run("Labels...", "color=White font=10 show bold");
call("ij.Prefs.set", "tw.font.size",2);

// Set IJ Size and position
IJPosX=screenWidth*0.1; // The position of ImageJ in X
IJPosY=screenHeight*0; // The position of ImageJ in Y at the top of the screen
IJSizeX=575; // The width of ImageJ toolbar in pixel
IJSizeY=100; // The Height of ImageJ toolbar in pixel
Spacer=20; // A spacer
DummyVariable=eval("script","IJ.getInstance().setLocation("+IJPosX+","+IJPosY+");"); // Adjust the position of the ImageJ toolbar

// Set Toolbar Size and position
ToolbarSizeX=300; // Size of the toolbar
ToolbarSizeY=180; // Size of the toolbar
ToolbarPosX=IJPosX+IJSizeX+Spacer; // Position of the Toolbar is to the right of the ImageJ toolbar
ToolbarPosY=IJPosY; // Position of to the Toolbar in Y
// Check if the toolbar is present
ListWindows=getList("window.titles");
ToolbarPresent=0;
for(n=0; n<ListWindows.length; n++){
  WindowN=ListWindows[n];
  if(WindowN==PluginName+" Toolbar"){
    // If toolbar is present place it next to the IJ toolbar
    selectWindow(PluginName+" Toolbar");
    setLocation(ToolbarPosX,ToolbarPosY);
    ToolbarPresent=1;
  }
}

// Set Threshold Window Size and Position
ThresholdSizeX=290;
ThresholdSizeY=260;
ThresholdPosX=ToolbarPosX; // The Position in X of the threshold window
ThresholdPosY=ToolbarPosY+ToolbarSizeY+Spacer; // Threshold toolbar is just below the plugin toolbar
call("ij.Prefs.set", "threshold.loc", ThresholdPosX+" , "+ThresholdPosY);

// Set ROI Manager Size and Position
ROIManagerSizeX=290;
ROIManagerSizeY=260;
ROIManagerPosX=ToolbarPosX; // The Position in X of the ROI manager window which is to the right of the Treshold widnow
ROIManagerPosY=ThresholdPosY+ThresholdSizeY+Spacer;
call("ij.Prefs.set", "manager.loc", ROIManagerPosX+" , "+ROIManagerPosY);

// Set Results Size and Position to the right of the toolbar until the bottom of Threhsold window
ResultsSizeX=(screenWidth-(ToolbarPosX+ToolbarSizeX+Spacer));
ResultsSizeY=ROIManagerPosY;
ResultsPosX=ToolbarPosX+ToolbarSizeX+Spacer; // The Position in X of the ROI manager window
ResultsPosY=ToolbarPosY;
call("ij.Prefs.set", "results.loc", ResultsPosX+" , "+ResultsPosY);
call("ij.Prefs.set", "results.width", ResultsSizeX);
call("ij.Prefs.set", "results.height", ResultsSizeY);
//////////////// Header and Housekeeping


//////////////// General Functions
// Function to Append to an array
function Append(ArrayI, Value) {
ArrayJ = newArray(ArrayI.length+1);
for (ValueI=0; ValueI<ArrayI.length; ValueI++)
ArrayJ[ValueI] = ArrayI[ValueI];
ArrayJ[ArrayI.length] = Value;
return ArrayJ;
}
////////////////////End of General Functions


// Get the the Path of the Startup Macro
MacroFolder=eval("script", "IJ.getDirectory(\"macros\");");
StartUpMarcro="RunAtStartup.ijm";

// If the RunAtStartup do not exists create an empty new one
if(File.exists(MacroFolder+StartUpMarcro)==0){
NewStartUpMacro=File.open(MacroFolder+StartUpMarcro);
File.close(NewStartUpMacro);
} // end of create an empty RunAtStartUp if it does not yet exist

StartUpMacroContent=File.openAsString(MacroFolder+StartUpMarcro); // Get the content of the StartUpMacro
StartUpMacroContentArray=split(StartUpMacroContent, "\n"); // Split the Content into an array

AutostartStatus="inactive"; // Set the Status as inactive
// Screen the Content of Startup Array and if matches change the status to active
for (n=0; n<StartUpMacroContentArray.length; n++){
if(matches(StartUpMacroContentArray[n], "run\\(\""+PluginName+" Toolbar\"\\)\\;")==1){
AutostartStatus="active"; // Swith to active
RowAutostartStatus=n; // Remember which Row within the array the
}// end of if
} // end of for


/// Prompt user dialog
Dialog.create(PluginName);
Dialog.setInsets(0,0,0);
Dialog.addMessage(PluginName+" Autostart is currently " +AutostartStatus+".");
Dialog.setInsets(5,60,0);
Dialog.addMessage("What would you like to do?");
Dialog.setInsets(0,0,0);
// If the status is active propose 2 choices
if(AutostartStatus=="active"){
AutostartOptionArray=newArray("Keep "+PluginName+" Autostart Active", "Remove "+PluginName+" Autostart");
Dialog.setInsets(0,0,0);
Dialog.addRadioButtonGroup("", AutostartOptionArray,2,1,"Keep "+PluginName+" Autostart Active");
// if status is inactive propose two other choices
} else if(AutostartStatus=="inactive"){
AutostartOptionArray=newArray("Activate "+PluginName+" Autostart", "Keep "+PluginName+" Autostart OFF for now");
Dialog.setInsets(0,0,0);
Dialog.addRadioButtonGroup("", AutostartOptionArray,2,1,"Activate "+PluginName+" Autostart");
}
Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
Dialog.show();
AutostartChoice = Dialog.getRadioButton();


if(matches(AutostartChoice,".*(Keep).*")==1){
// do nothing
} else { // There is something to change in the StartUp Macro
if(matches(AutostartChoice,".*(Remove).*")==1){ // If user wants to remove the autostart
StartUpMacroContentArray[RowAutostartStatus]="";
} else if(matches(AutostartChoice,".*(Activate).*")==1){ // If user wants to Activate
StartUpMacroContentArray=Append(StartUpMacroContentArray,"run(\""+PluginName+" Toolbar\")\;");
}
// Reconstruct the MacroContent
StartUpMacroContent="";
// Reconstruct the StartUpMacro omitting the Rowwith from the array
for (n=0; n<StartUpMacroContentArray.length; n++){
StartUpMacroContent=StartUpMacroContent+StartUpMacroContentArray[n]+"\n";
} // end of for
// Save the File startup with the new content
File.saveString(StartUpMacroContent, MacroFolder+StartUpMarcro);

// Check if the toolbar is present
ListWindows=getList("window.titles");
ToolbarPresent=0;
for(n=0; n<ListWindows.length; n++){
WindowN=ListWindows[n];
if(WindowN==PluginName+" Toolbar"){
// If toolbar is present place it next to the IJ toolbar
selectWindow(PluginName+" Toolbar");
setLocation(ToolbarPosX,ToolbarPosY);
ToolbarPresent=1;
}
}
beep();

///////////////////////// Close Utility windows
// Close Threshold windows if it is open
if(isOpen("Threshold")){
selectWindow("Threshold");
run("Close");
}//end of if threshold is open
// Close results windows if it is open
if(isOpen("Results")){
run("Clear Results");
selectWindow("Results");
run("Close");
}//end of if Results is open
//Close the ROI Manager
if(isOpen("ROI Manager")){
roiManager("reset");
selectWindow("ROI Manager");
run("Close");
}//End of Close the ROI Manager
///////////////////////// Close Utility windows

///////////////////// Closing Dialog Box
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage("To validate the modification it is better to restart ImageJ.");
Dialog.setInsets(10, 0, 0);
Dialog.addMessage("Do you want to quit ImageJ now?");
Dialog.setInsets(10, 0, 0);
Dialog.addRadioButtonGroup("", newArray("Quit", "Don't Quit"), 2, 1, "Don't Quit");
Dialog.setLocation(IJPosX, IJPosY+IJSizeY+Spacer);
Dialog.show();
RestartChoice=Dialog.getRadioButton();
if(RestartChoice=="Quit"){
run("Quit");
}
}// End Change StartUp Macro
