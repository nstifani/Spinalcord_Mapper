// Defines Global Variables
var PluginName="Spinalcord Mapper";
var MacroName="Manual Cell Detection";
var FileExt="TIF";
var MinNbFile=1;
var FolderSuffix="Manual-Cell-Detection";
var SubDirArray=newArray("ROIs","Results");
CellSeparator= "\t";
LineSeparator="\n";
var CounterArray=newArray(0); // This is an array containing the Counter Nb

/////////////// Header, Set Preferences, Options and Housekeeping
// Select All measurements, Invert Y, and use 9 decimals
run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack display invert redirect=None decimal=9");
run("Line Width...", "line=1"); // Set Line width as 1
run("Input/Output...", "jpeg=100 gif=-1 file=.txt use copy_row save_column"); // Set Output as Txt and save columns and ignore row numbers
run("Point Tool...", "type=Hybrid color=White size=Large label show counter=0");// Set the Point tool as yellow Medium Circle
run("Colors...", "foreground=white background=black selection=White"); // Set foreground and background colors Selection is yellow
run("Appearance...", "  menu=0 16-bit=Automatic"); // Change appareance of 16bit image as automatic
run("Misc...", "divide=Infinity"); // Make sure Miscellaneous Options are set correctly
run("Overlay Options...", "stroke=White width=2 point=Hybrid size=Large fill=none apply show");
run("Labels...", "color=White font=10 show bold");
call("ij.Prefs.set", "tw.font.size",2);

// Set IJ Size and position
IJPosX=screenWidth*0.1; // The position of ImageJ in X
IJPosY=screenHeight*0; // The position of ImageJ in Y at the top of the screen
IJSizeX=575; // The width of ImageJ toolbar in pixel
IJSizeY=100; // The Height of ImageJ toolbar in pixel
Spacer=20; // A spacer
DummyVariable=eval("script","IJ.getInstance().setLocation("+IJPosX+","+IJPosY+");"); // Adjust the position of the ImageJ toolbar

// Set Toolbar Size and position
ToolbarSizeX=300; // Size of the toolbar
ToolbarSizeY=180; // Size of the toolbar
ToolbarPosX=IJPosX+IJSizeX+Spacer; // Position of the Toolbar is to the right of the ImageJ toolbar
ToolbarPosY=IJPosY; // Position of to the Toolbar in Y
// Check if the toolbar is present
ListWindows=getList("window.titles");
ToolbarPresent=0;
for(n=0; n<ListWindows.length; n++){
  WindowN=ListWindows[n];
  if(WindowN==PluginName+" Toolbar"){
    // If toolbar is present place it next to the IJ toolbar
    selectWindow(PluginName+" Toolbar");
    setLocation(ToolbarPosX,ToolbarPosY);
    ToolbarPresent=1;
  }
}

// Set Threshold Window Size and Position
ThresholdSizeX=290;
ThresholdSizeY=260;
ThresholdPosX=ToolbarPosX; // The Position in X of the threshold window
ThresholdPosY=ToolbarPosY+ToolbarSizeY+Spacer; // Threshold toolbar is just below the plugin toolbar
call("ij.Prefs.set", "threshold.loc", ThresholdPosX+" , "+ThresholdPosY);

// Set ROI Manager Size and Position
ROIManagerSizeX=290;
ROIManagerSizeY=260;
ROIManagerPosX=ToolbarPosX; // The Position in X of the ROI manager window which is to the right of the Treshold widnow
ROIManagerPosY=ThresholdPosY+ThresholdSizeY+Spacer;
call("ij.Prefs.set", "manager.loc", ROIManagerPosX+" , "+ROIManagerPosY);

// Set Results Size and Position to the right of the toolbar until the bottom of Threhsold window
ResultsSizeX=(screenWidth-(ToolbarPosX+ToolbarSizeX+Spacer));
ResultsSizeY=ROIManagerPosY;
ResultsPosX=ToolbarPosX+ToolbarSizeX+Spacer; // The Position in X of the ROI manager window
ResultsPosY=ToolbarPosY;
call("ij.Prefs.set", "results.loc", ResultsPosX+" , "+ResultsPosY);
call("ij.Prefs.set", "results.width", ResultsSizeX);
call("ij.Prefs.set", "results.height", ResultsSizeY);
//////////////// Header and Housekeeping

//////////////// General Functions
// Function to Append to an array
function Append(ArrayI, Value) {
  ArrayJ = newArray(ArrayI.length+1);
  for (ValueI=0; ValueI<ArrayI.length; ValueI++)
  ArrayJ[ValueI] = ArrayI[ValueI];
  ArrayJ[ArrayI.length] = Value;
  return ArrayJ;
}

// Function to display a message
var MessageDialogPass;
function MessageDialog(Message){
  MessageDialogPass=0;
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(Message);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  Dialog.show();
  MessageDialogPass=1;
}

// Function to display an error and propose to Fix it / Try again or to quit
var ErrorDialogPass;
var UserResponseErrorDialog;
function ErrorDialog(MessageError, MessageFix, ErrorResponseArray){
  ErrorDialogPass=0;
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(MessageError);
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(MessageFix);
  Dialog.setInsets(0, 0, 0);
  Dialog.setInsets(0, 20, 0);
  Dialog.addRadioButtonGroup("", ErrorResponseArray, ErrorResponseArray.length, 1, ErrorResponseArray[0]);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  Dialog.show();
  UserResponseErrorDialog=Dialog.getRadioButton();
  return UserResponseErrorDialog;
}

// Function to select an Input Directory containing at least MinNbFile with the correct File Extension FileExt
var SelectInputDirPass; // Switch for the dialog box
var InputDirPath; // Path of the input directory
var ParentDir; // ParentDirectory of the selected input directory
var InputDirName; // Name of the Input Directory
var NbFileWithCorrectExt; // Nb of File with the correct extension in the input directory
var InputItemList; // List of Files and folders in the input directory (all files no matter the extension)
var InputCorrectExtFileList; // List of files with the correct extension
var InputFileList;
var NbFile;

function SelectInputDir(MinNbFile, FileExt){
  // MinNbFile This is the minimum Nb of File to be present in the list to be accepted
  // FileExt This is the File extension as a string example "tif"
  InputDirPath=getDirectory("Select a FOLDER containing at least "+MinNbFile+" "+FileExt+" Files to process."); // Select a Folder
  InputItemList=getFileList(InputDirPath); // List of Item in the selected folder
  ParentDir=File.getParent(InputDirPath)+File.separator;
  InputDirName=File.getName(InputDirPath);

  SelectInputDirPass=0; // Switch for the Function
  NbFileWithCorrectExt=0; // Count of Nb of Files
  BaseNameError=0; // Switch to make sure there is only one "." in the filename
  InputCorrectExtFileList=newArray(0);

  // Evaluate the Nb of File with correct extension and add them to InputCorrectExtFileList
  for (ItemI=0; ItemI<InputItemList.length; ItemI++){
    if(endsWith(toLowerCase(InputItemList[ItemI]), "."+toLowerCase(FileExt))){ // Select files with correct extension
      InputCorrectExtFileList=Append(InputCorrectExtFileList, InputItemList[ItemI]);
    }
  }
  NbFileWithCorrectExt=InputCorrectExtFileList.length;
  if(NbFileWithCorrectExt<MinNbFile){ // If the Nb of File with correct extension is not at least equal to the MinNbFile Create Error Message.
    MessageError="Sorry but the Folder: \"" +InputDirName+"\" does not contain at least "+MinNbFile+" "+FileExt+" File.";
    MessageFix=MacroName+" requires a Folder that contains at least "+MinNbFile+" "+FileExt+" File.";
    ErrorResponseArray=newArray("Select Another Folder", "Cancel and Close");
    MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because the Folder: \"" +InputDirName+"\" did not contain at least "+MinNbFile+" "+FileExt+" File.";
    ErrorDialog(MessageError, MessageFix, ErrorResponseArray);

    if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
      CleanExit(MessageQuit);
    } else {
    }
  } else { // if NbFileWithCorrectExt is above or equal MinNbFile Evaluate Filenames
    InputFileList=newArray(0);
    for (FileI=0; FileI<InputCorrectExtFileList.length; FileI++){
      BasenameFileIArray=split(InputCorrectExtFileList[FileI],"."); // Make an array from the filename
      if(BasenameFileIArray.length!=2){// if there is more than one . in the file name abort
        MessageError="Sorry but the "+FileExt+" File:\n\""+InputCorrectExtFileList[FileI]+"\"\ncontains more than one \".\" in its filename.";
        MessageFix=MacroName+" function does NOT allow filenames with more than one unique \".\" used for the file extension.";
        ErrorResponseArray=newArray("Select Another Folder", "Ignore This File", "Cancel and Close");
        MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because the File \""+InputCorrectExtFileList[FileI]+"\" contains more than one \".\"\nMake sure filenames have no more than one unique \".\" for the File extension.";
        ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
        if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
          CleanExit(MessageQuit);
        } else if (UserResponseErrorDialog=="Ignore This File"){

        } else if (UserResponseErrorDialog=="Select Another Folder") {
          FileI=InputCorrectExtFileList.length;
          SelectInputDirPass=0;
          ErrorDialogPass=1;
        }
      }else { // If basename is good add it to the InputFileList
        InputFileList=Append(InputFileList, InputCorrectExtFileList[FileI]);
      }
    }
    // Make sure InpuFileList is > MinNbFile
    NbFile=InputFileList.length;
    if(NbFile<MinNbFile && ErrorDialogPass!=1){ // If the Nb of File with correct extension is not at least equal to the MinNbFile Create Error Message.
      MessageError="Sorry but the Folder: \"" +InputDirName+"\" does not contain at least "+MinNbFile+" "+FileExt+" File with no more than one \".\" in its filename.";
      MessageFix=MacroName+" requires a Folder that contains at least "+MinNbFile+" "+FileExt+" File with one unique \".\" used for the file extension.";
      ErrorResponseArray=newArray("Select Another Folder", "Cancel and Close");
      MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because the Folder: \"" +InputDirName+"\" did not contain at least "+MinNbFile+" "+FileExt+" File no more than one \".\" in its filename.";
      ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
      if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
        CleanExit(MessageQuit);
      } else {
        SelectInputDirPass=0;
      }
    } else if (ErrorDialogPass==1){
      SelectInputDirPass=0; // InputDir Pass the criteria
    } else {
      SelectInputDirPass=1; // InputDir Pass the criteria
    }
  }
} // End of Function Select InputDir

// Function to create a new output directory
var OutputDirPath; // The path of the output directory
var OutputDirName; // The name of the output directory
function CreateOutputDir(ParentDir, InputDirName, FolderSuffix){ // Folder suffix is a string appended to the input Directory
  OutputDirPath=ParentDir+InputDirName+"_"+FolderSuffix+File.separator; // Create the outputdirpath
  n=1;
  while(File.exists(OutputDirPath)!=0){ // If the path already exist, increment with _ n until it does not exist
    n++;
    OutputDirPath=ParentDir+InputDirName+"_"+FolderSuffix+"_"+n+File.separator;
  } // End of making sure the outpudirectory is a new folder
  File.makeDirectory(OutputDirPath); // Create the outpudirectory
  OutputDirName=File.getName(OutputDirPath); // Get the Name of the output directory
}

////// Close Function
function CloseAndCleanUp(PluginName, FileI, NbFile, FileExt, InputDirName, OutputDirName){
  beep();
  // Close Threshold windows if it is open
  if(isOpen("Threshold")){
    selectWindow("Threshold");    run("Close");

  }//end of if threshold is open
  // Close results windows if it is open
  if(isOpen("Results")){
    run("Clear Results");
    selectWindow("Results");    run("Close");

  }//end of if Results is open
  //Close the ROI Manager
  if(isOpen("ROI Manager")){
    roiManager("reset");
    selectWindow("ROI Manager");    run("Close");

  }//End of Close the ROI Manager

  ListImages=getList("image.titles");
  for(n=0; n<ListImages.length; n++){
    ImageN=ListImages[n];
    selectWindow(ImageN);    run("Close");

  }

  /////////////////////// Closing Dialog Box
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(FileI+" of "+ NbFile+" "+ FileExt+ " Files in the folder:\n"+InputDirName+"\nhave been processed successfully.");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage("Files are saved in the following folder:\n"+OutputDirName+".");
  Dialog.setInsets(0, 0, 0);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  Dialog.show();
}  ///////////////////////// End of Close Function


////// CleanExit Function
function CleanExit(MessageQuit){
  beep();
  // Close Threshold windows if it is open
  if(isOpen("Threshold")){
    selectWindow("Threshold");    run("Close");

  }//end of if threshold is open
  // Close results windows if it is open
  if(isOpen("Results")){
    run("Clear Results");
    selectWindow("Results");    run("Close");

  }//end of if Results is open
  //Close the ROI Manager
  if(isOpen("ROI Manager")){
    roiManager("reset");
    selectWindow("ROI Manager");    run("Close");

  }//End of Close the ROI Manager

  ListImages=getList("image.titles");
  for(n=0; n<ListImages.length; n++){
    ImageN=ListImages[n];
    selectWindow(ImageN);    run("Close");

  }
  /////////////////////// Closing Dialog Box
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(MessageQuit);
  Dialog.setInsets(0, 0, 0);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  Dialog.show();
  exit();
}  ///////////////////////// End of Exit Function
////////////////////End of General Functions

/////////////////////  Sepcific Function
// This function Prompt for a specific type of selection and ensure a selection is made before moving next
var SelectionPromptPass; // This is the switch when the selection pass the criteria
var SelectionPromptByPass; // This is a Logical object telling if the user deliberately exited the Selection Loop
function SelectionPrompt(SelectionTypeName, SelectionInfo){
  // Selection name is the name of the selection. It is a string that can take the following values:
  // rectangle, oval, polygon, freehand, traced, straight line, segmented line, freehandline, angle, point, multipoint
  // SelectionInfo is a string that explains what the Seleciton should be
  //SelectionPromptPass=0;
  // Define what the SelectionType value for each selection
  if(SelectionTypeName=="rectangle"){
    SelectionValue=0;
  } else if(SelectionTypeName=="oval"){
    SelectionValue=1;
  } else if(SelectionTypeName=="polygon"){
    SelectionValue=2;
  } else if(SelectionTypeName=="freehand"){
    SelectionValue=3;
  } else if(SelectionTypeName=="traced"){
    SelectionValue=4;
  } else if(SelectionTypeName=="straight line"){
    SelectionValue=5;
  } else if(SelectionTypeName=="segmented line"){
    SelectionValue=6;
  } else if(SelectionTypeName=="freehand line"){
    SelectionValue=7;
  } else if(SelectionTypeName=="angle"){
    SelectionValue=8;
  } else if(SelectionTypeName=="point"){
    SelectionValue=10;
  } else if(SelectionTypeName=="multipoint"){
    SelectionValue=10;
  } else {
    SelectionValue=-1; // No selection
  }

  CurrentImageName=getTitle(); // Get the Image of the Current Image
  CurrentSelection=selectionType(); // Get the Current selection

  // If the currentselection does not match the expected selection but if there is something in the overlay
  if(CurrentSelection!=SelectionValue && Overlay.size==1){
    run("Show Overlay");
    Overlay.activateSelection(0); // Get the selection from the overlay
    run("Remove Overlay");
    CurrentSelection=selectionType(); // refresh Current selection
  }

  if(CurrentSelection==SelectionValue){ // If a correct Selection is present ask what to do
    setBatchMode("show");
    selectWindow(CurrentImageName);
    setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
    MessageError="A "+SelectionTypeName+" selection was detected.";
    MessageFix="What would you like to do?";
    ErrorResponseArray=newArray("Keep the current "+SelectionTypeName+" selection", "Adjust the current "+SelectionTypeName+" selection", "Discard the current "+SelectionTypeName+" selection", "Cancel and Close");
    MessageQuit="";
    ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
    if(UserResponseErrorDialog==ErrorResponseArray[0]){
      SelectionPromptPass=1;
    } else if(UserResponseErrorDialog==ErrorResponseArray[1]){
      SelectionPromptPass=0; // Set the Switch to 0
    } else if(UserResponseErrorDialog==ErrorResponseArray[2]) {
      run("Remove Overlay");
      run("Select None");
      SelectionPromptPass=0; // Set the Switch to 0
    }else if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]) {
      CleanExit(MessageQuit);
    }

  } else { // Else the current selection does not match the expected selection
    SelectionPromptPass=0;
      run("Select None");
  }

  if(SelectionPromptPass==0){ // If the selection is not set prompt or does not correspond to the expected selection
    setBatchMode("show");
    selectWindow(CurrentImageName);
    setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
    run("Hide Overlay");
    setTool(SelectionTypeName);
    if(SelectionTypeName=="multipoint"){
      setTool("multipoint");
      run("Point Tool...", "type=Hybrid color=White size=Large label show counter=0"); // Set the Point tool as yellow Medium Circle
      doCommand("Point Tool..."); // Bring the non-modal Point Tool at front in a separate thread
    }
    waitForUser(PluginName+" Information", "Draw a "+SelectionTypeName+" selection.\n"
    +SelectionInfo+
    "\nWhen done, press OK.");
    CurrentSelection=selectionType();
    if(CurrentSelection<0 || CurrentSelection!=SelectionValue){
      if(CurrentSelection<0){
        // Dialog you did not make any selection are you sure?
        MessageError="Sorry but no "+SelectionTypeName+" selection was detected.";
        MessageFix="Do you want to proceed without selecting any Cell?";
        ErrorResponseArray=newArray("Proceed Without selecting any Cell", "Create a "+SelectionTypeName+" selection", "Cancel and Close");
        MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because no "+SelectionTypeName+" was detected.";
        ErrorDialog(MessageError,MessageFix, ErrorResponseArray);
        if(UserResponseErrorDialog==ErrorResponseArray[0]){
          SelectionPromptPass=1;
          SelectionPromptByPass=1;
        } else if(UserResponseErrorDialog==ErrorResponseArray[1]){
          SelectionPromptPass=0;
          SelectionPromptByPass=0;
        }  else if (UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
          // Ask Channel Identification here?
          CleanExit(MessageQuit);
        }
        } else if(CurrentSelection!=SelectionValue){
        MessageError="Sorry but the Selection is not a "+SelectionTypeName+".";
        MessageFix=MacroName+" function requires a "+SelectionTypeName+" selection.";
        ErrorResponseArray=newArray("Create a "+SelectionTypeName+" selection", "Cancel and Close");
        MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because the provided selection was not a "+SelectionTypeName+".";
      }
      // Close results windows if it is open
      if(isOpen("Results")){
        run("Clear Results");
        selectWindow("Results");        run("Close");
      }//end of if Results is open
setBatchMode("show");
      ErrorDialog(MessageError,MessageFix, ErrorResponseArray);
      if(UserResponseErrorDialog==ErrorResponseArray[0]){
        run("Select None");
        SelectionPromptPass=0;
      } else if (UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
        CleanExit(MessageQuit);
      }
    } else {
      SelectionPromptPass=1;
      SelectionPromptByPass=0;
      setBatchMode("hide");

    }// End of else Selection is good
  } // End of If selection does not pass prompt for a selection
} // End of Function Get selection


// Function to create subfolders within the newly create outputdirectory
function CreateOutputSubDir(SubDirArray) { // SubDirArray is an array of the desired subfolders
  for(i=0;i<SubDirArray.length;i++){
    SubDirPath=OutputDirPath+SubDirArray[i]+File.separator; // Because outpudirpath is unique and new the subfolders do not exist yet so no need to check if they are already present
    File.makeDirectory(SubDirPath);
  } // End of for
} // End of CreateOutputSubDir function
// NOTE:It is useful to create a string for the subdirectory paths
// For each element in the subdirarray addMessage
// Output[SubDirArrayElementN]Path=""+OutputDirPath+"[SubDirArrayElementN]"+File.separator;
// Then you can use directly the string to save within a subdirectory

// Function to Identify the Names of Each Counter
var IdentifyCounterPass;
var ListCounterName;
function IdentifyCounter (NbOfCounter){
  IdentifyCounterPass=0;
  // Get or Set the Default values for the Counter Identifier Position and Names
  ListCounterNameString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ListCounterName", "DAPI,Hoescht,Nissl,ProteinA,PorteinB,ProteinC,ProteinD");
  ListCounterName=split(ListCounterNameString,",");

  // Elongate the ListCounterName if there is more than the Default Channels
  if(ListCounterName.length<NbOfCounter){
    NbCounterName=ListCounterName.length;
    for(MissingCounterI=1; MissingCounterI<(NbOfCounter-NbCounterName+1); MissingCounterI++){
      ListCounterName=Append(ListCounterName,"Counter_"+NbCounterName+MissingCounterI-1);
    }
  }

  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage("You used "+NbOfCounter+" Counter(s).");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage("Please give an unique name to each of them.");
  Dialog.setInsets(0, 0, 0);
  for (CounterI = 0; CounterI < NbOfCounter; CounterI++){
    Dialog.setInsets(0, 20, 0);
    Dialog.addString("Counter "+CounterI+" :", ListCounterName[CounterI], 20);
  }
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  Dialog.show();
  for (CounterI = 0; CounterI < NbOfCounter; CounterI++){
    ListCounterName[CounterI]=Dialog.getString();
  }

  // Make sure CounterNames do not contain , nor .
  for (CounterI = 0; CounterI < NbOfCounter; CounterI++){
    if(matches(ListCounterName[CounterI],".*[,.].*")==1){
      IdentifyCounterPass= -1;
    }
  }

  // Make sure CounterNames are unique
  for (CounterIA = 0; CounterIA < NbOfCounter-1; CounterIA++){
    for (CounterIB = CounterIA+1; CounterIB < NbOfCounter; CounterIB++){
      CounterNameA=ListCounterName[CounterIA];
      CounterNameB=ListCounterName[CounterIB];
      if(CounterNameA==CounterNameB){
        IdentifyCounterPass=-1;
      }
    }
  }

  if(IdentifyCounterPass<0){
    MessageError="Sorry but the Counter Names must be unique and canno't contain any comma \",\" nor dot \".\".";
    MessageFix=MacroName+" function does NOT allow commas \",\" nor dots \".\" in the Counter Names which must unique.";
    MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because the Counter Names weren't unique and/or contained commas \",\" or dots \".\"";
    ErrorResponseArray=newArray("Re-Enter Counter Names", "Cancel and Close");
    ErrorDialog(MessageError,MessageFix,ErrorResponseArray);
    if(UserResponseErrorDialog==ErrorResponseArray[0]){
      IdentifyCounterPass=0;
    } else if (UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
      CleanExit(MessageQuit);
    }
  } else {// end of if Identify Counter=Fail
    IdentifyCounterPass=1;

    //Recreate the Strings from the Arrays
    for (CounterI=0; CounterI < ListCounterName.length ;CounterI++){
      if(CounterI==0){
        ListCounterNameString=""+ListCounterName[CounterI];
      }else{
        ListCounterNameString=ListCounterNameString+","+ListCounterName[CounterI];
      }// end of else
    } // end of for each Counter
    call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".ListCounterName",ListCounterNameString); // Save the Countername in the preferences
  }// end of if pass
} // end of function Identify Counter
/////////////////////End of Specific Functions


InitialMessage=""+MacroName+" will :"
+"\n- Prompt to select a Folder containing at least "+MinNbFile+" "+FileExt+" File to process"
+"\n\nFor each "+FileExt+" File:"
+"\n- Prompt to Manually Detect Cells of Interest"
+"\n- Save in a new folder"
+"\n   - Detected Cells as Region of Interest ZIP Files"
+"\n   - X and Y Coordinates of Dectected Cells as TXT Files"
+"\n- Prompt for a name for each Counter";


MessageDialog(InitialMessage);

do{
  SelectInputDir(MinNbFile,FileExt);
}while(SelectInputDirPass!=1)

CreateOutputDir(ParentDir,InputDirName,FolderSuffix);
CreateOutputSubDir(SubDirArray);
OutputROIPath=""+OutputDirPath+"ROIs"+File.separator;
OutputResultPath=""+OutputDirPath+"Results"+File.separator;


// Start of the loop going through the list of files in the input folder selected above
for (FileI = 0; FileI < InputFileList.length; FileI++){
  setBatchMode(false);
  InputFileNameI=InputFileList[FileI];
  InputFilePathI = InputDirPath+InputFileNameI;
  open(InputFilePathI);

  // Save the Scale
  getPixelSize(PixelUnit, PixelWidth, PixelHeight, PixelDepth);
  ImageScale=1/PixelWidth;
  // Remove the scale to have coordinates in pixels
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");
  getDimensions(ImageWidth, ImageHeight, ImageChannels, ImageSlices, ImageFrames);

  do {
    SelectionPrompt("multipoint","Point and Click on the Cells of Interest.");
  } while(SelectionPromptPass!=1)
  run("Clear Results"); // Clear the results
  run("Measure"); // get the Measurements

  if(SelectionPromptByPass==0){ // If user did not escape the Selection Loop deliberately
    // Add the CounterIDs to an array to be used to define the Name of each Counter
    for(ResultI=0; ResultI<nResults;ResultI++){
      CounterI=getResult("Counter", ResultI);
      CounterArray=Append(CounterArray,CounterI);
    }// end of for ResultI
  } // end of if user exited loop

  if(SelectionPromptByPass==1){ // If User exited the seleciton loop
    selectWindow("Results"); // Delete the results generated from the All image because no selection was made
    IJ.deleteRows(0,nResults); // Delete the results
  }
  selectWindow("Results");
  saveAs("Results", OutputResultPath+File.nameWithoutExtension+".txt"); // Save the measurements even empty results
  run("Clear Results"); // Clear the results


  // Add selection to overlay and save the File
  selectWindow(InputFileNameI);
  roiManager("reset"); // Reset the ROI Manager
  if(SelectionPromptByPass==0){
    roiManager("Add"); // Add the selection to ROI manager
    roiManager("Save", OutputROIPath+File.nameWithoutExtension+".zip"); // Save the ROI
    run("Select None"); // Remove any selection
    roiManager("Select", 0); // Select the selection form the ROI manager
    roiManager("reset"); // Reset the ROI manager
    run("Remove Overlay"); // Remove any previous overlay
    run("Add Selection..."); // Add selection to the overlay
  }

  selectWindow(InputFileNameI);
  close();
  // Update the progress bar
  showProgress(FileI, InputFileList.length);
}/////////////////////End of for Filei loop

// Get the Maximum Nb of Counter from the Counter Array
// Add a 0 to the Array to avoid having aberrant MaxCounter_ID when only 1 counter (counter 0) is used
CounterArray=Append(CounterArray, 0);
Array.getStatistics(CounterArray, MinCounter_ID, MaxCounter_ID, MeanCounter_ID, StdDevCounter_ID);
NbCounter=MaxCounter_ID+1;
// Prompt for a name to each Counter
do{
  IdentifyCounter(NbCounter);
}while(IdentifyCounterPass!=1)

// Write The Counter in a txt
TXTFileName=""+InputDirName+"_"+"Marker-Information";
TXTFilePath=OutputDirPath+TXTFileName+".txt";
TXTFile = File.open(TXTFilePath);
// Write Header of MarkerFile
print(TXTFile, "Marker_ID"+CellSeparator+ "Marker_Name"+LineSeparator);
// Add
for(Counter_IDI=0;Counter_IDI<NbCounter;Counter_IDI++){
  Counter_IDIPadded=IJ.pad(Counter_IDI, 3);
  print(TXTFile, Counter_IDIPadded+CellSeparator+ ListCounterName[Counter_IDI]+LineSeparator);
}
// Close the TXT File
File.close(TXTFile);
CloseAndCleanUp(PluginName, FileI, NbFile, FileExt, InputDirName, OutputDirName);
