// Defines Global Variables
var PluginName="Spinalcord Mapper";
var MacroName="Merge Images";
var FileExt="TIF";
var MinNbFile=2;
var FolderSuffix="Merged";
CellSeparator= "\t";
LineSeparator="\n";


/////////////// Header, Set Preferences, Options and Housekeeping
// Select All measurements, Invert Y, and use 9 decimals
run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack display invert redirect=None decimal=9");
run("Line Width...", "line=1"); // Set Line width as 1
run("Input/Output...", "jpeg=100 gif=-1 file=.txt use copy_row save_column"); // Set Output as Txt and save columns and ignore row numbers
run("Point Tool...", "type=Hybrid color=White size=Large label show counter=0");// Set the Point tool as yellow Medium Circle
run("Colors...", "foreground=white background=black selection=White"); // Set foreground and background colors Selection is yellow
run("Appearance...", "  menu=0 16-bit=Automatic"); // Change appareance of 16bit image as automatic
run("Misc...", "divide=Infinity"); // Make sure Miscellaneous Options are set correctly
run("Overlay Options...", "stroke=White width=2 point=Hybrid size=Large fill=none apply show");
run("Labels...", "color=White font=10 show bold");
call("ij.Prefs.set", "tw.font.size",2);


IJPosX=screenWidth*0.1; // The position of ImageJ in X // Set IJ Size and position
IJPosY=screenHeight*0; // The position of ImageJ in Y at the top of the screen
IJSizeX=570; // The width of ImageJ toolbar in pixel
IJSizeY=100; // The Height of ImageJ toolbar in pixel
Spacer=25; // A spacer
DummyVariable=eval("script","IJ.getInstance().setLocation("+IJPosX+","+IJPosY+");"); // Adjust the position of the ImageJ toolbar

ToolbarSizeX=300;// Set Toolbar Size and position
ToolbarSizeY=200; // Size of the toolbar
ToolbarPosX=IJPosX+IJSizeX+Spacer; // Position of the Toolbar is to the right of the ImageJ toolbar
ToolbarPosY=IJPosY; // Position of to the Toolbar in Y

if(isOpen(PluginName+" Toolbar")){
  selectWindow(PluginName+" Toolbar");
  setLocation(ToolbarPosX,ToolbarPosY);
}

ThresholdSizeX=290;// Set Threshold Window Size and Position
ThresholdSizeY=260;
ThresholdPosX=ToolbarPosX; // The Position in X of the threshold window
ThresholdPosY=ToolbarPosY+ToolbarSizeY+Spacer; // Threshold toolbar is just below the plugin toolbar
call("ij.Prefs.set", "threshold.loc", ThresholdPosX+" , "+ThresholdPosY);

ROIManagerSizeX=250;// Set ROI Manager Size and Position
ROIManagerSizeY=300;
ROIManagerPosX=ToolbarPosX; // The Position in X of the ROI manager window which is to the right of the Treshold widnow
ROIManagerPosY=ThresholdPosY+ThresholdSizeY+Spacer;
call("ij.Prefs.set", "manager.loc", ROIManagerPosX+" , "+ROIManagerPosY);

ResultsSizeX=(screenWidth-(ToolbarPosX+ToolbarSizeX+Spacer)); // Set Results Size and Position to the right of the toolbar until the bottom of Threhsold window
ResultsSizeY=ROIManagerPosY-Spacer;
ResultsPosX=ToolbarPosX+ToolbarSizeX+Spacer;
ResultsPosY=ToolbarPosY;
call("ij.Prefs.set", "results.loc", ResultsPosX+" , "+ResultsPosY);
call("ij.Prefs.set", "results.width", ResultsSizeX);
call("ij.Prefs.set", "results.height", ResultsSizeY);

LogSizeX=(screenWidth-(ToolbarPosX+ToolbarSizeX+Spacer)); // Set Log location
LogSizeY=ROIManagerPosY-Spacer;
LogPosX=ToolbarPosX+ToolbarSizeX+Spacer; // The Position in X of the ROI manager window
LogPosY=ToolbarPosY;
call("ij.Prefs.set", "log.loc", LogPosX+" , "+LogPosY);

DebugSizeX=(screenWidth-(ToolbarPosX+ToolbarSizeX+Spacer)); // Set Debug location
DebugSizeY= ROIManagerPosY-Spacer;
DebugPosX=ToolbarPosX+ToolbarSizeX+Spacer; // The Position in X of the ROI manager window
DebugPosY=ToolbarPosY;
call("ij.Prefs.set", "debug.loc", DebugPosX+" , "+DebugPosY);

PointToolSizeX=250;// Set point Tool location
PointToolSizeY=300;
PointToolPosX= ROIManagerPosX+ROIManagerSizeX+Spacer;
PointToolPosY= ROIManagerPosY;

BCSizeX=150;// Set Brightness and contrast location
BCSizeY=300;
BCPosX=PointToolPosX+PointToolSizeX+Spacer;
BCPosY=ROIManagerPosY;
call("ij.Prefs.set", "b&c.loc", BCPosX+" , "+BCPosY);
//////////////// Header and Housekeeping

//////////////// General Functions
// Function to Append to an array
function Append(ArrayI, Value) {
  ArrayJ = newArray(ArrayI.length+1);
  for (ValueI=0; ValueI<ArrayI.length; ValueI++)
  ArrayJ[ValueI] = ArrayI[ValueI];
  ArrayJ[ArrayI.length] = Value;
  return ArrayJ;
}

// Function to display a message
var MessageDialogPass;
function MessageDialog(Message){
  MessageDialogPass=0;
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(Message);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  CloseUtilityWindows(ListUtilityWindows);
  Dialog.show();
  MessageDialogPass=1;
}

// Function to display an error and propose to Fix it / Try again or to quit
var ErrorDialogPass;
var UserResponseErrorDialog;
function ErrorDialog(MessageError, MessageFix, ErrorResponseArray){
  ErrorDialogPass=0;
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(MessageError);
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(MessageFix);
  Dialog.setInsets(0, 0, 0);
  Dialog.setInsets(0, 20, 0);
  Dialog.addRadioButtonGroup("", ErrorResponseArray, ErrorResponseArray.length, 1, ErrorResponseArray[0]);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  CloseUtilityWindows(ListUtilityWindows);
  Dialog.show();
  UserResponseErrorDialog=Dialog.getRadioButton();
  return UserResponseErrorDialog;
}

// Function to select an Input Directory containing at least MinNbFile with the correct File Extension FileExt
var SelectInputDirPass; // Switch for the dialog box
var InputDirPath; // Path of the input directory
var ParentDir; // ParentDirectory of the selected input directory
var InputDirName; // Name of the Input Directory
var NbFileWithCorrectExt; // Nb of File with the correct extension in the input directory
var InputItemList; // List of Files and folders in the input directory (all files no matter the extension)
var InputCorrectExtFileList; // List of files with the correct extension
var InputFileList;
var NbFile;

function SelectInputDir(MinNbFile, FileExt){
  // MinNbFile This is the minimum Nb of File to be present in the list to be accepted
  // FileExt This is the File extension as a string example "tif"
  InputDirPath=getDirectory("Select a FOLDER containing at least "+MinNbFile+" "+FileExt+" Files to process."); // Select a Folder
  InputItemList=getFileList(InputDirPath); // List of Item in the selected folder
  ParentDir=File.getParent(InputDirPath)+File.separator;
  InputDirName=File.getName(InputDirPath);

  SelectInputDirPass=0; // Switch for the Function
  NbFileWithCorrectExt=0; // Count of Nb of Files
  BaseNameError=0; // Switch to make sure there is only one "." in the filename
  InputCorrectExtFileList=newArray(0);

  // Evaluate the Nb of File with correct extension and add them to InputCorrectExtFileList
  for (ItemI=0; ItemI<InputItemList.length; ItemI++){
    if(endsWith(toLowerCase(InputItemList[ItemI]), "."+toLowerCase(FileExt))){ // Select files with correct extension
      InputCorrectExtFileList=Append(InputCorrectExtFileList, InputItemList[ItemI]);
    }
  }
  NbFileWithCorrectExt=InputCorrectExtFileList.length;
  if(NbFileWithCorrectExt<MinNbFile){ // If the Nb of File with correct extension is not at least equal to the MinNbFile Create Error Message.
    MessageError="Sorry but the Folder: \"" +InputDirName+"\" does not contain at least "+MinNbFile+" "+FileExt+" File.";
    MessageFix=MacroName+" requires a Folder that contains at least "+MinNbFile+" "+FileExt+" File.";
    ErrorResponseArray=newArray("Select Another Folder", "Cancel and Close");
    MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because the Folder: \"" +InputDirName+"\" did not contain at least "+MinNbFile+" "+FileExt+" File.";
    ErrorDialog(MessageError, MessageFix, ErrorResponseArray);

    if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
      CleanExit(MessageQuit);
    } else {
    }
  } else { // if NbFileWithCorrectExt is above or equal MinNbFile Evaluate Filenames
    InputFileList=newArray(0);
    for (FileI=0; FileI<InputCorrectExtFileList.length; FileI++){
      BasenameFileIArray=split(InputCorrectExtFileList[FileI],"."); // Make an array from the filename
      if(BasenameFileIArray.length!=2){// if there is more than one . in the file name abort
        MessageError="Sorry but the "+FileExt+" File:\n\""+InputCorrectExtFileList[FileI]+"\"\ncontains more than one \".\" in its filename.";
        MessageFix=MacroName+" function does NOT allow filenames with more than one unique \".\" used for the file extension.";
        ErrorResponseArray=newArray("Select Another Folder", "Ignore This File", "Cancel and Close");
        MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because the File \""+InputCorrectExtFileList[FileI]+"\" contains more than one \".\"\nMake sure filenames have no more than one unique \".\" for the File extension.";
        ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
        if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
          CleanExit(MessageQuit);
        } else if (UserResponseErrorDialog=="Ignore This File"){

        } else if (UserResponseErrorDialog=="Select Another Folder") {
          FileI=InputCorrectExtFileList.length;
          SelectInputDirPass=0;
          ErrorDialogPass=1;
        }
      }else { // If basename is good add it to the InputFileList
        InputFileList=Append(InputFileList, InputCorrectExtFileList[FileI]);
      }
    }
    // Make sure InpuFileList is > MinNbFile
    NbFile=InputFileList.length;
    if(NbFile<MinNbFile && ErrorDialogPass!=1){ // If the Nb of File with correct extension is not at least equal to the MinNbFile Create Error Message.
      MessageError="Sorry but the Folder: \"" +InputDirName+"\" does not contain at least "+MinNbFile+" "+FileExt+" File with no more than one \".\" in its filename.";
      MessageFix=MacroName+" requires a Folder that contains at least "+MinNbFile+" "+FileExt+" File with one unique \".\" used for the file extension.";
      ErrorResponseArray=newArray("Select Another Folder", "Cancel and Close");
      MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because the Folder: \"" +InputDirName+"\" did not contain at least "+MinNbFile+" "+FileExt+" File no more than one \".\" in its filename.";
      ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
      if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
        CleanExit(MessageQuit);
      } else {
        SelectInputDirPass=0;
      }
    } else if (ErrorDialogPass==1){
      SelectInputDirPass=0; // InputDir Pass the criteria
    } else {
      SelectInputDirPass=1; // InputDir Pass the criteria
    }
  }
} // End of Function Select InputDir

// Function to create a new output directory
var OutputDirPath; // The path of the output directory
var OutputDirName; // The name of the output directory
function CreateOutputDir(ParentDir, InputDirName, FolderSuffix){ // Folder suffix is a string appended to the input Directory
  OutputDirPath=ParentDir+InputDirName+"_"+FolderSuffix+File.separator; // Create the outputdirpath
  n=1;
  while(File.exists(OutputDirPath)!=0){ // If the path already exist, increment with _ n until it does not exist
    n++;
    OutputDirPath=ParentDir+InputDirName+"_"+FolderSuffix+"_"+n+File.separator;
  } // End of making sure the outpudirectory is a new folder
  File.makeDirectory(OutputDirPath); // Create the outpudirectory
  OutputDirName=File.getName(OutputDirPath); // Get the Name of the output directory
}

////// Close Function
function CloseAndCleanUp(PluginName, FileI, NbFile, FileExt, InputDirName, OutputDirName){
  beep();

  ListImages=getList("image.titles");
  for(n=0; n<ListImages.length; n++){
    ImageN=ListImages[n];
    selectWindow(ImageN);    run("Close");
  }


  /////////////////////// Closing Dialog Box
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(FileI+" of "+ NbFile+" "+ FileExt+ " Files in the folder:\n"+InputDirName+"\nhave been processed successfully.");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage("Files are saved in the following folder:\n"+OutputDirName+".");
  Dialog.setInsets(0, 0, 0);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  CloseUtilityWindows(ListUtilityWindows);
  Dialog.show();
}  ///////////////////////// End of Close Function

////// CleanExit Function
function CleanExit(MessageQuit){
  beep();
  if(isOpen("Threshold")){    selectWindow("Threshold");    run("Close");  }//end of if threshold is open
  if(isOpen("Results")){    run("Clear Results");    selectWindow("Results");    run("Close");  }//end of if Results is open
  if(isOpen("ROI Manager")){    roiManager("reset");    selectWindow("ROI Manager");    run("Close");  }//End of Close the ROI Manager
  if(isOpen("B&C")){    selectWindow("B&C");    run("Close");  }//End of Close the Brightness window

  ListImages=getList("image.titles");
  for(n=0; n<ListImages.length; n++){
    ImageN=ListImages[n];
    selectWindow(ImageN);    run("Close");

  }
Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(MessageQuit);
  Dialog.setInsets(0, 0, 0);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  CloseUtilityWindows(ListUtilityWindows);
  Dialog.show();
  exit();
}  ///////////////////////// End of CleanExit Function

//////////Close UtilityWindows
function CloseUtilityWindows(ListUtilityWindows){
// Typically  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  for(WindowI=0; WindowI<ListUtilityWindows.length; WindowI++){
    UtilityWindowI=ListUtilityWindows[WindowI];
    if(isOpen(UtilityWindowI)){
      if(UtilityWindowI=="Results"){        run("Clear Results");       }
      if(UtilityWindowI=="ROI Manager"){       roiManager("reset");      }
        selectWindow(UtilityWindowI); run("Close");
      }
  }
}
//////////End of Close UtilityWindows
////////////////////End of General Functions



/////////// Specific Functions
// This function Prompt for the Nb of Channels to Merge
var PromptNbChPass; // Switch for dialog
var NbCh; // Total Nb of Channel
var MinChNb=2; // Min Nb of Channels to Merge
var MaxChNb=7; // Max Nb of Channels to Merge
function PromptNbCh (InputFileList, MinChNb, MaxChNb){
  Array.show("Results", InputFileList);// Show The name of InputFileList
  PromptNbChPass=0; // Set the Switch to 0
  NbCh=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".NbCh", 2); // Call the NbofCh from saved in the preferences
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage("Indicate the number of Channels to process (min: "+MinChNb+" ; max: "+MaxChNb+").");
  Dialog.setInsets(0, 0, 0);
  Dialog.addSlider("Number Channels :",2,7, NbCh);
  Dialog.setInsets(0, 0, 0);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  Dialog.show();
  NbCh=Dialog.getNumber();
  NbCh=round(NbCh); // Round the NbofCh because user can enter manual values
  if(isNaN(NbCh)==1 || NbCh<MinChNb || NbCh>MaxChNb || NbCh<1){ // Make sure the NbCh is a valid integer or display an error
    if(isNaN(NbCh)==1){
      MessageError="Sorry but the provided Number of Channels is not a number.";
    } else if(NbCh<MinChNb){
      MessageError="Sorry but the provided Number of Channels is too small.";
    } else if(NbCh>MaxChNb){
      MessageError="Sorry but the provided Number of Channels is too big.";
    }else if(NbCh<1){
      MessageError="Sorry but the provided Number of Channels is too big.";
    } else {
      MessageError="Sorry but the provided Number of Channels is invalid.";
    }
    // Display an error
    MessageFix=MacroName+" function requires a positive Number of Channels comprised between "+MinChNb+" and "+MaxChNb+".";
    ErrorResponseArray=newArray("Select Another Number of Channels", "Cancel and Close");
    MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because the Number of Channels was not comprised between  "+MinChNb+" and "+MaxChNb+".";
    ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
    if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
      CleanExit(MessageQuit);
    } else {
      PromptNbChPass=0;
      NbCh=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".NbCh", 2); // Restore the NbCh Default
    }
  } else {// If NbCh pass then save it in preferences
    PromptNbChPass=1;
    call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".NbCh",NbCh);
  }
} // End of function PromptNbCh

// Prompt how to Identify each Ch
var IdentifyChPass; // Switch to pass Ch Identification
var ChIDPosition; // Position of ChannelID with the file names (Prefix or Suffix)
var ListChID; // ChID in the original file
var ListChName; // Name of the Channel for naming when fused
function IdentifyCh (NbCh){
  IdentifyChPass=0;
  // Get or Set the Default values for the ChIdentifier Position and Names
  ChIDPosition=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ChIDPosition", "Suffix");
  ListChIDString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ListChID", "_C1,_C2,_C3,_C4,_C5,_C6,_C7");
  ListChID=split(ListChIDString,",");
  ListChNameString=call("ij.Prefs.get", "Default."+PluginName+"."+MacroName+".ListChName", "DAPI,Hoescht,Nissl,ProteinA,PorteinB,ProteinC,ProteinD");
  ListChName=split(ListChNameString,",");
  // Display a dialog
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage("Indicate how to identify each channel.");
  Dialog.setInsets(0, 0, 0);
  Dialog.addRadioButtonGroup("Channel Identifier Position :",newArray("Prefix", "Suffix"),1,2,ChIDPosition);
  for (ChI = 0; ChI < NbCh; ChI++){
    Dialog.setInsets(0, 10, 0);
    Dialog.addString("Ch Identifier "+ChI+1+":", ListChID[ChI], 10);
    Dialog.setInsets(0, 10, 0);
    Dialog.addString("Ch Name "+ChI+1+":", ListChName[ChI], 10);
  }
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  Dialog.show();

  ChIDPosition=Dialog.getRadioButton();//Get the position of ChID suffix or prefix
  for (ChI = 0; ChI < NbCh; ChI++){ // FOr each Channel get the ID and the Name
    ListChID[ChI]=Dialog.getString();
    ListChName[ChI]=Dialog.getString();
  }

  // Make sure ChID and ChNames do not contain , nor .
  for (ChI = 0; ChI < NbCh; ChI++){
    if(matches(ListChID[ChI],".*[,.].*")==1 || matches(ListChName[ChI],".*[,.].*")==1){
      IdentifyChPass= -1;
    }
  }

  // Make sure ChID and ChName are unique
  for (ChIA = 0; ChIA < NbCh-1; ChIA++){
    for (ChIB = ChIA+1; ChIB < NbCh; ChIB++){
      ChIDA=ListChID[ChIA];
      ChIDB=ListChID[ChIB];
      ChNameA=ListChName[ChIA];
      ChNameB=ListChName[ChIB];
      if(ChIDA==ChIDB || ChNameA==ChNameB){
        IdentifyChPass= -1;
      }
    }
  }
  // Display an error dialog
  if(IdentifyChPass<0){
    MessageError="Sorry but the Channel Identifiers and Channel Names must be unique and canno't contain any comma \",\" nor dot \".\".";
    MessageFix=MacroName+" function does NOT allow commas \",\" nor dots \".\" in the Channel Identifiers and Channel Names which must unique.";
    ErrorResponseArray=newArray("Modify Channel Identifiers and Channel Names", "Cancel and Close");
    MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because the Channel Identifiers and Channels Names weren't unique and/or contained commas \",\" or dots \".\"";
    ErrorDialog(MessageError,MessageFix,ErrorResponseArray);
    if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
      CleanExit(MessageQuit);
    } else {
      IdentifyChPass=0;
    }
  } else {// end of if Identify ChPass=Fail
    IdentifyChPass=1;

    //Recreate the Strings from the Arrays

    for (ChI=0; ChI < ListChID.length ;ChI++){
      if(ChI==0){
        ListChIDString=""+ListChID[ChI];
        ListChNameString=""+ListChName[ChI];
      }else{
        ListChIDString=ListChIDString+","+ListChID[ChI];
        ListChNameString=ListChNameString+","+ListChName[ChI];
      }
    }// End of recreate the strings from the arrays
    // Save the ID Position, IDs and Names in the preferences
    call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".ChIDPosition",ChIDPosition);
    call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".ListChID",ListChIDString);
    call("ij.Prefs.set", "Default."+PluginName+"."+MacroName+".ListChName",ListChNameString);
  } // End of If Ch are correctly identified
} // end of function Identify Ch


// This function ensure that all file in the InputFileList have the correct ChID to be Merged
// It creates Basenames which are fullname minus the ChID and make sure that all basename+ChID exists
var InputDirMatchIdentifyChPass; // Switch InputDir has the correct content
var UsableBaseNameList;
function InputDirMatchIdentifyCh(InputFileList, ListChID, NbCh){
  InputDirMatchIdentifyChPass=0;
  // Work on the InputCorrectExtFileList to get only the files with NbCh present
  InputFileListNoExt=newArray(0); // Create a list of BasenameFileI

  // Remove File extension and add to the BaseName List
  for(I=0; I<InputCorrectExtFileList.length; I++){ // Loop around the list of TIF file
    BaseNameIArray=split(InputCorrectExtFileList[I],".");// This is the Array of FileName and FileExtension
    InputFileListNoExt=Append(InputFileListNoExt,BaseNameIArray[0]);
  }

  // Remove ChIDs from the BaseNameList
  BaseNameList=newArray(0); // Create a NewArray
  for(I=0; I<InputFileListNoExt.length; I++){ // Loop around the list of TIF file
    BaseNameI=InputFileListNoExt[I];
    for(ChI=0;ChI<NbCh;ChI++){ // Loop around the Channels
      ChIDChI=ListChID[ChI];
      if(startsWith(BaseNameI,ChIDChI) || endsWith(BaseNameI,ChIDChI)){
        BaseNameINoChID=replace(BaseNameI,ChIDChI,""); // Replace the ChIdentifier (prefix) by Empty string
        BaseNameList=Append(BaseNameList,BaseNameINoChID);
      }// end of if else starts with
    } // end of Loop around the channels
  } // end of for

  // Remove duplicates
  // Check for duplicates within the list of file with no Ch identifier
  BaseNameListNoDuplicate=Array.copy(BaseNameList);
  for (FileI=0; FileI<BaseNameListNoDuplicate.length-1; FileI++){
    for (FileN=FileI+1; FileN<BaseNameListNoDuplicate.length; FileN++){
      BaseNameI=BaseNameListNoDuplicate[FileI];
      BaseNameN=BaseNameListNoDuplicate[FileN];
      if(BaseNameI!="" && BaseNameI==BaseNameN){ // If TifFile basename I is not empty and it is identical to the next then erase the next
        BaseNameListNoDuplicate[FileN]="";//Remove the duplicate
      } // end of if
    } // end of for n
  } // end of for i

  //Remove empty strings
  UniqueBaseNameList=newArray(0);
  for (FileI=0; FileI<BaseNameListNoDuplicate.length; FileI++){
    BaseNameI=BaseNameListNoDuplicate[FileI];
    if(BaseNameI!=""){
      UniqueBaseNameList=Append(UniqueBaseNameList,BaseNameI);
    }
  }

  // Make a list of Usable Basename (only the ones that have all their required Nb Channels file)
  UsableBaseNameList=newArray(0);
  for(I=0;I<UniqueBaseNameList.length;I++){
    UniqueBaseNameI=UniqueBaseNameList[I];
    NbMatchingFile=0;
    for(ChI=0;ChI<NbCh;ChI++){
      ChIDChI=ListChID[ChI];
      // Reconstruct the FilePath for each Ch
      if(ChIDPosition=="Prefix"){
        FilenameChINoExt=ChIDChI+UniqueBaseNameI;
      } else if(ChIDPosition=="Suffix"){
        FilenameChINoExt=UniqueBaseNameI+ChIDChI;
      }
      // Screen the
      for(N=0; N<InputFileListNoExt.length;N++){
        InputFileNoExtN=InputFileListNoExt[N];
        if(matches(FilenameChINoExt,InputFileNoExtN)==1){
          NbMatchingFile++;
        }
      }
    }
    if(NbMatchingFile==NbCh){
      UsableBaseNameList=Append(UsableBaseNameList,UniqueBaseNameI);
    }
  }
  // Create an error if the Nb Usable basename are
  if(UsableBaseNameList.length==0){
    InputDirMatchIdentifyChPass=-1;
    ListSelectedCh=Array.trim(ListChID, NbCh);
    ListSelectedChForMessage="";
    for(ChI=0;ChI<ListSelectedCh.length;ChI++){
      ListSelectedChForMessage=ListSelectedChForMessage+"\n"+ListSelectedCh[ChI];
    }
    MessageError="Sorry but the folder \""+InputDirName+"\" does not contain at least "+NbCh+" "+FileExt+" files with the following Channel Identifiers as "+ChIDPosition+":"+ListSelectedChForMessage;
    MessageFix=MacroName+" function requires at least "+MinNbFile+" "+FileExt+" files with the requested Channel Identifiers as "+ChIDPosition+".";
    ErrorResponseArray=newArray("Select Another Folder", "Modify the Number of Channels", "Modify the Channel Identifiers and Names", "Cancel and Close");
    MessageQuit=PluginName+ " Information:\nThe function "+ MacroName+" stopped because the folder \""+InputDirName+"\" does not contain at least "+MinNbFile+" "+FileExt+" files with the following Channel IDs :"+"Array.print(Array.trim(ListCHID, NbCh))"+" as "+ChIDPosition+".";
    ErrorDialog(MessageError,MessageFix,ErrorResponseArray);
    if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
      CleanExit(MessageQuit);
    } else if(UserResponseErrorDialog== "Select Another Folder"){
      SelectInputDirPass=0;
    } else if (UserResponseErrorDialog== "Modify the Number of Channels"){
      PromptNbChPass=0;
    } else if (UserResponseErrorDialog== "Modify the Channel Identifiers and Names"){
      IdentifyChPass=0;
    }
  } else if(UsableBaseNameList.length>0){
    InputDirMatchIdentifyChPass=1;
  } // end of if pass
} // end of Function
////////////////////End of Specific Functions


InitialMessage=""+MacroName+" will :"
+"\n- Prompt to select a Folder containing at least "+MinNbFile+" "+FileExt+" File to process"
+"\n- Prompt to select the Number of Channels to Merge"
+"\n- Prompt to define the position (Prefix or Suffix) and the Channel Identifiers"
+"\n\nFor each "+FileExt+" File:"
+"\n  - Open All Channels related to it"
+"\n  - Merge the Channels into a single Composite Image"
+"\n  - Save the Composite Images as TIF Files in a new folder";

MessageDialog(InitialMessage);

do{
  while(SelectInputDirPass!=1){
    SelectInputDir(MinNbFile, FileExt);
  }

  while(PromptNbChPass!=1){
    PromptNbCh(InputFileList, MinChNb, MaxChNb);
  }

  while(IdentifyChPass!=1){
    IdentifyCh(NbCh);
  }

  if(isOpen("Results")){
    run("Clear Results");
    selectWindow("Results");    run("Close");

  }
  InputDirMatchIdentifyCh(InputFileList, ListChID, NbCh);
}while(InputDirMatchIdentifyChPass!=1)

// Once we checked that at least 1 basename file has all the required ChID
CreateOutputDir(ParentDir, InputDirName, FolderSuffix);

// Process all files within the list of Usable BaseName
setBatchMode(true);
for(FileI=0; FileI<UsableBaseNameList.length; FileI++){
  BaseNameI=UsableBaseNameList[FileI];
  // Process all channels
  for(ChI=0;ChI<NbCh;ChI++){
    ChIDChI=ListChID[ChI];
    // Reconstruct the filename for each Ch
    if(ChIDPosition=="Prefix"){
      FilenameChINoExt=ChIDChI+BaseNameI;
    }else if(ChIDPosition=="Suffix"){
      FilenameChINoExt=BaseNameI+ChIDChI;
    }
    // Screen the InputCorrectExtFileList to find the matching file with no extension
    // Doing this to avoid upper and lower case issue in the file extension
    for(InputFileN=0;InputFileN<InputFileList.length;InputFileN++){
      if(startsWith(InputFileList[InputFileN],FilenameChINoExt)){
        open(InputDirPath+InputFileList[InputFileN]); // Open ImageChI
        ImageNameChI=getTitle();
        if(ChI==0){
          ImageNameList=newArray(0);
        }
        ImageNameList=Append(ImageNameList,ImageNameChI);
      }
    }
  } // end of ChI


  // Create a String to be used for the Merge Channel process
  for(ChI=0;ChI<NbCh; ChI++){
    if(ChI==0){
      StringMergeChannels="";
      StringMergeChannels=StringMergeChannels+"c"+ChI+1+"=["+ImageNameList[ChI]+"]";
    }else{
      StringMergeChannels=StringMergeChannels+" c"+ChI+1+"=["+ImageNameList[ChI]+"]";
    }
  }
  StringMergeChannels=StringMergeChannels+" create";
  // Merge all the Channels
  run("Merge Channels...", StringMergeChannels);

  // Create the Output name
  for(ChI=0;ChI<NbCh; ChI++){
    ChIDChI=ListChID[ChI];
    if(ChI==0){
      OutputImagePath=OutputDirPath+BaseNameI+"_"+ListChName[ChI];
    }else{
      OutputImagePath=OutputImagePath+"-"+ListChName[ChI];
    }
  }
  saveAs("Tif", OutputImagePath);
  run("Close All");

  showProgress(FileI, UsableBaseNameList.length);
} ////////////////////////end for Filei loop

NbFile=UsableBaseNameList.length;

CloseAndCleanUp(PluginName, FileI, NbFile, FileExt, InputDirName, OutputDirName);
